bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  result  =  _numberInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]            JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =  _numberInt.intValue();  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =  _numberInt.intValue();	      	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
2	[BUG]  [BUGGY]  ((  long)_numTypesValid)!=  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]              JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  ((  long)_numTypesValid)!=  0)  {  reportOverflowInt();  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)!=  0)  {  reportOverflowInt();	      	non-compiled	[CE]  not  a  statement	4	None	replace
3	[BUG]  [BUGGY]  ((  long)_numTypesValid)  >=  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]                JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  ((  long)_numTypesValid)  >=  0)  {  reportOverflowInt();  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)  >=  0)  {  reportOverflowInt();	      	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  ((  long)_numTypesValid)!=  _numberLong.intValue();  [CE]  not  a  statement  [FE]                  JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  ((  long)_numTypesValid)!=  _numberLong.intValue();  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)!=  _numberLong.intValue();	      	non-compiled	[CE]  not  a  statement	4	None	replace
5	[BUG]  [BUGGY]  short  result  =(short)_numberLong;  short  result  =(short)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  short  result  =(short)_numberLong;  short  result  =(short)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short    result    =(short)_numberLong;    short  result  =(short)_numberLong;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	2	None	add
6	[BUG]  [BUGGY]  short  result  =(short)_numberLong;  Short  result  =(short)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  short  result  =(short)_numberLong;  Short  result  =(short)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short    result    =(short)_numberLong;    Short  result  =(short)_numberLong;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	2	None	add
7	[BUG]  [BUGGY]  short  result  =(short)_numberLong;  long  result  =(short)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  short  result  =(short)_numberLong;  long  result  =(short)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short    result    =(short)_numberLong;    long  result  =(short)_numberLong;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	2	None	add
8	[BUG]  [BUGGY]  short  result  =(short)_numberLong;  int  result  =(short)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  short  result  =(short)_numberLong;  int  result  =(short)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short    result    =(short)_numberLong;    int  result  =(short)_numberLong;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	2	None	add
9	[BUG]  [BUGGY]  short  result  =(short)_numberLong;  int  result  =(int)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]            JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  short  result  =(short)_numberLong;  int  result  =(int)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short    result    =(short)_numberLong;    int  result  =(int)_numberLong;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	2	None	add
10	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	add
11	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	add
12	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  }  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	add
13	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	add
14	[BUG]  [BUGGY]  short  result  =(int)_numberLong;  [CE]  possible  loss  of  precision  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  short  result  =(int)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
15	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	7	8	replace
16	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	7	8	replace
17	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  possible  loss  of  precision  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
18	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	8	None	add
19	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	8	None	add
20	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  }  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	8	None	add
21	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  byte  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  byte  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	8	None	add
22	[BUG]  [BUGGY]  double  result  =  (double)_numberLong;  [CE]  possible  loss  of  precision  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  double  result  =  (double)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	double  result  =  (double)_numberLong;	  float    result    =    (float)_numberLong;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
23	[BUG]  [BUGGY]  long  result  =  (float)_numberLong;  [CE]  possible  loss  of  precision  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  long  result  =  (float)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =  (float)_numberLong;	  float    result    =    (float)_numberLong;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
24	[BUG]  [BUGGY]  Integer  result  =(Integer)_numberLong;  [CE]  inconvertible  types  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  Integer  result  =(Integer)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)_numberLong;	  long    result    =(long)_numberLong;    	non-compiled	[CE]  inconvertible  types	1	None	replace
25	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
26	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
27	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
28	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
29	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
30	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
31	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  possible  loss  of  precision  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
32	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext();  [CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]            JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext();  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext();	      	non-compiled	[CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	4	None	replace
33	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [CE]  cannot  find  symbol  result  [FE]              JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);	      	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
34	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.getParent();  [CE]  cannot  find  symbol  result  [FE]                JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  _parsingContext  =  _parsingContext.getParent();  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.getParent();	      	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
35	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numTypesValid);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                  JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  _parsingContext.setCurrentName(_numTypesValid);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(_numTypesValid);	      	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	4	None	replace
36	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
37	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
38	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	add
39	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	add
40	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	8	None	add
41	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  possible  loss  of  precision  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
42	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	7	8	replace
43	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	7	8	replace
44	[BUG]  [BUGGY]  short  result  =(short)_numberLong;  char  result  =(char)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  short  result  =(short)_numberLong;  char  result  =(char)_numberLong;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short    result    =(short)_numberLong;    char  result  =(char)_numberLong;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	2	None	add
45	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1));  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1));  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  ';'  expected	7	None	replace
46	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  }  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid  ==  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	8	None	add
47	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
48	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	9	8	replace
49	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]            JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext();	      	non-compiled	[CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	4	None	replace
50	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {      [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  }  [BUGGY]    if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid  ==  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	add
