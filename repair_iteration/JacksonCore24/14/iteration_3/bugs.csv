bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _parseNumericValue(ctxt,  len);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parseNumericValue(ctxt,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(ctxt,  len);	  _parseNumericValue(ctxt,    _numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  _parseNumericValue(JsonToken.VALUE_NUMBER_INT,  len);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parseNumericValue(JsonToken.VALUE_NUMBER_INT,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(JsonToken.VALUE_NUMBER_INT,  len);	  _parseNumericValue(ctxt,    _numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  _parseNumericValue(ctxt,  _numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parseNumericValue(ctxt,  _numberNegative,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(ctxt,  _numberNegative,  len);	  _parseNumericValue(ctxt,    _numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
4	[BUG]  [BUGGY]  _parseNumericValue(ctxt,  _numberNegative,  expType);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parseNumericValue(ctxt,  _numberNegative,  expType);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(ctxt,  _numberNegative,  expType);	  _parseNumericValue(ctxt,    _numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  if  (len  ==  16)  {  if  (len  ==  16)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  16)  {  if  (len  ==  16)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    16)    {    if  (len  ==  16)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
6	[BUG]  [BUGGY]  if  (len  ==  16)  {  if  (len  >=  16)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  16)  {  if  (len  >=  16)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    16)    {    if  (len  >=  16)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
7	[BUG]  [BUGGY]  if  (len  ==  16)  {  if  (len!=  16)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  16)  {  if  (len!=  16)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    16)    {    if  (len!=  16)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
8	[BUG]  [BUGGY]  if  (len  ==  16)  {  If(len  ==  16)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  16)  {  If(len  ==  16)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    16)    {    If(len  ==  16)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
9	[BUG]  [BUGGY]  if  (len  ==  12)  {  if  (len  ==  12)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  if  (len  ==  12)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    if  (len  ==  12)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
10	[BUG]  [BUGGY]  if  (len  ==  12)  {  if  (len  >=  12)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  if  (len  >=  12)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    if  (len  >=  12)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  if  (len  ==  12)  {  if  (len!=  12)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  if  (len!=  12)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    if  (len!=  12)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
12	[BUG]  [BUGGY]  if  (len  ==  12)  {  If(len  ==  12)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  If(len  ==  12)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    If(len  ==  12)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
13	[BUG]  [BUGGY]  int  len  =  _inputEnd.length();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _inputEnd.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _inputEnd.length();	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
14	[BUG]  [BUGGY]  int  len  =  _inputPtr.length()  +  1;  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _inputPtr.length()  +  1;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _inputPtr.length()  +  1;	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
15	[BUG]  [BUGGY]  int  len  =  _inputPtr.length()  -  1;  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _inputPtr.length()  -  1;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _inputPtr.length()  -  1;	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
16	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _inputBuffer.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _inputBuffer.length();	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  18)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if(len  >  18)  {	  if    (len    ==    10)    {    	compilable	  [FE]  AssertionFailedError  	6	25	replace
18	[BUG]  [BUGGY]  if(len  >  18)  {  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  18)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  >  18)  {	  if    (len    ==    10)    {    	compilable	  [FE]  AssertionFailedError  	6	25	replace
19	[BUG]  [BUGGY]  int  len  =  _intLength.length();  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _intLength.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _intLength.length();	  if    (len    ==    9)    {    int    len    =    _intLength.length();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
20	[BUG]  [BUGGY]  if(len  ==  9)  {  int  len  =  _intLength.length();  }  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  int  len  =  _intLength.length();  }  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  int  len  =  _intLength.length();  }	  if    (len    ==    9)    {    int    len    =    _intLength.length();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
21	[BUG]  [BUGGY]  Integer  len  =  _intLength.length();  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  len  =  _intLength.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  len  =  _intLength.length();	  if    (len    ==    9)    {    int    len    =    _intLength.length();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
22	[BUG]  [BUGGY]  int  len  =  _numberNegative;  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _numberNegative;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _numberNegative;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  int  len  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _inputEnd;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _inputEnd;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  int  len  =  _currToken.length;  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _currToken.length;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _currToken.length;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  int  len  =  _numberNegative.length;  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _numberNegative.length;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _numberNegative.length;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  if(len  ==  9)  {  int  len  =  _intLength;  }  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  int  len  =  _intLength;  }  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  int  len  =  _intLength;  }	  if    (len    ==    9)    {    int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  Integer  len  =  _intLength;  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  len  =  _intLength;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  len  =  _intLength;	  if    (len    ==    9)    {    int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
28	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getCurrentIndex();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _parsingContext.getCurrentIndex();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _parsingContext.getCurrentIndex();	  Integer    i    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getNumericValue();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _parsingContext.getNumericValue();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _parsingContext.getNumericValue();	  Integer    i    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
30	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getCurrentName();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _parsingContext.getCurrentName();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _parsingContext.getCurrentName();	  Integer    i    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  if  (len  ==  10)  {  if  (len  ==  10)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  10)  {  if  (len  ==  10)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    10)    {    if  (len  ==  10)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
32	[BUG]  [BUGGY]  if  (len  ==  10)  {  if  (len  >=  10)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  10)  {  if  (len  >=  10)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    10)    {    if  (len  >=  10)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
33	[BUG]  [BUGGY]  if  (len  ==  10)  {  if  (len!=  10)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  10)  {  if  (len!=  10)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    10)    {    if  (len!=  10)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
34	[BUG]  [BUGGY]  if  (len  ==  10)  {  If(len  ==  10)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  10)  {  If(len  ==  10)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    10)    {    If(len  ==  10)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
35	[BUG]  [BUGGY]  if  (len  ==  0)  {  if  (len  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  0)  {  if  (len  ==  0)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    0)    {    if  (len  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
36	[BUG]  [BUGGY]  if  (len  ==  0)  {  if  (len  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  0)  {  if  (len  >=  0)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    0)    {    if  (len  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
37	[BUG]  [BUGGY]  if  (len  ==  0)  {  if  (len!=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  0)  {  if  (len!=  0)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    0)    {    if  (len!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
38	[BUG]  [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _textBuffer.contentsAsInt(_numberNegative,  len);	  Integer    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
39	[BUG]  [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _textBuffer.contentsAsInt(_numberNegative  +  1);	  Integer    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
40	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _parsingContext.contentsAsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _parsingContext.contentsAsInt(_numberNegative);	  Integer    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
41	[BUG]  [BUGGY]  int  fractLen  =  _inputEnd.length();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  fractLen  =  _inputEnd.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  fractLen  =  _inputEnd.length();	  int    fractLen    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
42	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  fractLen  =  _inputBuffer.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  fractLen  =  _inputBuffer.length();	  int    fractLen    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
43	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr.length()  +  1;  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  fractLen  =  _inputPtr.length()  +  1;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  fractLen  =  _inputPtr.length()  +  1;	  int    fractLen    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
44	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr.length()  -  1;  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  fractLen  =  _inputPtr.length()  -  1;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  fractLen  =  _inputPtr.length()  -  1;	  int    fractLen    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
45	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsLong(_numberNegative,  len);	  int    i    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
46	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberInt);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberInt);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsLong(_numberInt);	  int    i    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
47	[BUG]  [BUGGY]  Integer  i  =  _inputBuffer.contentsAsInt(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _inputBuffer.contentsAsInt(_numberNegative,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _inputBuffer.contentsAsInt(_numberNegative,  len);	  Integer    i    =    _inputBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  Integer  i  =  _inputBuffer.contentsAsInt(len);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _inputBuffer.contentsAsInt(len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _inputBuffer.contentsAsInt(len);	  Integer    i    =    _inputBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
50	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
51	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parsingContext  =  ctxt.createChildObjectContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
52	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsInt(_numberNegative,  len);	  int    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
53	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsInt(_numberNegative  +  1);	  int    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
54	[BUG]  [BUGGY]  char  i  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  char  i  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	char  i  =  _textBuffer.contentsAsInt(_numberNegative);	  int    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
55	[BUG]  [BUGGY]  int  i  =  _parsingContext.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _parsingContext.contentsAsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _parsingContext.contentsAsInt(_numberNegative);	  int    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
56	[BUG]  [BUGGY]  if  (len  >  9)  {  if  (len  >  9)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  9)  {  if  (len  >  9)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    >    9)    {    if  (len  >  9)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
57	[BUG]  [BUGGY]  if  (len  >  9)  {  If(len  >  9)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  9)  {  If(len  >  9)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    >    9)    {    If(len  >  9)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
58	[BUG]  [BUGGY]  if  (len  ==  18)  {  if  (len  ==  18)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  18)  {  if  (len  ==  18)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    18)    {    if  (len  ==  18)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
59	[BUG]  [BUGGY]  if  (len  ==  18)  {  if  (len  >=  18)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  18)  {  if  (len  >=  18)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    18)    {    if  (len  >=  18)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
60	[BUG]  [BUGGY]  if  (len  ==  18)  {  if  (len  ==  17)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  18)  {  if  (len  ==  17)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    18)    {    if  (len  ==  17)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
61	[BUG]  [BUGGY]  if  (len  ==  18)  {  if  (len!=  18)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  18)  {  if  (len!=  18)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    18)    {    if  (len!=  18)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  16)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if(len  >  16)  {	  if    (len    ==    16)    {    	compilable	  [FE]  AssertionFailedError  	12	25	replace
63	[BUG]  [BUGGY]  if(len  >  16)  {  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  16)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  >  16)  {	  if    (len    ==    16)    {    	compilable	  [FE]  AssertionFailedError  	12	25	replace
64	[BUG]  [BUGGY]  Integer  i  =  _textBuffer.contentsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _textBuffer.contentsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _textBuffer.contentsInt(_numberNegative);	  Integer    i    =    _inputBuffer.contentsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
65	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.contentsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _parsingContext.contentsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _parsingContext.contentsInt(_numberNegative);	  Integer    i    =    _inputBuffer.contentsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative,  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _inputBuffer.contentsInt(_numberNegative,  len);	  Integer    i    =    _inputBuffer.contentsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative  +  1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _inputBuffer.contentsInt(_numberNegative  +  1);	  Integer    i    =    _inputBuffer.contentsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  if(len  ==  0)  {  If(len  ==  0)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  0)  {  If(len  ==  0)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  0)  {  If(len  ==  0)  {	  if    (len    ==    9)    {    If(len    ==    9)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
69	[BUG]  [BUGGY]  if(len  >  9)  {  If(len  ==  9)  {  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  9)  {  If(len  ==  9)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  >  9)  {  If(len  ==  9)  {	  if    (len    ==    9)    {    If(len    ==    9)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
70	[BUG]  [BUGGY]  if(len  <  =  9)  {  If(len  ==  9)  {  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  <  =  9)  {  If(len  ==  9)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  <  =  9)  {  If(len  ==  9)  {	  if    (len    ==    9)    {    If(len    ==    9)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    0)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
72	[BUG]  [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    0)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
73	[BUG]  [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    0)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
74	[BUG]  [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  i  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  0)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  i  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    0)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  i  =  _textBuffer.contentsAsLong(_numberNegative);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
75	[BUG]  [BUGGY]  _parseNumericValue(jsonReadContext,  ctxt,  _numberNegative);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parseNumericValue(jsonReadContext,  ctxt,  _numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(jsonReadContext,  ctxt,  _numberNegative);	  _parseNumericValue(ctxt,    _numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
76	[BUG]  [BUGGY]  _parseNumericValue(ctxt,  NR_INT);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parseNumericValue(ctxt,  NR_INT);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(ctxt,  NR_INT);	  _parseNumericValue(ctxt,    _numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
77	[BUG]  [BUGGY]  if  (len  >  9)  {  int  len  =  _intLength;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  9)  {  int  len  =  _intLength;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    >    9)    {    int  len  =  _intLength;	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
78	[BUG]  [BUGGY]  if  (len  >  9)  {  int  len  =  _intLength.length();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  9)  {  int  len  =  _intLength.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    >    9)    {    int  len  =  _intLength.length();	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
79	[BUG]  [BUGGY]  if  (len  >  9)  {  if  (len  >=  9)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  9)  {  if  (len  >=  9)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  >  9)  {  if  (len  >=  9)  {	  if    (len    ==    9)    {    if    (len!=    9)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if    (len    ==    9)    {    if    (len!=    9)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_numberNegative  >  Integer.MIN_VALUE  ||  _numberNegative  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_numberNegative  >  Integer.MIN_VALUE  ||  _numberNegative  >  Integer.MAX_VALUE)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_numberNegative  >  Integer.MIN_VALUE  ||  _numberNegative  >  Integer.MAX_VALUE)  {	  if    (len    ==    9)    {    if    (len!=    9)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if    (len    ==    9)    {    if    (len!=    9)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr.length()  +  len;  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  fractLen  =  _inputPtr.length()  +  len;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  fractLen  =  _inputPtr.length()  +  len;	  int    fractLen    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
84	[BUG]  [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative  +  len);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative  +  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _textBuffer.contentsAsInt(_numberNegative  +  len);	  Integer    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
85	[BUG]  [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(len);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _textBuffer.contentsAsInt(len);	  Integer    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
86	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if    (len    ==    9)    {    if    (len    >=    9)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if    (len    ==    9)    {    if    (len    >=    9)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  0)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if(len  >  0)  {	  if    (len    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	18	22	replace
89	[BUG]  [BUGGY]  if(len  >  0)  {  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  0)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  >  0)  {	  if    (len    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	18	22	replace
90	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  19)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  >  19)  {	  if    (len    >    9)    {    	compilable	  [FE]  JsonParseException  	20	21	replace
91	[BUG]  [BUGGY]  if  (len  >  19)  {  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  19)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  >  19)  {	  if    (len    >    9)    {    	compilable	  [FE]  JsonParseException  	20	21	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  10)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if(len  >  10)  {	  if    (len    ==    10)    {    	compilable	  [FE]  AssertionFailedError  	6	25	replace
93	[BUG]  [BUGGY]  if(len  >  10)  {  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  10)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  >  10)  {	  if    (len    ==    10)    {    	compilable	  [FE]  AssertionFailedError  	6	25	replace
94	[BUG]  [BUGGY]  if  (len  ==  16)  {  int  len  =  _intLength;  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  16)  {  int  len  =  _intLength;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    16)    {    int  len  =  _intLength;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
95	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if    (len    ==    9)    {    if    (len    ==    9)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
96	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if    (len    ==    9)    {    if    (len    ==    9)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
97	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if    (len    ==    9)    {    if    (len    ==    9)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if    (len    ==    9)    {    if    (len    ==    9)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
100	[BUG]  [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
101	[BUG]  [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numTypesValid  =  NR_INT;  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numTypesValid  =  NR_INT;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numTypesValid  =  NR_INT;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
102	[BUG]  [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numTypesValid  =  NR_INT;  return;  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  12)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numTypesValid  =  NR_INT;  return;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    12)    {    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numTypesValid  =  NR_INT;  return;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
103	[BUG]  [BUGGY]  int  len  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _inputPtr;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _inputPtr;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
104	[BUG]  [BUGGY]  int  len  =  _expLength;  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  len  =  _expLength;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _expLength;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
105	[BUG]  [BUGGY]  if  (len  ==  10)  {  int  len  =  _intLength;  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  10)  {  int  len  =  _intLength;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    10)    {    int  len  =  _intLength;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
106	[BUG]  [BUGGY]  if  (len  ==  10)  {  int  len  =  _intLength.length();  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  10)  {  int  len  =  _intLength.length();  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    10)    {    int  len  =  _intLength.length();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  12)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  >  12)  {	  if    (len    ==    12)    {    	compilable	  [FE]  AssertionFailedError  	2	25	replace
108	[BUG]  [BUGGY]  if  (len  >  12)  {  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  >  12)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  >  12)  {	  if    (len    ==    12)    {    	compilable	  [FE]  AssertionFailedError  	2	25	replace
109	[BUG]  [BUGGY]  if(len  ==  0)  {  int  len  =  _intLength.length();  }  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  0)  {  int  len  =  _intLength.length();  }  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  0)  {  int  len  =  _intLength.length();  }	  if    (len    ==    9)    {    int    len    =    _intLength.length();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
110	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative  +  len);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative  +  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsInt(_numberNegative  +  len);	  int    i    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
111	[BUG]  [BUGGY]  if  (len  ==  18)  {  int  len  =  _intLength;  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if  (len  ==  18)  {  int  len  =  _intLength;  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    18)    {    int  len  =  _intLength;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
112	[BUG]  [BUGGY]  if(len  ==  0)  {  int  len  =  _intLength;  }  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  0)  {  int  len  =  _intLength;  }  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  0)  {  int  len  =  _intLength;  }	  if    (len    ==    9)    {    int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
113	[BUG]  [BUGGY]  if(len  <  =  9)  {  int  len  =  _intLength;  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  <  =  9)  {  int  len  =  _intLength;  }  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  <  =  9)  {  int  len  =  _intLength;  }	  if    (len    ==    9)    {    int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
114	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative  +  len);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative  +  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsLong(_numberNegative  +  len);	  int    i    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
115	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsLong(_numberNegative  +  1);	  int    i    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
116	[BUG]  [BUGGY]  if(len  >  9)  {  If(len  <  =  9)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  >  9)  {  If(len  <  =  9)  {  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  >  9)  {  If(len  <  =  9)  {	  if    (len    ==    9)    {    If(len    ==    9)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
117	[BUG]  [BUGGY]  int  i  =  _inputBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  int  i  =  _inputBuffer.contentsAsInt(_numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _inputBuffer.contentsAsInt(_numberNegative);	  Integer    i    =    _inputBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
118	[BUG]  [BUGGY]  if(len  ==  9)  {  int  len  =  _intLength  +  1;  }  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  ==  9)  {  int  len  =  _intLength  +  1;  }  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  ==  9)  {  int  len  =  _intLength  +  1;  }	  if    (len    ==    9)    {    int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
119	[BUG]  [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative  +  len);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative  +  len);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _inputBuffer.contentsInt(_numberNegative  +  len);	  Integer    i    =    _inputBuffer.contentsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
120	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  Integer  i  =  _parsingContext.createChildObjectContext(-1,  -1);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _parsingContext.createChildObjectContext(-1,  -1);	  Integer    i    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
121	[BUG]  [BUGGY]  _parseNumericValue(jp,  ctxt,  _numberNegative);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  _parseNumericValue(jp,  ctxt,  _numberNegative);  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(jp,  ctxt,  _numberNegative);	  _parseNumericValue(ctxt,    _numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
122	[BUG]  [BUGGY]  if(len  <  =  9)  {  int  len  =  _intLength.length();  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;        [BUGGY]  if(len  <  =  9)  {  int  len  =  _intLength.length();  }  [BUGGY]      int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if(len  <  =  9)  {  int  len  =  _intLength.length();  }	  if    (len    ==    9)    {    int    len    =    _intLength.length();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
