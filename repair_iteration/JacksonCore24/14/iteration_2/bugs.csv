bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  12)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  ==  12)  {	  if    (len    <    =    12)    {    	compilable	  [FE]  JsonParseException  	4	15	replace
2	[BUG]  [BUGGY]  if  (len  ==  12)  {  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  12)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  ==  12)  {	  if    (len    <    =    12)    {    	compilable	  [FE]  JsonParseException  	4	15	replace
3	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  18)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  ==  18)  {	  if    (len    ==    9)    {    	compilable	  [FE]  JsonParseException  	3	15	replace
4	[BUG]  [BUGGY]  if  (len  ==  18)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  18)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  ==  18)  {	  if    (len    ==    9)    {    	compilable	  [FE]  JsonParseException  	3	15	replace
5	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  10)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  ==  10)  {	  if    (len    ==    9)    {    	compilable	  [FE]  JsonParseException  	3	18	replace
6	[BUG]  [BUGGY]  if  (len  ==  10)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  10)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  ==  10)  {	  if    (len    ==    9)    {    	compilable	  [FE]  JsonParseException  	3	18	replace
7	[BUG]  [BUGGY]  if  (len  ==  9)  {  if  (len  ==  9)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  9)  {  if  (len  ==  9)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    9)    {    if  (len  ==  9)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
8	[BUG]  [BUGGY]  if  (len  ==  9)  {  if  (len  >=  9)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  9)  {  if  (len  >=  9)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    9)    {    if  (len  >=  9)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
9	[BUG]  [BUGGY]  if  (len  ==  9)  {  if  (len!=  9)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  9)  {  if  (len!=  9)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    9)    {    if  (len!=  9)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
10	[BUG]  [BUGGY]  if  (len  ==  9)  {  If(len  ==  9)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  9)  {  If(len  ==  9)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    9)    {    If(len  ==  9)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
11	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  16)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  ==  16)  {	  if    (len    <    =    16)    {    	compilable	  [FE]  JsonParseException  	5	15	replace
12	[BUG]  [BUGGY]  if  (len  ==  16)  {  [FE]  JsonParseException  [FE]              JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  16)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  ==  16)  {	  if    (len    <    =    16)    {    	compilable	  [FE]  JsonParseException  	5	15	replace
13	[BUG]  [BUGGY]  int  len  =  _intLength;  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  int  len  =  _intLength;  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _intLength;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  Integer  i  =  _inputBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  Integer  i  =  _inputBuffer.contentsAsInt(_numberNegative);  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _inputBuffer.contentsAsInt(_numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  Integer  i  =  _inputBuffer.contentsInt(_numberNegative);  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _inputBuffer.contentsInt(_numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  _parseNumericValue(ctxt,  _numberNegative);  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  _parseNumericValue(ctxt,  _numberNegative);  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parseNumericValue(ctxt,  _numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  0)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  ==  0)  {	  if    (len    ==    9)    {    	compilable	  [FE]  JsonParseException  	3	15	replace
18	[BUG]  [BUGGY]  if  (len  ==  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  0)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  ==  0)  {	  if    (len    ==    9)    {    	compilable	  [FE]  JsonParseException  	3	15	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  >  9)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	if  (len  >  9)  {	  if    (len    ==    9)    {    	compilable	  [FE]  AssertionFailedError  	3	27	replace
20	[BUG]  [BUGGY]  if  (len  >  9)  {  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  >  9)  {  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if  (len  >  9)  {	  if    (len    ==    9)    {    	compilable	  [FE]  AssertionFailedError  	3	27	replace
21	[BUG]  [BUGGY]  if  (len  ==  9)  {  int  len  =  _intLength;  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  9)  {  int  len  =  _intLength;  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    9)    {    int  len  =  _intLength;	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
22	[BUG]  [BUGGY]  if  (len  ==  9)  {  int  len  =  _intLength.length();  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  if  (len  ==  9)  {  int  len  =  _intLength.length();  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	if    (len    ==    9)    {    int  len  =  _intLength.length();	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
23	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsInt(_numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  Integer  i  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _textBuffer.contentsAsInt(_numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  int  i  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  i  =  _textBuffer.contentsAsLong(_numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  int  len  =  _inputPtr.length();  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  int  len  =  _inputPtr.length();  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  len  =  _inputPtr.length();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getCurrentToken();  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  Integer  i  =  _parsingContext.getCurrentToken();  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	Integer  i  =  _parsingContext.getCurrentToken();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr.length();  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;      [BUGGY]  int  fractLen  =  _inputPtr.length();  [BUGGY]    int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	int  fractLen  =  _inputPtr.length();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
