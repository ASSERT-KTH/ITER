bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.. ");	  _reportError(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    JsonParseException    _reportError(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    	compilable	  [FE]  JsonParseException  	28	8	replace
2	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.. ");  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.. ");	  _reportError(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    JsonParseException    _reportError(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    	compilable	  [FE]  JsonParseException  	28	8	replace
3	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	14	9	add
4	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	14	9	add
5	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int. ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	24	9	replace
6	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int. ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	24	9	replace
7	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.n ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.n ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
8	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.n ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.n ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.n ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
9	[BUG]  [BUGGY]  result  =  Math.min(_numberInt,  result.intValue());  [CE]  int  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberInt,  result.intValue());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(_numberInt,  result.intValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	37	None	replace
10	[BUG]  [BUGGY]  result  =  Math.min(_numberInt,  _numberInt.intValue());  [CE]  int  cannot  be  dereferenced  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberInt,  _numberInt.intValue());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(_numberInt,  _numberInt.intValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	37	None	replace
11	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")overflow  of  int   ");	  	compilable	  [FE]  JsonParseException  	30	9	add
12	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")overflow  of  int   ");	  	compilable	  [FE]  JsonParseException  	30	9	add
13	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");	  _reportInvalidEOF(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    	compilable	  [FE]  JsonParseException  	20	8	replace
14	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");	  _reportInvalidEOF(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    	compilable	  [FE]  JsonParseException  	20	8	replace
15	[BUG]  [BUGGY]  result  =  Math.min(result,  Long.MIN_VALUE);  [CE]  possible  loss  of  precision  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  Long.MIN_VALUE);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  Long.MIN_VALUE);	          result    =    Math.min(result,    _numberInt);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
16	[BUG]  [BUGGY]  result  =  Math.min(result,  Long.MAX_VALUE);  [CE]  possible  loss  of  precision  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  Long.MAX_VALUE);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  Long.MAX_VALUE);	          result    =    Math.min(result,    _numberInt);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
17	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberInt,  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	result  =  Math.min(_numberInt,  result);	          result    =    Math.min(result,    _numberInt);    	compilable	  [FE]  JsonParseException  	26	8	replace
18	[BUG]  [BUGGY]  result  =  Math.min(_numberInt,  result);  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberInt,  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(_numberInt,  result);	          result    =    Math.min(result,    _numberInt);    	compilable	  [FE]  JsonParseException  	26	8	replace
19	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	15	9	replace
20	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	15	9	replace
21	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);  [CE]  no  suitable  method  found  for  _reportInvalidEOF(String,int)  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    	non-compiled	[CE]  no  suitable  method  found  for  _reportInvalidEOF(String,int)	15	None	replace
22	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "  + ",  result= ",  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "  + ",  result= ",  result);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    	compilable	  [FE]  JsonParseException  	4	9	replace
23	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "  + ",  result= ",  result);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "  + ",  result= ",  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "  + ",  result= ",  result);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    	compilable	  [FE]  JsonParseException  	4	9	replace
24	[BUG]  [BUGGY]  ((  long)result)  ==  0;  [CE]  not  a  statement  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  ((  long)result)  ==  0;  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	((  long)result)  ==  0;	  ((    long)result)    ==    _numberLong;    	non-compiled	[CE]  not  a  statement	11	None	replace
25	[BUG]  [BUGGY]  ((  long)result)  ==  _numberInt;  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  ((  long)result)  ==  _numberInt;  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	((  long)result)  ==  _numberInt;	  ((    long)result)    ==    _numberLong;    	non-compiled	[CE]  not  a  statement	11	None	replace
26	[BUG]  [BUGGY]  ((  int)result)  ==  _numberLong;  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  ((  int)result)  ==  _numberLong;  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	((  int)result)  ==  _numberLong;	  ((    long)result)    ==    _numberLong;    	non-compiled	[CE]  not  a  statement	11	None	replace
27	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  long ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  long ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    	compilable	  [FE]  JsonParseException  	31	9	replace
28	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  long ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  long ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  long ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    	compilable	  [FE]  JsonParseException  	31	9	replace
29	[BUG]  [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");	  reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
30	[BUG]  [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int ",  result);  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int ",  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int ",  result);	  reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
31	[BUG]  [BUGGY]  result  =  Math.min(_numberLong,  result);  [CE]  possible  loss  of  precision  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberLong,  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(_numberLong,  result);	          result    =    Math.min(result,    _numberLong);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
32	[BUG]  [BUGGY]  reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.   ");  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.   ");	  _reportError(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    reportError(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
33	[BUG]  [BUGGY]  ReportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.   ");  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  ReportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	ReportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.   ");	  _reportError(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    reportError(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
34	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    Long.MIN_VALUE)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
35	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Integer.MIN_VALUE)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Integer.MIN_VALUE)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Integer.MIN_VALUE)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    Long.MIN_VALUE)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
36	[BUG]  [BUGGY]  result  =((  int)result).longValue();  [CE]  int  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =((  int)result).longValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =((  int)result).longValue();	  result    =((    long)result).longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
37	[BUG]  [BUGGY]  result  =((  long)_numberInt).longValue();  [CE]  long  cannot  be  dereferenced  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =((  long)_numberInt).longValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =((  long)_numberInt).longValue();	  result    =((    long)result).longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	replace
38	[BUG]  [BUGGY]  result  =((  long)_numberLong).longValue();  [CE]  long  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =((  long)_numberLong).longValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =((  long)_numberLong).longValue();	  result    =((    long)result).longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	replace
39	[BUG]  [BUGGY]  result  =(long)_numberInt.longValue();  [CE]  int  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =(long)_numberInt.longValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =(long)_numberInt.longValue();	  result    =(long)_numberLong.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
40	[BUG]  [BUGGY]  result  =(int)_numberLong.longValue();  [CE]  long  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =(int)_numberLong.longValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =(int)_numberLong.longValue();	  result    =(long)_numberLong.longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	10	None	replace
41	[BUG]  [BUGGY]  result  =(long)_numberLong.intValue();  [CE]  long  cannot  be  dereferenced  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =(long)_numberLong.intValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =(long)_numberLong.intValue();	  result    =(long)_numberLong.longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	10	None	replace
42	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");	  	compilable	  [FE]  JsonParseException  	1	9	add
43	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");	  	compilable	  [FE]  JsonParseException  	1	9	add
44	[BUG]  [BUGGY]  result  =  Math.min(_numberInt,  result.length());  [CE]  int  cannot  be  dereferenced  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberInt,  result.length());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(_numberInt,  result.length());	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
45	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberLong.length());  [CE]  long  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  _numberLong.length());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberLong.length());	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  long  cannot  be  dereferenced	9	None	replace
46	[BUG]  [BUGGY]  result  =  Math.min(_numberLong,  _numberInt.length());  [CE]  int  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberLong,  _numberInt.length());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(_numberLong,  _numberInt.length());	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
47	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result!=  0)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result!=  0)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result!=  0)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
48	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  1)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  1)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  1)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
49	[BUG]  [BUGGY]  result  =  Long.parseLong(_numberInt,  result);  [CE]  no  suitable  method  found  for  parseLong(int,int)  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_numberInt,  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_numberInt,  result);	  result    =    Long.parseLong(_numberInt);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int,int)	8	None	replace
50	[BUG]  [BUGGY]  result  =  Long.parseLong(result);  [CE]  no  suitable  method  found  for  parseLong(int)  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(result);	  result    =    Long.parseLong(_numberInt);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int)	8	None	replace
51	[BUG]  [BUGGY]  result  =  Long.parseLong(_numberInt  +  1);  [CE]  no  suitable  method  found  for  parseLong(int)  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_numberInt  +  1);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_numberInt  +  1);	  result    =    Long.parseLong(_numberInt);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int)	8	None	replace
52	[BUG]  [BUGGY]  result  =  Long.parseLong(result,  _numberInt);  [CE]  no  suitable  method  found  for  parseLong(int,int)  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(result,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(result,  _numberInt);	  result    =    Long.parseLong(_numberInt);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int,int)	8	None	replace
53	[BUG]  [BUGGY]  result  =  Long.parseLong(_numberInputRow,  result);  [CE]  cannot  find  symbol  _numberInputRow  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_numberInputRow,  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_numberInputRow,  result);	  result    =    Long.parseLong(_tokenInputRow);    	non-compiled	[CE]  cannot  find  symbol  _numberInputRow	22	None	replace
54	[BUG]  [BUGGY]  result  =  Long.parseLong(_tokenInputRow,  result);  [CE]  no  suitable  method  found  for  parseLong(int,int)  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_tokenInputRow,  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_tokenInputRow,  result);	  result    =    Long.parseLong(_tokenInputRow);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int,int)	22	None	replace
55	[BUG]  [BUGGY]  result  =  Long.parseLong(_numberInputRow,  _currInputPtr);  [CE]  cannot  find  symbol  _numberInputRow  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_numberInputRow,  _currInputPtr);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_numberInputRow,  _currInputPtr);	  result    =    Long.parseLong(_tokenInputRow);    	non-compiled	[CE]  cannot  find  symbol  _numberInputRow	22	None	replace
56	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(     "Numeric    value(     "+getText()    +     ")in    of    range    of    int     ");    _reportError(   "Numeric  value(     "+getText()  +     ")in  of  range  of  int     ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError(       "Numeric        value(       "+getText()        +       ")in        of        range        of        int       ");        _reportError(   "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	12	9	add
57	[BUG]  [BUGGY]  _reportError(     "Numeric    value(     "+getText()    +     ")in    of    range    of    int     ");    _reportError(   "Numeric  value(     "+getText()  +     ")in  of  range  of  int     ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(     "Numeric    value(     "+getText()    +     ")in    of    range    of    int     ");    _reportError(   "Numeric  value(     "+getText()  +     ")in  of  range  of  int     ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(       "Numeric        value(       "+getText()        +       ")in        of        range        of        int       ");        _reportError(   "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	12	9	add
58	[BUG]  [BUGGY]  reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ");	  _reportError(       "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    reportError(   "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
59	[BUG]  [BUGGY]  ReportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  ReportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	ReportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ");	  _reportError(       "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    reportError(   "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
60	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  result  =  Math.min(result,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	                result    =    Math.min(result,    _numberInt);    result  =  Math.min(result,  _numberInt);	  	compilable	  [FE]  JsonParseException  	25	8	add
61	[BUG]  [BUGGY]          result  =  Math.min(result,  _numberInt);  result  =  Math.min(result,  _numberInt);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  result  =  Math.min(result,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	                result    =    Math.min(result,    _numberInt);    result  =  Math.min(result,  _numberInt);	  	compilable	  [FE]  JsonParseException  	25	8	add
62	[BUG]  [BUGGY]          result  =  Math.min(result,  _numberInt);  Result  =  Math.min(result,  _numberInt);  [CE]  cannot  find  symbol  Result  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  Result  =  Math.min(result,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	                result    =    Math.min(result,    _numberInt);    Result  =  Math.min(result,  _numberInt);	  	non-compiled	[CE]  cannot  find  symbol  Result	25	None	add
63	[BUG]  [BUGGY]          result  =  Math.min(result,  _numberInt);  =  Math.min(result,  _numberInt);  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  =  Math.min(result,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	                result    =    Math.min(result,    _numberInt);    =  Math.min(result,  _numberInt);	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
64	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  result  =  Math.max(result,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	                result    =    Math.min(result,    _numberInt);    result  =  Math.max(result,  _numberInt);	  	compilable	  [FE]  JsonParseException  	25	8	add
65	[BUG]  [BUGGY]          result  =  Math.min(result,  _numberInt);  result  =  Math.max(result,  _numberInt);  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  result  =  Math.max(result,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	                result    =    Math.min(result,    _numberInt);    result  =  Math.max(result,  _numberInt);	  	compilable	  [FE]  JsonParseException  	25	8	add
66	[BUG]  [BUGGY]          result  =  Math.min(result,  _numberInt);  ((  long)result)!=  _numberInt);  [CE]  not  a  statement  [FE]            JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  ((  long)result)!=  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	                result    =    Math.min(result,    _numberInt);    ((  long)result)!=  _numberInt);	  	non-compiled	[CE]  not  a  statement	25	None	add
67	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");	  	compilable	  [FE]  JsonParseException  	5	9	add
68	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");	  	compilable	  [FE]  JsonParseException  	5	9	add
69	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	23	9	add
70	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	23	9	add
71	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   ",Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF(   ",Numeric  value(   "+getText()  +   ")out  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(       "Numeric        value(       "+getText()        +       ")out        of        range        of        int       ");        _reportInvalidEOF(   ",Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF(   ",Numeric  value(   "+getText()  +   ")out  of  range  of  int ");	  	compilable	  [FE]  JsonParseException  	32	9	add
72	[BUG]  [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   ",Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF(   ",Numeric  value(   "+getText()  +   ")out  of  range  of  int ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   ",Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF(   ",Numeric  value(   "+getText()  +   ")out  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(       "Numeric        value(       "+getText()        +       ")out        of        range        of        int       ");        _reportInvalidEOF(   ",Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF(   ",Numeric  value(   "+getText()  +   ")out  of  range  of  int ");	  	compilable	  [FE]  JsonParseException  	32	9	add
73	[BUG]  [BUGGY]  result  =  Math.min(_numberInt,  result.longValue());  [CE]  int  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(_numberInt,  result.longValue());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(_numberInt,  result.longValue());	          result    =    Math.min(result,    _numberInt.longValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
74	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int.     ");    _reportError(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int.     ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError(       "Numeric        value(       "+getText()        +       ")out        of        range        of        int.       ");        _reportError(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");	  	compilable	  [FE]  JsonParseException  	16	9	add
75	[BUG]  [BUGGY]  _reportError(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int.     ");    _reportError(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int.     ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int.     ");    _reportError(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int.     ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(       "Numeric        value(       "+getText()        +       ")out        of        range        of        int.       ");        _reportError(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int.       ");    _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");	  	compilable	  [FE]  JsonParseException  	16	9	add
76	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);	  	compilable	  [FE]  JsonParseException  	3	9	add
77	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);	  	compilable	  [FE]  JsonParseException  	3	9	add
78	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.next ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.next ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
79	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.next ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.next ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.next ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
80	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.native ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.native ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
81	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.native ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.native ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.native ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
82	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.node ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.node ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
83	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.node ");  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.node ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.node ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
84	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(       "Numeric        value(       "+getText()        +       ")out        of        range        of        int       ");        _reportInvalidEOF(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	19	9	add
85	[BUG]  [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(       "Numeric        value(       "+getText()        +       ")out        of        range        of        int       ");        _reportInvalidEOF(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	19	9	add
86	[BUG]  [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int  [CE]  unclosed  string  literal  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(     "Numeric    value(     "+getText()    +     ")out    of    range    of    int     ");    _reportInvalidEOF(   "Numeric  value(     "+getText()  +     ")out  of  range  of  int     ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(       "Numeric        value(       "+getText()        +       ")out        of        range        of        int       ");        _reportInvalidEOF(   "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int	  	non-compiled	[CE]  unclosed  string  literal	19	None	add
87	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( ",Numeric  value( "+getText()  + ")out  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( ",Numeric  value( "+getText()  + ")out  of  range  of  int ");	  _reportInvalidEOF(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF(   ",Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    	compilable	  [FE]  JsonParseException  	33	8	replace
88	[BUG]  [BUGGY]  _reportInvalidEOF( ",Numeric  value( "+getText()  + ")out  of  range  of  int ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( ",Numeric  value( "+getText()  + ")out  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( ",Numeric  value( "+getText()  + ")out  of  range  of  int ");	  _reportInvalidEOF(       "Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    _reportInvalidEOF(   ",Numeric    value(       "+getText()    +       ")out    of    range    of    int       ");    	compilable	  [FE]  JsonParseException  	33	8	replace
89	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")overflow  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")overflow  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")overflow  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    Long.MIN_VALUE)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
90	[BUG]  [BUGGY]  result  =(long)_numberBigInt.longValue();  [CE]  possible  loss  of  precision  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =(long)_numberBigInt.longValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =(long)_numberBigInt.longValue();	  result    =(long)_numberLong.longValue();    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
91	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberLong.intValue());  [CE]  long  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  _numberLong.intValue());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberLong.intValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	37	None	replace
92	[BUG]  [BUGGY]          result  =  Math.min(result,  _numberInt);  _parsingContext  =  JsonReadContext.createRootContext();  [CE]  no  suitable  method  found  for  createRootContext()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]          result  =  Math.min(result,  _numberInt);  _parsingContext  =  JsonReadContext.createRootContext();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	                result    =    Math.min(result,    _numberInt);    _parsingContext  =  JsonReadContext.createRootContext();	  	non-compiled	[CE]  no  suitable  method  found  for  createRootContext()	25	None	add
93	[BUG]  [BUGGY]  result  =  Long.parseLong(_tokenInputRow,  _numberInt);  [CE]  no  suitable  method  found  for  parseLong(int,int)  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_tokenInputRow,  _numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_tokenInputRow,  _numberInt);	  result    =    Long.parseLong(_numberInt);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int,int)	8	None	replace
94	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n ",);  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n ",);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.n ",);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
95	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberLong.longValue());  [CE]  long  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  _numberLong.longValue());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberLong.longValue());	          result    =    Math.min(result,    _numberInt.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	38	None	replace
96	[BUG]  [BUGGY]  result  =  Math.min(result,  long);  [CE]  '.class'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  long);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  long);	          result    =    Math.min(result,    _numberInt);    	non-compiled	[CE]  '.class'  expected	26	None	replace
97	[BUG]  [BUGGY]  result  =  Long.parseLong(_currInputRow,  result);  [CE]  no  suitable  method  found  for  parseLong(int,int)  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_currInputRow,  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_currInputRow,  result);	  result    =    Long.parseLong(_tokenInputRow);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int,int)	22	None	replace
98	[BUG]  [BUGGY]  result  =((  long)result).doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =((  long)result).doubleValue();  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =((  long)result).doubleValue();	  result    =((    long)result).longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	replace
99	[BUG]  [BUGGY]  ((  long)result)!=  0;  [CE]  not  a  statement  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  ((  long)result)!=  0;  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	((  long)result)!=  0;	  ((    long)result)    ==    _numberLong;    	non-compiled	[CE]  not  a  statement	11	None	replace
100	[BUG]  [BUGGY]  ((  long)result)  ==  0L;  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  ((  long)result)  ==  0L;  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	((  long)result)  ==  0L;	  ((    long)result)    ==    _numberLong;    	non-compiled	[CE]  not  a  statement	11	None	replace
101	[BUG]  [BUGGY]  Result  =  Math.min(result,  _numberInt.length());  [CE]  cannot  find  symbol  Result  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  Result  =  Math.min(result,  _numberInt.length());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	Result  =  Math.min(result,  _numberInt.length());	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  cannot  find  symbol  Result	9	None	replace
102	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [CE]  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	non-compiled	[CE]  	14	None	add
103	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.length ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.length ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
104	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.length ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.length ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.length ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
105	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.no-string ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.no-string ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
106	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.no-string ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.no-string ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.no-string ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.n   ");    	compilable	  [FE]  JsonParseException  	6	8	replace
107	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberInt);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    	compilable	  [FE]  JsonParseException  	4	9	replace
108	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberInt);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberInt);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberInt);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    	compilable	  [FE]  JsonParseException  	4	9	replace
109	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberLong);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberLong);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    	compilable	  [FE]  JsonParseException  	4	9	replace
110	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberLong);  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberLong);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int "+_numberLong);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    	compilable	  [FE]  JsonParseException  	4	9	replace
111	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [CE]  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");	  	non-compiled	[CE]  	23	None	add
112	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")overflow  of  int.  If(result  ==  0)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")overflow  of  int.  If(result  ==  0)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")overflow  of  int.  If(result  ==  0)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
113	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")over  of  range  of  int.  If(result  ==  0)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")over  of  range  of  int.  If(result  ==  0)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")over  of  range  of  int.  If(result  ==  0)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
114	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  Long ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  Long ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    	compilable	  [FE]  JsonParseException  	31	9	replace
115	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  Long ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  Long ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  Long ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    	compilable	  [FE]  JsonParseException  	31	9	replace
116	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberLong  +  1);  [CE]  possible  loss  of  precision  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  _numberLong  +  1);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberLong  +  1);	          result    =    Math.min(result,    _numberLong);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
117	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long) ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long) ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
118	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long) ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long) ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long) ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
119	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberLong  -  1);  [CE]  possible  loss  of  precision  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  _numberLong  -  1);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberLong  -  1);	          result    =    Math.min(result,    _numberLong);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
120	[BUG]  [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int. ");	  reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
121	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.doubleValue());  [CE]  int  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Math.min(result,  _numberInt.doubleValue());  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberInt.doubleValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	37	None	replace
122	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	23	9	add
123	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")over  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	23	9	add
124	[BUG]  [BUGGY]  result  =  Long.parseLong(_currInputProcessed);  [CE]  no  suitable  method  found  for  parseLong(long)  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_currInputProcessed);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_currInputProcessed);	  result    =    Long.parseLong(_tokenInputRow);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(long)	22	None	replace
125	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ",  result);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
126	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	14	9	add
127	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	14	9	add
128	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  long);  [CE]  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  long);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  long);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ",    result);    	non-compiled	[CE]  	4	None	replace
129	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")overflow  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")overflow  of  int   ");	  	compilable	  [FE]  JsonParseException  	30	9	add
130	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")overflow  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")overflow  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")overflow  of  int   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")overflow    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")overflow  of  int   ");	  	compilable	  [FE]  JsonParseException  	30	9	add
131	[BUG]  [BUGGY]  result  =  Long.parseLong(_tokenInputTotal);  [CE]  no  suitable  method  found  for  parseLong(long)  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  result  =  Long.parseLong(_tokenInputTotal);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_tokenInputTotal);	  result    =    Long.parseLong(_numberInt);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(long)	8	None	replace
132	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  0)  {  reportOverflowLong();  }  [CE]  unclosed  string  literal  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  0)  {  reportOverflowLong();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  0)  {  reportOverflowLong();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
133	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  JsonReadContext  ctxt  =  getCurrentContext();  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  JsonReadContext  ctxt  =  getCurrentContext();  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    JsonReadContext  ctxt  =  getCurrentContext();  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
134	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int.   ");	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
135	[BUG]  [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")over    of    range    of    int   ");    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
136	[BUG]  [BUGGY]  Reporter.error( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [CE]  cannot  find  symbol  Reporter  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  Reporter.error( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	Reporter.error( "Numeric  value( "+getText()  + ")in  of  range  of  int ");	  _reportError(       "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    reportError(   "Numeric    value(       "+getText()    +       ")in    of    range    of    int       ");    	non-compiled	[CE]  cannot  find  symbol  Reporter	34	None	replace
137	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.. ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
138	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.. ");  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.. ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
139	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long.MAX_VALUE);  [CE]  unclosed  string  literal  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long.MAX_VALUE);  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int.  Integer,  Long.MAX_VALUE);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int.   ");    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
140	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MAX_VALUE)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MAX_VALUE)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MAX_VALUE)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    Long.MIN_VALUE)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
141	[BUG]  [BUGGY]  Reporter.error( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {      [BUGGY]  Reporter.error( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [BUGGY]      }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	Reporter.error( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.    If(result    ==    Long.MIN_VALUE)    {    reportOverflowInt();    }    	non-compiled	[CE]  unclosed  string  literal	35	None	replace
