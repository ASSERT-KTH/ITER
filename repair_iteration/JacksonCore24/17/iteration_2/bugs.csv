bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
2	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int. ");	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
3	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
4	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")in  of  range  of  int ",  result);	  _reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	2	9	replace
5	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.n ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.n ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	8	8	replace
6	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.n ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.n ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.n ");	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    	compilable	  [FE]  JsonParseException  	8	8	replace
7	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  0)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  0)  {  reportOverflowInt();  }  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  0)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
8	[BUG]  [BUGGY]  result  =  Long.parseLong(_numberInt);  [CE]  no  suitable  method  found  for  parseLong(int)  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  result  =  Long.parseLong(_numberInt);  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_numberInt);	      	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int)	4	None	replace
9	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.length());  [CE]  int  cannot  be  dereferenced  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  result  =  Math.min(result,  _numberInt.length());  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberInt.length());	      	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
10	[BUG]  [BUGGY]  result  =(long)_numberLong.longValue();  [CE]  long  cannot  be  dereferenced  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  result  =(long)_numberLong.longValue();  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =(long)_numberLong.longValue();	      	non-compiled	[CE]  long  cannot  be  dereferenced	4	None	replace
11	[BUG]  [BUGGY]  ((  long)result)  ==  _numberLong;  [CE]  not  a  statement  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  ((  long)result)  ==  _numberLong;  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	((  long)result)  ==  _numberLong;	      	non-compiled	[CE]  not  a  statement	4	None	replace
12	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	1	9	add
13	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    _reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	1	9	add
14	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	6	9	replace
15	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")in  of  range  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	6	9	replace
16	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");	  	compilable	  [FE]  JsonParseException  	7	9	add
17	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");	  	compilable	  [FE]  JsonParseException  	7	9	add
18	[BUG]  [BUGGY]      result  =  Math.min(result,  _numberLong);  [CE]  possible  loss  of  precision  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]      result  =  Math.min(result,  _numberLong);  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	        result  =  Math.min(result,  _numberLong);	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
19	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	5	9	add
20	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	5	9	add
21	[BUG]  [BUGGY]  result  =((  long)result).longValue();  [CE]  long  cannot  be  dereferenced  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  result  =((  long)result).longValue();  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =((  long)result).longValue();	      	non-compiled	[CE]  long  cannot  be  dereferenced	4	None	replace
22	[BUG]  [BUGGY]  result  =  Long.parseLong(_tokenInputRow);  [CE]  no  suitable  method  found  for  parseLong(int)  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  result  =  Long.parseLong(_tokenInputRow);  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Long.parseLong(_tokenInputRow);	      	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int)	4	None	replace
23	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	6	9	replace
24	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")over  of  range  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	6	9	replace
25	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]      result  =  Math.min(result,  _numberInt);  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	        result  =  Math.min(result,  _numberInt);	  	compilable	  [FE]  JsonParseException  	3	8	add
26	[BUG]  [BUGGY]      result  =  Math.min(result,  _numberInt);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]      result  =  Math.min(result,  _numberInt);  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	        result  =  Math.min(result,  _numberInt);	  	compilable	  [FE]  JsonParseException  	3	8	add
27	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [CE]  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    JsonParseException  _reportInvalidEOF( "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");	  	non-compiled	[CE]  	5	None	add
28	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  JsonParseException  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [CE]  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  JsonParseException  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    JsonParseException  _reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");	  	non-compiled	[CE]  	7	None	add
29	[BUG]  [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	reportInvalidEOF( "Numeric  value( "+getText()  + ")out  of  range  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
30	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  int ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	6	9	replace
31	[BUG]  [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  int ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  int ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF( "Numeric  value( "+getText()  + ")overflow  of  int ");	  _reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    	compilable	  [FE]  JsonParseException  	6	9	replace
32	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	5	9	add
33	[BUG]  [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportInvalidEOF(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportInvalidEOF(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int   ");    _reportInvalidEOF( ",Numeric  value(   "+getText()  +   ")out  of  range  of  int   ");	  	compilable	  [FE]  JsonParseException  	5	9	add
34	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")in    of    range    of    int   ");    reportError( "Numeric  value(   "+getText()  +   ")in  of  range  of  int   ");	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
35	[BUG]  [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [CE]  unclosed  string  literal  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError( "Numeric  value( "+getText()  + ")out  of  range  of  int.  If(result  ==  Long.MIN_VALUE)  {  reportOverflowInt();  }	  _reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
36	[BUG]  [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  _reportError(   "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	_reportError(   "Numeric    value(   "+getText()    +   ")out    of    range    of    int.   ");    reportError( "Numeric  value(   "+getText()  +   ")out  of  range  of  int.   ");	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
37	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.intValue());  [CE]  int  cannot  be  dereferenced  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]  result  =  Math.min(result,  _numberInt.intValue());  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	result  =  Math.min(result,  _numberInt.intValue());	      	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
38	[BUG]  [BUGGY]      result  =  Math.min(result,  _numberInt.longValue());  [CE]  int  cannot  be  dereferenced  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {    [BUGGY]      result  =  Math.min(result,  _numberInt.longValue());  [BUGGY]    }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	        result  =  Math.min(result,  _numberInt.longValue());	  	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	add
