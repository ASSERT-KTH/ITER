bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsLong(_numberInt);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  l  =  _textBuffer.contentsAsLong(_numberInt);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsLong(_numberInt);	  long    l    =    _textBuffer.contentsAsLong(_numberInt);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
2	[BUG]  [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  cannot  find  symbol  l  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	5	None	replace
3	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls;  }  [CE]  cannot  find  symbol  l  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls;  }	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	5	None	replace
5	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  if(i  ==  0)  {  [CE]  cannot  find  symbol  i  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  0)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  0)  {	  if(len    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  i	37	None	replace
7	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
8	[BUG]  [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
9	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
10	[BUG]  [BUGGY]  long  l  =  _textBuffer.contentsAsLong(i  +  1);  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  long  l  =  _textBuffer.contentsAsLong(i  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	long  l  =  _textBuffer.contentsAsLong(i  +  1);	  long    l    =    _textBuffer.contentsAsLong(_numberNegative    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext();	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  ctxt.createChildObjectContext();	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsLong(i);  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  l  =  _textBuffer.contentsAsLong(i);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsLong(i);	  long    l    =    _textBuffer.contentsAsLong(i);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
15	[BUG]  [BUGGY]  if(len  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    17)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	31	None	replace
16	[BUG]  [BUGGY]  null  l  =  _textBuffer.contentsAsLong(i);  [CE]  not  a  statement  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  null  l  =  _textBuffer.contentsAsLong(i);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	null  l  =  _textBuffer.contentsAsLong(i);	  null    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  not  a  statement	23	None	replace
17	[BUG]  [BUGGY]  null  l  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  null  l  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	null  l  =  _textBuffer.contentsAsInt(_numberNegative);	  null    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  not  a  statement	23	None	replace
18	[BUG]  [BUGGY]  if(i  ==  10)  {  [CE]  cannot  find  symbol  i  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  10)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  10)  {	  if(len    ==    10)    {    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
19	[BUG]  [BUGGY]  _parsingContext  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  parent.getParent();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  parent.getParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createParent();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  ctxt.createParent();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  ctxt.createParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
22	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
23	[BUG]  [BUGGY]  if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  cannot  find  symbol  l  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	26	None	replace
24	[BUG]  [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  bytes;  }  [CE]  cannot  find  symbol  l  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  bytes;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  bytes;  }	  if(len    ==    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	27	None	replace
25	[BUG]  [BUGGY]  Integer  l  =  _parsingContext.getCurrentName();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Integer  l  =  _parsingContext.getCurrentName();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Integer  l  =  _parsingContext.getCurrentName();	  Integer    l    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
26	[BUG]  [BUGGY]  Integer  l  =  _parsingContext.getNumericValue();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Integer  l  =  _parsingContext.getNumericValue();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Integer  l  =  _parsingContext.getNumericValue();	  Integer    l    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
27	[BUG]  [BUGGY]  _parsingContext.setCurrentLength(i  +  1);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext.setCurrentLength(i  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentLength(i  +  1);	  _parsingContext.setCurrentLength(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  _parsingContext.setCurrentLength(len);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext.setCurrentLength(len);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentLength(len);	  _parsingContext.setCurrentLength(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	9	None	replace
30	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [CE]  cannot  find  symbol  l  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	8	None	replace
33	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls;  }	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
34	[BUG]  [BUGGY]  if(len  ==  12)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  12)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  12)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(len    ==    12)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	14	None	replace
35	[BUG]  [BUGGY]  if(i  ==  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  i  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    12)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
36	[BUG]  [BUGGY]  _parsingContext.setCurrentName(i);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext.setCurrentName(i);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentName(i);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  if(i  >=  9)  {  [CE]  cannot  find  symbol  i  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  >=  9)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  >=  9)  {	  if(len    >=    9)    {    	non-compiled	[CE]  cannot  find  symbol  i	45	None	replace
38	[BUG]  [BUGGY]  if(len  >  9)  {  [CE]  cannot  find  symbol  l  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  >  9)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  >  9)  {	  if(len    >=    9)    {    	non-compiled	[CE]  cannot  find  symbol  l	45	None	replace
39	[BUG]  [BUGGY]  long  l  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  long  l  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	long  l  =  _textBuffer.contentsAsInt(_numberNegative);	  int    l    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
40	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsInt(i);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  l  =  _textBuffer.contentsAsInt(i);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsInt(i);	  int    l    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  char  l  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  char  l  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	char  l  =  _textBuffer.contentsAsInt(_numberNegative);	  int    l    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
42	[BUG]  [BUGGY]  float  l  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  float  l  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	float  l  =  _textBuffer.contentsAsInt(_numberNegative);	  int    l    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
43	[BUG]  [BUGGY]  if(len  <  =  0  ||  expType  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0  ||  expType  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0  ||  expType  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(len    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  if(len  <  =  0  ||  expType!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0  ||  expType!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0  ||  expType!=  JsonToken.VALUE_NUMBER_INT)  {	  if(len    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    18)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
46	[BUG]  [BUGGY]  if(len  <  =  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    18)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
47	[BUG]  [BUGGY]  if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls;  }  [CE]  cannot  find  symbol  l  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
48	[BUG]  [BUGGY]  int  len  =  _numberNegative.length()  +  1;  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  len  =  _numberNegative.length()  +  1;  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _numberNegative.length()  +  1;	  int    len    =    _numberNegative.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  int  len  =  _numberNegative.length()  -  1;  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  len  =  _numberNegative.length()  -  1;  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _numberNegative.length()  -  1;	  int    len    =    _numberNegative.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(len  ==  16)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  16)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  16)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(len    ==    16)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	13	None	replace
51	[BUG]  [BUGGY]  if(len  ==  16)  {  [CE]  cannot  find  symbol  l  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  16)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  16)  {	  if(len    ==    16)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	13	None	replace
52	[BUG]  [BUGGY]  if(len  ==  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	25	None	replace
53	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
54	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls	  if(len    <    =    0)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
55	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  calls	  if(len    <    =    0)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
56	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  l  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsInt(_numberNegative  +  1);	  int    l    =    _textBuffer.contentsAsLong(_numberNegative    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
57	[BUG]  [BUGGY]  if(len  ==  18)  {  [CE]  cannot  find  symbol  l  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  18)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  18)  {	  if(i    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	30	None	replace
58	[BUG]  [BUGGY]  if(len  ==  18)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  18)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  18)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(i    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	30	None	replace
59	[BUG]  [BUGGY]  Long  l  =  _textBuffer.contentsAsLong(i);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Long  l  =  _textBuffer.contentsAsLong(i);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Long  l  =  _textBuffer.contentsAsLong(i);	  Long    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  Integer  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Integer  l  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Integer  l  =  _textBuffer.contentsAsLong(_numberNegative);	  Long    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  int  len  =  _numberNegative;  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  len  =  _numberNegative;  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _numberNegative;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
62	[BUG]  [BUGGY]  int  len  =  _numberNegative.length;  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  len  =  _numberNegative.length;  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _numberNegative.length;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
63	[BUG]  [BUGGY]  long  len  =  _intLength;  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  long  len  =  _intLength;  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	long  len  =  _intLength;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
64	[BUG]  [BUGGY]  long  l  =  _textBuffer.contentsAsDouble(_numberNegative);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  long  l  =  _textBuffer.contentsAsDouble(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	long  l  =  _textBuffer.contentsAsDouble(_numberNegative);	  int    l    =    _textBuffer.contentsAsDouble(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
65	[BUG]  [BUGGY]  if(i  ==  9)  {  [CE]  cannot  find  symbol  i  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  9)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  9)  {	  if(len    ==    9)    {    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
66	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    calls    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    calls    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
68	[BUG]  [BUGGY]  double  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  double  l  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	double  l  =  _textBuffer.contentsAsLong(_numberNegative);	  float    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
69	[BUG]  [BUGGY]  Long  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Long  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Long  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);	  Long    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  if(i  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  i  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    ==    16)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
71	[BUG]  [BUGGY]  if(len  ==  18)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  18)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  18)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls	  if(i    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	30	None	replace
72	[BUG]  [BUGGY]  int  len  =  _expLength;  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  len  =  _expLength;  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _expLength;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
73	[BUG]  [BUGGY]  int  len  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  len  =  _inputEnd;  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _inputEnd;	  int    len    =    _intLength;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
74	[BUG]  [BUGGY]  _parsingContext.setCurrentLength(i  +  len);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext.setCurrentLength(i  +  len);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentLength(i  +  len);	  _parsingContext.setCurrentLength(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    12)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	14	None	replace
76	[BUG]  [BUGGY]  if(i  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  cannot  find  symbol  i  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    ==    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  i	27	None	replace
77	[BUG]  [BUGGY]  if(len  >=  0)  {  [CE]  cannot  find  symbol  l  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  >=  0)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  >=  0)  {	  if(len    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  l	11	None	replace
78	[BUG]  [BUGGY]  if(i  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  i  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  i	12	None	replace
79	[BUG]  [BUGGY]  float  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  float  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	float  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);	  float    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
80	[BUG]  [BUGGY]  if(i  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  i  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    ==    17)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  i	31	None	replace
81	[BUG]  [BUGGY]  if(len  <  =  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    ==    17)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
82	[BUG]  [BUGGY]  if(len  ==  17)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  17)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  17)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls	  if(len    ==    17)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	31	None	replace
83	[BUG]  [BUGGY]  if(len  ==  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  cannot  find  symbol  l  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	44	None	replace
84	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsDouble(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  l  =  _textBuffer.contentsAsDouble(_numberNegative  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsDouble(_numberNegative  +  1);	  int    l    =    _textBuffer.contentsAsDouble(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
85	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsDouble(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  l  =  _textBuffer.contentsAsDouble(_numberNegative,  len);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsDouble(_numberNegative,  len);	  int    l    =    _textBuffer.contentsAsDouble(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
86	[BUG]  [BUGGY]  if(len  ==  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	25	None	replace
87	[BUG]  [BUGGY]  if(len  >=  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  >=  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  >=  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	25	None	replace
88	[BUG]  [BUGGY]  if(i  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  i  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(i  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    16)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
89	[BUG]  [BUGGY]  if(len  >  0)  {  [CE]  cannot  find  symbol  l  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  >  0)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  >  0)  {	  if(len    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  l	37	None	replace
90	[BUG]  [BUGGY]  if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [CE]  cannot  find  symbol  l  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
91	[BUG]  [BUGGY]  Integer  l  =  _parsingContext.getCurrentIndex();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Integer  l  =  _parsingContext.getCurrentIndex();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Integer  l  =  _parsingContext.getCurrentIndex();	  Integer    l    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
92	[BUG]  [BUGGY]  if(len  >=  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  >=  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  >=  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	10	None	replace
93	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
94	[BUG]  [BUGGY]  null  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [CE]  not  a  statement  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  null  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	null  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);	  null    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  not  a  statement	23	None	replace
95	[BUG]  [BUGGY]  if(len  ==  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  cannot  find  symbol  l  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    9)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	28	None	replace
96	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext.setCurrentName(_numberNegative  +  1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentName(_numberNegative  +  1);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
97	[BUG]  [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                  JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	9	None	replace
98	[BUG]  [BUGGY]  if(len  >=  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  >=  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  >=  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    <    =    0)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	9	None	replace
99	[BUG]  [BUGGY]  float  l  =  _textBuffer.contentsAsFloat(_numberNegative);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  float  l  =  _textBuffer.contentsAsFloat(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	float  l  =  _textBuffer.contentsAsFloat(_numberNegative);	  float    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
100	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    calls    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
101	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
102	[BUG]  [BUGGY]  char  l  =  _textBuffer.contentsAsDouble(_numberNegative);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  char  l  =  _textBuffer.contentsAsDouble(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	char  l  =  _textBuffer.contentsAsDouble(_numberNegative);	  int    l    =    _textBuffer.contentsAsDouble(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
103	[BUG]  [BUGGY]  null  l  =  _textBuffer.contentsAsNumber(_numberNegative);  [CE]  not  a  statement  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  null  l  =  _textBuffer.contentsAsNumber(_numberNegative);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	null  l  =  _textBuffer.contentsAsNumber(_numberNegative);	  null    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  not  a  statement	23	None	replace
104	[BUG]  [BUGGY]  if(len  <  =  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    16)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
105	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  0);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  0);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  0);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
106	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createParentContext();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext  =  ctxt.createParentContext();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  ctxt.createParentContext();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
107	[BUG]  [BUGGY]  Integer  l  =  _parsingContext.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Integer  l  =  _parsingContext.createChildObjectContext(-1,  -1);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Integer  l  =  _parsingContext.createChildObjectContext(-1,  -1);	  Integer    l    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
108	[BUG]  [BUGGY]  Integer  l  =  _parsingContext.getCurrentNameNode();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  Integer  l  =  _parsingContext.getCurrentNameNode();  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Integer  l  =  _parsingContext.getCurrentNameNode();	  Integer    l    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
109	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  len);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentName(_numberNegative,  len);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
110	[BUG]  [BUGGY]  if(len  <  =  17)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  17)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  17)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    17)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
111	[BUG]  [BUGGY]  if(len  <  =  0)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }	  if(len    <    =    9)    {    long    l    =    _textBuffer.contentsAsLong(_numberNegative);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
112	[BUG]  [BUGGY]  if(len  ==  9)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  ==  9)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  9)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }	  if(len    <    =    9)    {    long    l    =    _textBuffer.contentsAsLong(_numberNegative);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
113	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsInt(_numberNegative,  len);  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  int  l  =  _textBuffer.contentsAsInt(_numberNegative,  len);  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsInt(_numberNegative,  len);	  int    l    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
114	[BUG]  [BUGGY]  if(len  <  =  0  ||  expType  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  0  ||  expType  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0  ||  expType  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(len    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
115	[BUG]  [BUGGY]  if(len  <  =  12)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  12)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  12)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    18)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
116	[BUG]  [BUGGY]  if(len  <  =  24)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  24)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  24)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    18)    {    //    definitely    fits    AND    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
117	[BUG]  [BUGGY]  if(len  <  =  9)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  9)  {  return;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  return;  }	  if(len    <    =    10)    {    //    definitely    fits    and    is    easy    to    parse    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
118	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls;  }  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }      [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls;  }  [BUGGY]      long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    and    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
