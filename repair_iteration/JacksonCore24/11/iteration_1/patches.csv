bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext();  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  _parsingContext  =  ctxt.getParent();  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  _parsingContext  =  ctxt.getParent();  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  ctxt.getParent();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative);  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  _parsingContext.setCurrentName(_numberNegative);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentName(_numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  _parsingContext.setCurrentLength(i);  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  _parsingContext.setCurrentLength(i);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext.setCurrentLength(i);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  int  len  =  _numberNegative.length();  [CE]  illegal  start  of  type  [FE]              JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  int  len  =  _numberNegative.length();  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _numberNegative.length();	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  if(len  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  0)  {  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  if(len  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]        JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
13	[BUG]  [BUGGY]  if(len  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
14	[BUG]  [BUGGY]  if(len  ==  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]            JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  12)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
15	[BUG]  [BUGGY]  Long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  illegal  start  of  type  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  Long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Long  l  =  _textBuffer.contentsAsLong(_numberNegative);	  if(len    <    =    10)    {    long    l    =    _textBuffer.contentsAsLong(_numberNegative);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  illegal  start  of  type  [FE]        JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  int  l  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsInt(_numberNegative);	  int    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  float  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  illegal  start  of  type  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  float  l  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	float  l  =  _textBuffer.contentsAsLong(_numberNegative);	  int    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  calls	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if(len  ==  9)  {  [CE]  cannot  find  symbol  l  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  9)  {  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  9)  {	  if(len    <    =    9)    {    	non-compiled	[CE]  cannot  find  symbol  l	7	None	replace
20	[BUG]  [BUGGY]  if(len  <  =  10)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  10)  {  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {	  if(len    <    =    9)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  if(len  ==  10)  {  [CE]  cannot  find  symbol  l  [FE]              JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  10)  {  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  10)  {	  if(len    <    =    9)    {    	non-compiled	[CE]  cannot  find  symbol  l	7	None	replace
22	[BUG]  [BUGGY]  long  l  =  _textBuffer.contentsAsLong(i);  [CE]  illegal  start  of  type  [FE]        JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  long  l  =  _textBuffer.contentsAsLong(i);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	long  l  =  _textBuffer.contentsAsLong(i);	  long    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  null  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  not  a  statement  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  null  l  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	null  l  =  _textBuffer.contentsAsLong(_numberNegative);	  long    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  not  a  statement	1	None	replace
24	[BUG]  [BUGGY]  int  len  =  _intLength;  [CE]  illegal  start  of  type  [FE]              JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  int  len  =  _intLength;  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  len  =  _intLength;	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  0)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls	  if(len    <    =    9)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  cannot  find  symbol  l  [FE]            JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  10)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  cannot  find  symbol  l	9	None	replace
28	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]        JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  int  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);	  int    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  if(i  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  i  [FE]        JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(i  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(i  ==  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
31	[BUG]  [BUGGY]  if(len  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  17)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
32	[BUG]  [BUGGY]  if(len  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [CE]  cannot  find  symbol  l  [FE]            JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  16)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
33	[BUG]  [BUGGY]  int  l  =  _textBuffer.contentsAsDouble(_numberNegative);  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  int  l  =  _textBuffer.contentsAsDouble(_numberNegative);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	int  l  =  _textBuffer.contentsAsDouble(_numberNegative);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  long  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]        JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  long  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	long  l  =  _textBuffer.contentsAsLong(_numberNegative  +  1);	  long    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  long  l  =  _textBuffer.contentsAsLong(_numberInt);  [CE]  illegal  start  of  type  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  long  l  =  _textBuffer.contentsAsLong(_numberInt);  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	long  l  =  _textBuffer.contentsAsLong(_numberInt);	  long    l    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  if(len  ==  0)  {  [CE]  cannot  find  symbol  l  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  0)  {  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  0)  {	  if(len    <    =    9)    {    	non-compiled	[CE]  cannot  find  symbol  l	7	None	replace
38	[BUG]  [BUGGY]  if(len  ==  10)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [CE]  illegal  start  of  type  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  ==  10)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  ==  10)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }	  if(len    <    =    10)    {    long    l    =    _textBuffer.contentsAsLong(_numberNegative);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  2  int  parse  calls	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
42	[BUG]  [BUGGY]  Integer  l  =  _parsingContext.getCurrentToken();  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  Integer  l  =  _parsingContext.getCurrentToken();  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	Integer  l  =  _parsingContext.getCurrentToken();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  if(len  <  =  9)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  9)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  9)  {  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  }	  if(len    <    =    10)    {    long    l    =    _textBuffer.contentsAsLong(_numberNegative);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  10)  {  //  definitely  fits  and  is  easy  to  parse  using  2  int  parse  calls;  }	  if(len    <    =    10)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  if(len  >=  9)  {  [CE]  cannot  find  symbol  l  [FE]          JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  >=  9)  {  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  >=  9)  {	  if(len    <    =    9)    {    	non-compiled	[CE]  cannot  find  symbol  l	7	None	replace
46	[BUG]  [BUGGY]  if(len  <  =  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }    [BUGGY]  if(len  <  =  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls  [BUGGY]    long  l  =  _textBuffer.contentsAsLong(_numberNegative);  if  (len  ==  10)  {  if  (_numberNegative)  {  if  (l  >=  MIN_INT_L)  {  _numberInt  =  (int)  l;  _numTypesValid  =  NR_INT;  return;  }  }  else  {  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	if(len  <  =  18)  {  //  definitely  fits  AND  is  easy  to  parse  2  int  parse  calls	  if(len    ==    18)    {    //    definitely    fits    AND    is    easy    to    parse    using    2    int    parse    calls    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
