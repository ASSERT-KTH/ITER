bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  >=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	9	replace
2	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  >=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	9	replace
3	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	9	replace
4	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	9	replace
5	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  0)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	9	replace
6	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  0)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	9	replace
7	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	8	replace
8	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	8	replace
9	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
10	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((  _numTypesValid  &  NR_LONG)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
12	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
13	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
14	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]            JsonParseException    [CONTEXT]    {      [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();	      	non-compiled	[CE]  not  a  statement	5	None	replace
15	[BUG]  [BUGGY]  _parsingContext  =  ctxt.getParent();  [CE]  illegal  start  of  type  [FE]              JsonParseException    [CONTEXT]    {      [BUGGY]  _parsingContext  =  ctxt.getParent();  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  ctxt.getParent();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  _parsingContext.setCurrentName(getText());  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    {      [BUGGY]  _parsingContext.setCurrentName(getText());  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext.setCurrentName(getText());	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0);  [CE]  not  a  statement  [FE]                  JsonParseException    [CONTEXT]    {      [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0);  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)!=  0);	      	non-compiled	[CE]  not  a  statement	5	None	replace
18	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
19	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
20	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
21	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
22	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid!=  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid!=  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid!=  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
23	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
24	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
25	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
26	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if((  _numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
27	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_SEMICOLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
28	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
29	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_BIGINT)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
30	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  int  _numTypesValid  =  NR_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  int  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    int  _numTypesValid  =  NR_UNKNOWN;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
31	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
32	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
33	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]            JsonParseException    [CONTEXT]    {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  -1);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]              JsonParseException    [CONTEXT]    {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext();  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.getParent();  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    {      [BUGGY]  _parsingContext  =  _parsingContext.getParent();  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.getParent();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_BIGINT)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
37	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LBIGINT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  ==  NR_LBIGINT)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid  ==  NR_LBIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
38	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  int  _numTypesValid  =  NR_LONG;  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  int  _numTypesValid  =  NR_LONG;  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    int  _numTypesValid  =  NR_LONG;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
39	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid!=  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	7	9	replace
40	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	7	9	replace
41	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid!=  NR_LONG)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	7	9	replace
42	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=  NR_LONG)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	7	9	replace
43	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  >=  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG)  {  if(_numTypesValid  >=  NR_LONG)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid  >=  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
44	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	8	replace
45	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	8	replace
46	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	9	replace
47	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {	  if(_numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	4	9	replace
48	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid!=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
49	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0;  [CE]  not  a  statement  [FE]            JsonParseException    [CONTEXT]    {      [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0;  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)!=  0;	      	non-compiled	[CE]  not  a  statement	5	None	replace
50	[BUG]  [BUGGY]  ((  long)_numTypesValid).compareTo(_numberBigDecimal);  [CE]  illegal  start  of  type  [FE]              JsonParseException    [CONTEXT]    {      [BUGGY]  ((  long)_numTypesValid).compareTo(_numberBigDecimal);  [BUGGY]      int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid).compareTo(_numberBigDecimal);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
