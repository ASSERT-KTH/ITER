bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
2	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
3	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
4	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
5	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
6	[BUG]  [BUGGY]  if(_numTypesValid  <  =  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  <  =  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  <  =  NR_LONG)  {	  if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid    ==    NR_LBIGINT)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
7	[BUG]  [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0);  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  int)_numTypesValid  &  NR_DOUBLE)!=  0);	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0);    	non-compiled	[CE]  not  a  statement	17	None	replace
8	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  ==  0);  [CE]  not  a  statement  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  ==  0);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)  ==  0);	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0);    	non-compiled	[CE]  not  a  statement	17	None	replace
9	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  >=  0);  [CE]  not  a  statement  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  >=  0);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)  >=  0);	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0);    	non-compiled	[CE]  not  a  statement	17	None	replace
10	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    	compilable	  [FE]  JsonParseException  	47	9	replace
11	[BUG]  [BUGGY]  if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    	compilable	  [FE]  JsonParseException  	47	9	replace
12	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_DOUBLE)  {  [CE]  cannot  find  symbol  NR_MIN_INT  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_DOUBLE)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_INT	47	None	replace
13	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    	compilable	  [FE]  JsonParseException  	47	9	replace
14	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    	compilable	  [FE]  JsonParseException  	47	9	replace
15	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >>  0)  {  [CE]  incompatible  types  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >>  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  >>  0)  {	  if((    _numTypesValid    &    NR_LONG)    >=    0)    {    	non-compiled	[CE]  incompatible  types	2	None	replace
16	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=  NR_UNKNOWN)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if((    _numTypesValid    &    NR_LONG)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
17	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid!=  0)  {	  if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid    ==    NR_BIGINT)    {    	compilable	  [FE]  JsonParseException  	36	9	replace
18	[BUG]  [BUGGY]  if(_numTypesValid!=  0)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=  0)  {	  if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid    ==    NR_BIGINT)    {    	compilable	  [FE]  JsonParseException  	36	9	replace
19	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
20	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid!=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
21	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid  >=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
22	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
23	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
24	[BUG]  [BUGGY]  ((  int)_numTypesValid).compareTo(_numberBigDecimal);  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  ((  int)_numTypesValid).compareTo(_numberBigDecimal);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  int)_numTypesValid).compareTo(_numberBigDecimal);	  ((    long)_numTypesValid).compareTo(_numberBigDecimal);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
25	[BUG]  [BUGGY]  ((  long)_numTypesValid).compareTo(_numberBigDecimal  +  1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid).compareTo(_numberBigDecimal  +  1);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid).compareTo(_numberBigDecimal  +  1);	  ((    long)_numTypesValid).compareTo(_numberBigDecimal);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
26	[BUG]  [BUGGY]  ((  long)_numTypesValid).compareTo(_numberBigDecimal  -  1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid).compareTo(_numberBigDecimal  -  1);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid).compareTo(_numberBigDecimal  -  1);	  ((    long)_numTypesValid).compareTo(_numberBigDecimal);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
27	[BUG]  [BUGGY]  _parsingContext  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  parent.getParent();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  parent.getParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
28	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  ctxt.createChildObjectContext();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
29	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
30	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
31	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
32	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
33	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
34	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
35	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
36	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	12	9	replace
37	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_BIGINT)    {    	compilable	  [FE]  JsonParseException  	29	9	replace
38	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_BIGINT)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_BIGINT)    {    	compilable	  [FE]  JsonParseException  	29	9	replace
39	[BUG]  [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0;  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  int)_numTypesValid  &  NR_DOUBLE)!=  0;	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0;    	non-compiled	[CE]  not  a  statement	49	None	replace
40	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  ==  0;  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  ==  0;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)  ==  0;	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0;    	non-compiled	[CE]  not  a  statement	49	None	replace
41	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  >=  0;  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  >=  0;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)  >=  0;	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0;    	non-compiled	[CE]  not  a  statement	49	None	replace
42	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	8	8	replace
43	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	8	8	replace
44	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  cannot  find  symbol  NR_MIN_INT  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_INT	8	None	replace
45	[BUG]  [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	14	None	replace
46	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowLong();  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowLong();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowLong();	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	14	None	replace
47	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  ==  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)  ==  0)  {  reportOverflowInt();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)  ==  0)  {  reportOverflowInt();	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	14	None	replace
48	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  cannot  find  symbol  NR_MIN_INT  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_INT	20	None	replace
49	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	8	replace
50	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	8	replace
51	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	9	replace
52	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	9	replace
53	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  &&((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  &&((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	9	replace
54	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  &&((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  &&((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  &&((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	9	replace
55	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
56	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
57	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	11	9	replace
58	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	11	9	replace
59	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)  ==  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	11	9	replace
60	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)  ==  0)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LONG)  ==  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	11	9	replace
61	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
62	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
63	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
64	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
65	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  >=  0))  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  >=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  _numTypesValid  &  NR_BIGINT)  >=  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
66	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  ctxt.createChildObjectContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
67	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  int  _numTypesValid  =  NR_UNKNOWN;  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  int  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	int  _numTypesValid  =  NR_UNKNOWN;	  if(_numTypesValid    ==    NR_UNKNOWN)    {    int    _numTypesValid    =    NR_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
69	[BUG]  [BUGGY]  _numTypesValid  =  NR_UNKNOWN;  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_numTypesValid  =  NR_UNKNOWN;	  if(_numTypesValid    ==    NR_UNKNOWN)    {    int    _numTypesValid    =    NR_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
70	[BUG]  [BUGGY]  Integer  _numTypesValid  =  NR_UNKNOWN;  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	Integer  _numTypesValid  =  NR_UNKNOWN;	  if(_numTypesValid    ==    NR_UNKNOWN)    {    int    _numTypesValid    =    NR_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
71	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [CE]  cannot  find  symbol  NR_LBIGINT  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LBIGINT)!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  NR_LBIGINT	32	None	replace
72	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [CE]  cannot  find  symbol  NR_LBIGINT  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LBIGINT)!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  NR_LBIGINT	32	None	replace
73	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)  ==  0)  {  [CE]  cannot  find  symbol  NR_LBIGINT  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)  ==  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LBIGINT)!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  NR_LBIGINT	32	None	replace
74	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_UNKNOWN    ||    _numTypesValid    ==    NR_BIGINT)    {    	compilable	  [FE]  JsonParseException  	25	9	replace
75	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_UNKNOWN    ||    _numTypesValid    ==    NR_BIGINT)    {    	compilable	  [FE]  JsonParseException  	25	9	replace
76	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	8	replace
77	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	8	replace
78	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	9	replace
79	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	9	replace
80	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  ==  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	9	replace
81	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  ==  0)  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  ==  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	9	replace
82	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
83	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext();	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
84	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [CE]  cannot  find  symbol  NR_SEMICOLON  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_SEMICOLON)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_UNKNOWN    ||    _numTypesValid    ==    NR_SEMICOLON)    {    	non-compiled	[CE]  cannot  find  symbol  NR_SEMICOLON	27	None	replace
85	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [CE]  cannot  find  symbol  NR_MIN_INT  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_SEMICOLON)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_UNKNOWN    ||    _numTypesValid    ==    NR_SEMICOLON)    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_INT	27	None	replace
86	[BUG]  [BUGGY]  _parsingContext.setCurrentName(getText()  +  1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext.setCurrentName(getText()  +  1);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext.setCurrentName(getText()  +  1);	  _parsingContext.setCurrentName(getText());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
87	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
88	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
89	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
90	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
91	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
92	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_LONG)    {    if(_numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
93	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid!=  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid!=  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_LONG)    {    if(_numTypesValid!=  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
94	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  >=  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  >=  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_LONG)    {    if(_numTypesValid  >=  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
95	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_LONG)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
96	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_LONG)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
97	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	13	9	replace
98	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    long)_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	13	9	replace
99	[BUG]  [BUGGY]  int  _numTypesValid  =  NR_LONG;  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  int  _numTypesValid  =  NR_LONG;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	int  _numTypesValid  =  NR_LONG;	  if(_numTypesValid    ==    NR_LONG)    {    int    _numTypesValid    =    NR_LONG;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
100	[BUG]  [BUGGY]  _numTypesValid  =  NR_LONG;  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  _numTypesValid  =  NR_LONG;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_numTypesValid  =  NR_LONG;	  if(_numTypesValid    ==    NR_LONG)    {    int    _numTypesValid    =    NR_LONG;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
101	[BUG]  [BUGGY]  Integer  _numTypesValid  =  NR_LONG;  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  _numTypesValid  =  NR_LONG;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	Integer  _numTypesValid  =  NR_LONG;	  if(_numTypesValid    ==    NR_LONG)    {    int    _numTypesValid    =    NR_LONG;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
102	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
103	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN  ||  _numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
104	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
105	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
106	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
107	[BUG]  [BUGGY]  if(_numTypesValid  ==  INT  ||  _numTypesValid  ==  INT)  {  [CE]  cannot  find  symbol  INT  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  INT  ||  _numTypesValid  ==  INT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  INT  ||  _numTypesValid  ==  INT)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    	non-compiled	[CE]  cannot  find  symbol  INT	45	None	replace
108	[BUG]  [BUGGY]  if(_numTypesValid  ==  MIN_LONG  ||  _numTypesValid  ==  MIN_BIGINT)  {  [CE]  cannot  find  symbol  MIN_LONG  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  MIN_LONG  ||  _numTypesValid  ==  MIN_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  MIN_LONG  ||  _numTypesValid  ==  MIN_BIGINT)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LONG	45	None	replace
109	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
110	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
111	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  ==  0  ||((  long)_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
112	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
113	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  >=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
114	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
115	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
116	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid!=  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
117	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_DOUBLE)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid  ==  NR_MIN_INT  ||  _numTypesValid  ==  NR_DOUBLE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
118	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid  ==  0  ||  _numTypesValid  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
119	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {	  if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	21	8	replace
120	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LONG)  {	  if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_LONG)    {    	compilable	  [FE]  JsonParseException  	21	8	replace
121	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_LONG)!=  0;  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_LONG)!=  0;  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_LONG)!=  0;	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0;    	non-compiled	[CE]  not  a  statement	49	None	replace
122	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_LONG)!=  0);  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_LONG)!=  0);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_LONG)!=  0);	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0);    	non-compiled	[CE]  not  a  statement	17	None	replace
123	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_BIGINT)!=  0);  [CE]  not  a  statement  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_BIGINT)!=  0);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_BIGINT)!=  0);	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0);    	non-compiled	[CE]  not  a  statement	17	None	replace
124	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
125	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
126	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_DOUBLE)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid!=  NR_DOUBLE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
127	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_BIGINT  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  if(_numTypesValid  ==  NR_BIGINT  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    if(_numTypesValid  ==  NR_BIGINT  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
128	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  >>  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
129	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
130	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  -1)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  -1)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  ==  -1)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
131	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  1)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
132	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	9	replace
133	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {	  if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    	compilable	  [FE]  JsonParseException  	4	9	replace
134	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_MIN_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [CE]  cannot  find  symbol  NR_MIN_LONG  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_MIN_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_MIN_LONG  ||  _numTypesValid  ==  NR_DOUBLE)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_DOUBLE)    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_LONG	47	None	replace
135	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid!=  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid!=  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_LONG)    {    if(_numTypesValid!=  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
136	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid!=  NR_LBIGINT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_LONG)  {  if(_numTypesValid!=  NR_LBIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_LONG)    {    if(_numTypesValid!=  NR_LBIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
137	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  >=  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if(_numTypesValid  >=  NR_LONG)  {	  if(_numTypesValid    ==    0)    {    	compilable	  [FE]  JsonParseException  	6	9	replace
138	[BUG]  [BUGGY]  if(_numTypesValid  >=  NR_LONG)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  >=  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  >=  NR_LONG)  {	  if(_numTypesValid    ==    0)    {    	compilable	  [FE]  JsonParseException  	6	9	replace
139	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)  >=  0))  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)  >=  0))  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)  >=  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
140	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createParent();  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  ctxt.createParent();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  ctxt.createParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
141	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_MIN_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  cannot  find  symbol  NR_MIN_LONG  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_MIN_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_MIN_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_LONG	8	None	replace
142	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
143	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_MIN_LONG)  {  [CE]  cannot  find  symbol  NR_MIN_LONG  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_MIN_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_MIN_LONG)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_UNKNOWN    ||    _numTypesValid    ==    NR_SEMICOLON)    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_LONG	27	None	replace
144	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    if(_numTypesValid  >=  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
145	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_LONG)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_LONG)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid!=  NR_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
146	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.getCurrentContext();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.getCurrentContext();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.getCurrentContext();	  _parsingContext.setCurrentName(getText());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  reportOverflowInt();  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  reportOverflowInt();	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	14	None	replace
148	[BUG]  [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  }  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  ((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  }  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  long)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  }	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	14	None	replace
149	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LBIGINT)  {  [CE]  cannot  find  symbol  NR_LBIGINT  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LBIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_LBIGINT)  {	  if(_numTypesValid    ==    NR_LONG)    {    if(_numTypesValid    ==    NR_LBIGINT)    {    	non-compiled	[CE]  cannot  find  symbol  NR_LBIGINT	37	None	replace
150	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(0,  0);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
151	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0  ||((  _numTypesValid  &  NR_BIGINT)!=  0))  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    ==    0    ||((    _numTypesValid    &    NR_BIGINT)!=    0))    {    if((  _numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
152	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	8	replace
153	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_BIGINT)!=  0)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	8	replace
154	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	9	replace
155	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_BIGINT)!=    0)    {    	compilable	  [FE]  JsonParseException  	31	9	replace
156	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [CE]  cannot  find  symbol  NR_LBIGINT  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_LBIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LBIGINT)!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  NR_LBIGINT	32	None	replace
157	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [CE]  cannot  find  symbol  NR_LBIGINT  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_LBIGINT)!=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0  ||((  int)_numTypesValid  &  NR_LBIGINT)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)    ==    0)    {    if((    _numTypesValid    &    NR_LONG)!=    0    ||((    long)_numTypesValid    &    NR_LBIGINT)!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  NR_LBIGINT	32	None	replace
158	[BUG]  [BUGGY]  if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }	  _parsingContext.setCurrentName(getText());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
159	[BUG]  [BUGGY]  if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  else  {  _parsingContext.setCurrentName(getText());  }  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  else  {  _parsingContext.setCurrentName(getText());  }  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  else  {  _parsingContext.setCurrentName(getText());  }	  _parsingContext.setCurrentName(getText());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
160	[BUG]  [BUGGY]  if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  else  {  _parsingContext.reportError( "Numeric  value( "+getText()+   ")out  of  range  of  int ");  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  else  {  _parsingContext.reportError( "Numeric  value( "+getText()+   ")out  of  range  of  int ");  }  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_parsingContext.hasParent())  {  _parsingContext.setCurrentName(getText());  }  else  {  _parsingContext.reportError( "Numeric  value( "+getText()+   ")out  of  range  of  int ");  }	  _parsingContext.setCurrentName(getText());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
161	[BUG]  [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  }  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  ((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  }  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	((  int)_numTypesValid  &  NR_DOUBLE)!=  0)  {  reportOverflowInt();  }	  ((    long)_numTypesValid    &    NR_DOUBLE)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	14	None	replace
162	[BUG]  [BUGGY]  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  <  =  NR_LONG  ||  _numTypesValid  ==  NR_BIGINT)  {	  if(_numTypesValid    ==    NR_LONG    ||    _numTypesValid    ==    NR_BIGINT)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
163	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [CE]  cannot  find  symbol  NR_SEMICOLON  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_SEMICOLON)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid  ==  NR_LONG  ||  _numTypesValid  ==  NR_SEMICOLON)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid    ==    NR_UNKNOWN    ||    _numTypesValid    ==    NR_SEMICOLON)    {    	non-compiled	[CE]  cannot  find  symbol  NR_SEMICOLON	27	None	replace
164	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  >=  0)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if((    _numTypesValid    &    NR_LONG)    >=    0)    {    if((  _numTypesValid  &  NR_LONG)  >=  0  ||((  long)_numTypesValid  &  NR_BIGINT)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
165	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  10)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  0)  {  if(_numTypesValid  ==  10)  {  [BUGGY]        int  result  =  (int)  _numberLong;  if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	if(_numTypesValid    ==    0)    {    if(_numTypesValid  ==  10)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
