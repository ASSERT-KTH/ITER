bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    x  =  newInstance(getZero());  [CE]  final  parameter  x  may  not  be  assigned  [FE]    AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]    x  =  newInstance(getZero());  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	    x  =  newInstance(getZero());		non-compiled	[CE]  final  parameter  x  may  not  be  assigned	4	None	add
2	[BUG]  [BUGGY]    x  =  newInstance(this);  [CE]  final  parameter  x  may  not  be  assigned  [FE]      AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]    x  =  newInstance(this);  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	    x  =  newInstance(this);		non-compiled	[CE]  final  parameter  x  may  not  be  assigned	4	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]    result  =  newInstance(this);  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	add	    result  =  newInstance(this);		compilable	  [FE]  AssertionError  	4	1	add
4	[BUG]  [BUGGY]    result  =  newInstance(this);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]    result  =  newInstance(this);  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	    result  =  newInstance(this);		compilable	  [FE]  AssertionError  	4	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]  return  x;  [BUGGY]  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	add	return  x;	return  this;  	compilable	  [FE]  AssertionError  	3	1	replace
6	[BUG]  [BUGGY]  return  x;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]  return  x;  [BUGGY]  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	return  x;	return  this;  	compilable	  [FE]  AssertionError  	3	1	replace
7	[BUG]  [BUGGY]  return  nans;  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]  return  nans;  [BUGGY]  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	return  nans;	return  this;  	non-compiled	[CE]  incompatible  types	3	None	replace
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]  return  null;  [BUGGY]  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	add	return  null;	return  this;  	compilable	  [FE]  NullPointerException  	3	1	replace
9	[BUG]  [BUGGY]  return  null;  [FE]  NullPointerException  [FE]    AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]  return  null;  [BUGGY]  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	return  null;	return  this;  	compilable	  [FE]  NullPointerException  	3	1	replace
10	[BUG]  [BUGGY]    x  =  x.nans;  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]    x  =  x.nans;  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	    x  =  x.nans;		non-compiled	[CE]  incompatible  types	4	None	add
11	[BUG]  [BUGGY]    x  =  newInstance(this,  getZero());  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]      AssertionError  [CONTEXT]  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  [BUGGY]    x  =  newInstance(this,  getZero());  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	    x  =  newInstance(this,  getZero());		non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	4	None	add
