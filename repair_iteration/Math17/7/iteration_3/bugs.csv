bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	39	1	add
2	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	39	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	39	1	add
4	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	39	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	39	1	add
6	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	39	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	19	1	add
8	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	19	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	19	1	add
10	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	19	1	add
11	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
13	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
15	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
16	[BUG]  [BUGGY]  result;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result;	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
18	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
20	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
21	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	37	1	add
23	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	37	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	37	1	add
25	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	37	1	add
26	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.sign!=  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
27	[BUG]  [BUGGY]  result.multiplier  =(double)x.multiplier;  [CE]  cannot  find  symbol  multiplier  [FE]                AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.multiplier  =(double)x.multiplier;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result.multiplier  =(double)x.multiplier;	  result.multiply    =(double)x.multiplier;    	non-compiled	[CE]  cannot  find  symbol  multiplier	31	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(nans  ==  FINITE)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
29	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  FINITE)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
31	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
33	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
34	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
36	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
38	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
39	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
40	[BUG]  [BUGGY]  result.multiplier  =  x.multiplier;  [CE]  cannot  find  symbol  multiplier  [FE]            AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.multiplier  =  x.multiplier;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result.multiplier  =  x.multiplier;	  result.multiply    =    x.multiplier;    	non-compiled	[CE]  cannot  find  symbol  multiplier	6	None	replace
41	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	27	1	add
43	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	27	1	add
44	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	3	1	add
46	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	3	1	add
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	3	1	add
48	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	3	1	add
49	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
50	[BUG]  [BUGGY]  result  =  newInstance(x,  nans,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]          AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x,  nans,  rsign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  newInstance(x,  nans,  rsign);	  result    =    newInstance(x,    nans);    	non-compiled	[CE]  cannot  find  symbol  rsign	14	None	replace
51	[BUG]  [BUGGY]  result  =  newInstance(x,  nans,  rsig);  [CE]  cannot  find  symbol  rsig  [FE]            AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x,  nans,  rsig);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  newInstance(x,  nans,  rsig);	  result    =    newInstance(x,    nans);    	non-compiled	[CE]  cannot  find  symbol  rsig	14	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	38	1	replace
53	[BUG]  [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	38	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(x.sign);    result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	34	1	add
55	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.sign);    result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	34	1	add
56	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.sign);    if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	34	None	add
57	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.sign);    if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	34	None	add
58	[BUG]  [BUGGY]  x.multiply  =(double)nans;  [CE]  cannot  find  symbol  multiply  [FE]                AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  x.multiply  =(double)nans;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	x.multiply  =(double)nans;	  x.multiply    =(double)result.multiply;    	non-compiled	[CE]  cannot  find  symbol  multiply	7	None	replace
59	[BUG]  [BUGGY]  result  =  newInstance(x.mant);  [CE]  no  suitable  method  found  for  newInstance(int[])  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.mant);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  newInstance(x.mant);	  result    =    newInstance(x.sign);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(int[])	35	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	26	1	replace
61	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	26	1	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	23	1	add
63	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	23	1	add
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	23	1	add
65	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	23	1	add
66	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	17	1	add
68	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	17	1	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	17	1	add
70	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	17	1	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	17	1	add
72	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	17	1	add
73	[BUG]  [BUGGY]  result.multiply  =  Math.max(result.length,  2);  [CE]  cannot  find  symbol  multiply  [FE]            AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.multiply  =  Math.max(result.length,  2);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result.multiply  =  Math.max(result.length,  2);	  result.multiply    =    Math.max(result.length,    1);    	non-compiled	[CE]  cannot  find  symbol  multiply	9	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	10	1	add
75	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	10	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
77	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
78	[BUG]  [BUGGY]  result  =  newInstance(this);  Result  result  =  newInstance(this);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  Result  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(this);    Result  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	12	1	add
80	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	12	1	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	12	1	add
82	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	12	1	add
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	12	1	add
84	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	12	1	add
85	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  Result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  Result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    Result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  cannot  find  symbol  Result	25	None	add
86	[BUG]  [BUGGY]  result  =  newInstance(this,  x,  nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp,byte)  [FE]          AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this,  x,  nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  newInstance(this,  x,  nans);	  result    =    newInstance(x,    nans);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp,byte)	14	None	replace
87	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	12	None	add
88	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	12	None	add
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result  =  newInstance(nans);	          result    =    newInstance(x);    if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	38	1	replace
90	[BUG]  [BUGGY]  result  =  newInstance(nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  newInstance(nans);	          result    =    newInstance(x);    if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	38	1	replace
91	[BUG]  [BUGGY]  if(nans  ==  SNAN)  {  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  SNAN)  {  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  SNAN)  {  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	compilable	  [FE]  AssertionError  	33	1	replace
93	[BUG]  [BUGGY]  if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	compilable	  [FE]  AssertionError  	33	1	replace
94	[BUG]  [BUGGY]  result  =  newInstance(this);  Result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  Result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(this);    Result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  Result	10	None	add
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
96	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
97	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
98	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x!=  null)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x!=  null)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    if(x!=  null)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
99	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	23	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign,  nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result  =  newInstance(x.sign,  nans);	  result    =    newInstance(x.sign);    	compilable	  [FE]  AssertionError  	35	1	replace
101	[BUG]  [BUGGY]  result  =  newInstance(x.sign,  nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign,  nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  newInstance(x.sign,  nans);	  result    =    newInstance(x.sign);    	compilable	  [FE]  AssertionError  	35	1	replace
102	[BUG]  [BUGGY]  if(nans  ==  SNAN)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  SNAN)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  SNAN)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	32	1	replace
104	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	32	1	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
106	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	compilable	  [FE]  AssertionError  	4	1	replace
108	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	compilable	  [FE]  AssertionError  	4	1	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	27	1	add
110	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	27	1	add
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  this;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result  =  this;	          result    =    newInstance(x);    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
112	[BUG]  [BUGGY]  result  =  this;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  this;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  this;	          result    =    newInstance(x);    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
113	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
114	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	37	None	add
115	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  this.multiply(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result  =  this.multiply(x);	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  StackOverflowError  	26	1	replace
116	[BUG]  [BUGGY]  result  =  this.multiply(x);  [FE]  StackOverflowError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  this.multiply(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result  =  this.multiply(x);	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  StackOverflowError  	26	1	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(x.sign!=  nans)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	26	1	replace
118	[BUG]  [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(x.sign!=  nans)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	26	1	replace
119	[BUG]  [BUGGY]  if(sign!=  null)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(sign!=  null)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(sign!=  null)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
120	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
121	[BUG]  [BUGGY]  if(x.sign!=  null)  {  result  =  newInstance(this);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  null)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(x.sign!=  null)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	28	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
123	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
124	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
125	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
126	[BUG]  [BUGGY]  if(x.sign!=  null)  {  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  null)  {  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(x.sign!=  null)  {  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
127	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	12	1	add
129	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	12	1	add
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(this);    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	10	1	add
131	[BUG]  [BUGGY]  result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(this);    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	10	1	add
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(this);    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	10	1	add
133	[BUG]  [BUGGY]  result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(this);    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	10	1	add
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	34	1	add
135	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	34	1	add
136	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.	  	non-compiled	[CE]  ')'  expected	19	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	37	1	add
138	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    else    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	37	1	add
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	23	1	add
140	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	23	1	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	23	1	add
142	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	23	1	add
143	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.	  	non-compiled	[CE]  ')'  expected	15	None	add
144	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	compilable	  [FE]  AssertionError  	4	1	replace
146	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    	compilable	  [FE]  AssertionError  	4	1	replace
147	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.	  	non-compiled	[CE]  ')'  expected	21	None	add
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	3	1	add
149	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        newInstance(x);        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	3	1	add
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
151	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
152	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  if(x!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	                result        =        newInstance(x);        if(x.sign!=    FINITE)    {    result    =    newInstance(x);    }    if(x!=  FINITE)  {  result  =  newInstance(x);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
