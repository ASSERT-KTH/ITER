bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	40	1	replace
2	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	40	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	15	1	add
4	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	15	1	add
5	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
6	[BUG]  [BUGGY]  result.sign  =  newInstance(this);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign  =  newInstance(this);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  incompatible  types	12	None	replace
7	[BUG]  [BUGGY]  result.sign  =  newInstance(this,  x);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]          AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  newInstance(this,  x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign  =  newInstance(this,  x);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	12	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	21	1	replace
9	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	21	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	61	1	replace
11	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	61	1	replace
12	[BUG]  [BUGGY]  result  =  newInstance(this,  x);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this,  x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this,  x);  result.sign  =  (byte)(sign  *  x.sign);	  result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	16	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	25	1	add
14	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	25	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	25	1	add
16	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	25	1	add
17	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	31	1	add
19	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	31	1	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	31	1	add
21	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	31	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	59	1	replace
23	[BUG]  [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	59	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	36	1	replace
25	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	36	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	66	1	replace
27	[BUG]  [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	66	1	replace
28	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	41	1	add
30	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	41	1	add
31	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	34	1	replace
33	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	34	1	replace
34	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;	  	non-compiled	[CE]  unreachable  statement	3	None	add
35	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  unreachable  statement	3	None	add
36	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	56	1	add
38	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	56	1	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	56	1	add
40	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	56	1	add
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans  ==  FINITE  &&  x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	72	1	replace
42	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans  ==  FINITE  &&  x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	72	1	replace
43	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
44	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
45	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	71	1	add
47	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	71	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	71	1	add
49	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	71	1	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	60	1	add
51	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	60	1	add
52	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
53	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	30	1	replace
55	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	30	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    0)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	48	1	add
57	[BUG]  [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    0)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	48	1	add
58	[BUG]  [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  If(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  If(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    0)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(nans  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  ';'  expected	48	None	add
59	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	22	1	add
61	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	22	1	add
62	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.	  	non-compiled	[CE]  <identifier>  expected	22	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	35	1	add
64	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	35	1	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	35	1	add
66	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	35	1	add
67	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result.sign  =  (byte)(sign  *  x.sign);	  result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    	compilable	  [FE]  AssertionError  	14	1	replace
69	[BUG]  [BUGGY]  result.sign  =  (byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign  =  (byte)(sign  *  x.sign);	  result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    	compilable	  [FE]  AssertionError  	14	1	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	5	1	add
71	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	5	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	5	1	add
73	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	5	1	add
74	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  Result  result  =  newInstance(this);  result  =  newInstance(this);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  Result  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    Result  result  =  newInstance(this);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	17	1	add
76	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	17	1	add
77	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	63	1	add
79	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	63	1	add
80	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	63	1	add
82	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	63	1	add
83	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	39	1	add
85	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	39	1	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)	  	compilable	  [FE]  AssertionError  	39	1	add
87	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)	  	compilable	  [FE]  AssertionError  	39	1	add
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	65	1	add
89	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	65	1	add
90	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	65	1	add
92	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	65	1	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	7	1	add
94	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	7	1	add
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	7	1	add
96	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	7	1	add
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	7	1	add
98	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	7	1	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	29	1	add
100	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	29	1	add
101	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
102	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	53	1	replace
104	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	53	1	replace
105	[BUG]  [BUGGY]  result  =  newInstance(x,  this);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]        AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x,  this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(x,  this);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	45	None	replace
106	[BUG]  [BUGGY]  result  =  newInstance(this,  x,  nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp,byte)  [FE]          AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this,  x,  nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this,  x,  nans);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp,byte)	45	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	69	1	add
108	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	69	1	add
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	69	1	add
110	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	69	1	add
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	33	1	add
112	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	33	1	add
113	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
114	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
115	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	20	1	add
117	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	20	1	add
118	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.	  	non-compiled	[CE]  <identifier>  expected	20	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	51	1	replace
120	[BUG]  [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	51	1	replace
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
122	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	28	1	replace
123	[BUG]  [BUGGY]  result.sign  =  sig;  [CE]  cannot  find  symbol  sig  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  sig;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign  =  sig;	  result.sign    =    x.sign;    	non-compiled	[CE]  cannot  find  symbol  sig	11	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	13	1	add
125	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	13	1	add
126	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
127	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;	  	non-compiled	[CE]  unreachable  statement	1	None	add
128	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  unreachable  statement	1	None	add
129	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	64	1	replace
131	[BUG]  [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	64	1	replace
132	[BUG]  [BUGGY]  result.initialise(x,  nans,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]              AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.initialise(x,  nans,  rsign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.initialise(x,  nans,  rsign);	  result.initialise(x,    nans);    	non-compiled	[CE]  cannot  find  symbol  rsign	24	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	50	1	add
134	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	50	1	add
135	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	50	1	add
137	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	50	1	add
138	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
139	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	58	1	add
141	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	58	1	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  result.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result.sign    =    x.sign;    result.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	10	1	add
143	[BUG]  [BUGGY]  result.sign  =  x.sign;  result.sign  =  x.sign;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  result.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign    =    x.sign;    result.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	10	1	add
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
145	[BUG]  [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
147	[BUG]  [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	37	1	add
149	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	37	1	add
150	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
151	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	67	1	add
153	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	67	1	add
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	67	1	add
155	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	67	1	add
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	27	1	add
157	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	27	1	add
158	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
159	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
161	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
162	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
163	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
164	[BUG]  [BUGGY]  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  not  a  statement	68	None	replace
165	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    	compilable	  [FE]  AssertionError  	44	1	replace
167	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    	compilable	  [FE]  AssertionError  	44	1	replace
168	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	27	1	add
170	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	27	1	add
171	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	7	1	add
172	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	7	1	add
173	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  Result  =  newInstance(this);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  Result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    Result  =  newInstance(this);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	7	None	add
174	[BUG]  [BUGGY]  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	70	1	replace
176	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	70	1	replace
177	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
178	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant	  	non-compiled	[CE]  ']'  expected	39	None	add
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(nans!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	19	1	replace
180	[BUG]  [BUGGY]  if(nans!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	19	1	replace
181	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	25	None	add
182	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
183	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	20	None	add
184	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(result  ==  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(result  ==  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
186	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(result  ==  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(result  ==  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(result  ==  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
187	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol  Result	13	None	add
188	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
189	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  Result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  Result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    Result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;	  	non-compiled	[CE]  cannot  find  symbol  Result	3	None	add
190	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  If(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  If(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  ';'  expected	69	None	add
191	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
192	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result.sign    =    x.sign;    if(x.sign!=  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
193	[BUG]  [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign!=  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign    =    x.sign;    if(x.sign!=  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign  ==  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result.sign    =    x.sign;    if(x.sign  ==  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
195	[BUG]  [BUGGY]  result.sign  =  x.sign;  if(x.sign  ==  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(x.sign  ==  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign    =    x.sign;    if(x.sign  ==  nans)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
196	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
197	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  Result  =  newInstance(this);  result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  Result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    Result  =  newInstance(this);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  Result	5	None	add
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	22	1	add
199	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	22	1	add
200	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
201	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	22	None	add
202	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  byte)(sign  *  x.sign);  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  result.sign  =  byte)(sign  *  x.sign);	          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  '.class'  expected	43	None	replace
203	[BUG]  [BUGGY]  result.initialise(x,  sign);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.initialise(x,  sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.initialise(x,  sign);	  result.initialise(x,    sig);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
204	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
205	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.sign.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.sign.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.sign.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
206	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
207	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
208	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
209	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
210	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
211	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
212	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
213	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	61	1	replace
215	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	61	1	replace
216	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  ';'  expected	31	None	add
217	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	52	1	add
219	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	52	1	add
220	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
221	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE  &&	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
222	[BUG]  [BUGGY]  result.sign  =  newInstance(x,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]        AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  newInstance(x,  rsign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign  =  newInstance(x,  rsign);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  cannot  find  symbol  rsign	12	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	64	1	replace
224	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	64	1	replace
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
226	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
227	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  ';'  expected	67	None	add
228	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
229	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant	  	non-compiled	[CE]  ']'  expected	37	None	add
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	5	1	add
231	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	5	1	add
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	5	1	add
233	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	5	1	add
234	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
235	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
236	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
237	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
238	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	17	1	add
239	[BUG]  [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(nans        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(nans    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	17	1	add
240	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
241	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
242	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.	  	non-compiled	[CE]  <identifier>  expected	27	None	add
243	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
244	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
245	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
246	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
247	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign  >=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.sign  >=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	71	1	add
248	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign  >=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.sign  >=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.sign  >=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	71	1	add
249	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
250	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
251	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
252	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	7	1	add
254	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	7	1	add
255	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	7	1	add
256	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	7	1	add
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	52	1	add
258	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	52	1	add
259	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.	  	non-compiled	[CE]  <identifier>  expected	52	None	add
260	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.	  	non-compiled	[CE]  <identifier>  expected	22	None	add
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)	  	compilable	  [FE]  AssertionError  	39	1	add
262	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)	  	compilable	  [FE]  AssertionError  	39	1	add
263	[BUG]  [BUGGY]  if(x.sign!=  null)  {  if(mant.length  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  null)  {  if(mant.length  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(x.sign!=  null)  {  if(mant.length  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	59	1	replace
265	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	59	1	replace
266	[BUG]  [BUGGY]  result  =  newInstance(this,  x.sign);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]        AssertionError      [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this,  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this,  x.sign);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	45	None	replace
267	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(Nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  cannot  find  symbol  Nans  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(Nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(Nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  cannot  find  symbol  Nans	56	None	add
268	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
270	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	53	1	replace
272	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	53	1	replace
273	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)	  	compilable	  [FE]  AssertionError  	37	1	add
274	[BUG]  [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	                if(x.nans        ==        FINITE        &&        mant[mant.length-1]        ==        0)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)	  	compilable	  [FE]  AssertionError  	37	1	add
275	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
276	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
277	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
278	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
279	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
280	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
281	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
282	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
283	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	51	1	replace
284	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	51	1	replace
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	30	1	replace
286	[BUG]  [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result  =  newInstance(this);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	30	1	replace
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(  x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	result.sign    =    x.sign;    if(  x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
288	[BUG]  [BUGGY]  result.sign  =  x.sign;  if(  x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x.sign;  if(  x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	result.sign    =    x.sign;    if(  x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	10	1	add
