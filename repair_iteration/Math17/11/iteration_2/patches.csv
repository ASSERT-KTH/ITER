bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	51	1	add
2	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	51	1	add
3	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
4	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
6	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	4	1	add
8	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	4	1	add
9	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  Result  result  =  newInstance(this);  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  Result  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    Result  result  =  newInstance(this);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
10	[BUG]  [BUGGY]  Result  result  =  newInstance(this);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  Result  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	Result  result  =  newInstance(this);	          result    =    newInstance(x);    Result    result    =    newInstance(x);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	19	1	add
12	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	19	1	add
13	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	29	1	add
15	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	29	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	29	1	add
17	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	29	1	add
18	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  incompatible  types	29	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	2	1	add
20	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	2	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	2	1	add
22	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	2	1	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	2	1	add
24	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	2	1	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	27	1	add
26	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	27	1	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	27	1	add
28	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	27	1	add
29	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  incompatible  types	27	None	add
30	[BUG]  [BUGGY]  result.add(x.sign,  sig);  [CE]  cannot  find  symbol  sig  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.add(x.sign,  sig);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.add(x.sign,  sig);	  result.add(x.sign);    	non-compiled	[CE]  cannot  find  symbol  sig	23	None	replace
31	[BUG]  [BUGGY]  result.add(x.sign,  rsig);  [CE]  cannot  find  symbol  rsig  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.add(x.sign,  rsig);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.add(x.sign,  rsig);	  result.add(x.sign);    	non-compiled	[CE]  cannot  find  symbol  rsig	23	None	replace
32	[BUG]  [BUGGY]  Result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  Result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	Result  =  newInstance(this);	          result    =    newInstance(x);    Result    =    newInstance(x);    	non-compiled	[CE]  cannot  find  symbol  Result	44	None	replace
33	[BUG]  [BUGGY]  result.sign  =  newInstance(this);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.sign  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.sign  =  newInstance(this);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  incompatible  types	26	None	replace
34	[BUG]  [BUGGY]  result.sign  =  newInstance(this,  x);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.sign  =  newInstance(this,  x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.sign  =  newInstance(this,  x);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	26	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
36	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	54	1	add
37	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
38	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(	  	non-compiled	[CE]  ')'  expected	54	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	17	1	add
40	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	17	1	add
41	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
42	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	17	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
44	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	21	1	add
45	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }	  	compilable	  [FE]  AssertionError  	34	1	add
47	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }	  	compilable	  [FE]  AssertionError  	34	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	34	1	add
49	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result  =  newInstance(this);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	34	1	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result.add(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    result.add(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	34	1	add
51	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result.add(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  result.add(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    result.add(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	34	1	add
52	[BUG]  [BUGGY]  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	59	1	add
54	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	59	1	add
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	59	1	add
56	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	59	1	add
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	59	1	add
58	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	59	1	add
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
60	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
61	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ')'  expected	22	None	replace
62	[BUG]  [BUGGY]  result.sign  =  (byte)(x.sign  *  mant);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.sign  =  (byte)(x.sign  *  mant);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.sign  =  (byte)(x.sign  *  mant);	  result.sign    =    (byte)(mant    *    x.sign);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	25	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  result.add(x);  result.add(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        result.add(x);    result.add(x);  result.add(x);	  	compilable	  [FE]  AssertionError  	32	1	add
64	[BUG]  [BUGGY]          result.add(x);    result.add(x);  result.add(x);  result.add(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  result.add(x);  result.add(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        result.add(x);    result.add(x);  result.add(x);	  	compilable	  [FE]  AssertionError  	32	1	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  result.add(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        result.add(x);    result.add(x);	  	compilable	  [FE]  AssertionError  	32	1	add
66	[BUG]  [BUGGY]          result.add(x);    result.add(x);  result.add(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  result.add(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        result.add(x);    result.add(x);	  	compilable	  [FE]  AssertionError  	32	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        result.add(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	32	1	add
68	[BUG]  [BUGGY]          result.add(x);    result.add(x);  result  =  newInstance(this);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        result.add(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	32	1	add
69	[BUG]  [BUGGY]  result.add(nans);  [CE]  method  add  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.add(nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.add(nans);	          result.add(x);    result.add(x);    	non-compiled	[CE]  method  add  in  class  Dfp  cannot  be  applied  to  given  types;	33	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	61	1	add
71	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	61	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	61	1	add
73	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	61	1	add
74	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
75	[BUG]  [BUGGY]  result  =  newInstance(this,  x.nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this,  x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result  =  newInstance(this,  x.nans);	          result    =    newInstance(x);    result    =    newInstance(x.nans);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	14	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
77	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
79	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
80	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	49	1	add
82	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	49	1	add
83	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
84	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.add(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result.add(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }	          result.add(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    	compilable	  [FE]  AssertionError  	52	1	replace
86	[BUG]  [BUGGY]  result.add(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.add(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.add(x);  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }	          result.add(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    	compilable	  [FE]  AssertionError  	52	1	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	45	1	add
88	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	45	1	add
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	45	1	add
90	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	45	1	add
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	45	1	add
92	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	45	1	add
93	[BUG]  [BUGGY]  result  =  newInstance(x,  this);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x,  this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result  =  newInstance(x,  this);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	31	None	replace
94	[BUG]  [BUGGY]  result  =  newInstance(this,  x,  nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp,byte)  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this,  x,  nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result  =  newInstance(this,  x,  nans);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp,byte)	31	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	7	1	add
96	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	7	1	add
97	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  result  =  newInstance(x);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        result    =    newInstance(x.nans);    result  =  newInstance(x);  result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	13	1	add
99	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  result  =  newInstance(x);  result  =  newInstance(x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  result  =  newInstance(x);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x.nans);    result  =  newInstance(x);  result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	13	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        result    =    newInstance(x.nans);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	13	1	add
101	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x.nans);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	13	1	add
102	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  Result  result  =  newInstance(x);  result  =  newInstance(x.nans);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  Result  result  =  newInstance(x);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x.nans);    Result  result  =  newInstance(x);  result  =  newInstance(x.nans);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.sign  =  (byte)(x.sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result.sign  =  (byte)(x.sign  *  x.sign);	  result.sign    =    (byte)(x.sign    *    mant.sign);    	compilable	  [FE]  AssertionError  	24	1	replace
104	[BUG]  [BUGGY]  result.sign  =  (byte)(x.sign  *  x.sign);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.sign  =  (byte)(x.sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.sign  =  (byte)(x.sign  *  x.sign);	  result.sign    =    (byte)(x.sign    *    mant.sign);    	compilable	  [FE]  AssertionError  	24	1	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	56	1	add
106	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	56	1	add
107	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
108	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(	  	non-compiled	[CE]  ')'  expected	56	None	add
109	[BUG]  [BUGGY]  Result.sign  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  Result  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  Result.sign  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	Result.sign  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  if(x.sign!=    null)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  cannot  find  symbol  Result	48	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
111	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	15	1	add
112	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
113	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	15	None	add
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  result.add(x);  if(nans  ==  0)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        if(nans    ==    0)    {    result.add(x);    }    result.add(x);  if(nans  ==  0)  {  result.add(x);  }	  	compilable	  [FE]  AssertionError  	36	1	add
115	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  result.add(x);  if(nans  ==  0)  {  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  result.add(x);  if(nans  ==  0)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    0)    {    result.add(x);    }    result.add(x);  if(nans  ==  0)  {  result.add(x);  }	  	compilable	  [FE]  AssertionError  	36	1	add
116	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  if(nans  ==  0)  {  result.add(x);  if(nans  ==  0)  {  result.add(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  if(nans  ==  0)  {  result.add(x);  if(nans  ==  0)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    0)    {    result.add(x);    }    if(nans  ==  0)  {  result.add(x);  if(nans  ==  0)  {  result.add(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
117	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  result.add(x);  if(nans  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  result.add(x);  if(nans  ==  0)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    0)    {    result.add(x);    }    result.add(x);  if(nans  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
118	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	10	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	59	1	add
120	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	59	1	add
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
122	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	22	1	replace
123	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  Result  =  newInstance(this);  result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(this);  Result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(this);    Result  =  newInstance(this);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  Result	2	None	add
124	[BUG]  [BUGGY]          result.add(x);    result.add(x);  Result.add(x);  result.add(x);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  Result.add(x);  result.add(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        result.add(x);    Result.add(x);  result.add(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	32	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	51	1	add
126	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	51	1	add
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	28	1	replace
128	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	28	1	replace
129	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  if(nans  ==  FINITE)  {  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  if(nans  ==  FINITE)  {  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    if(nans  ==  FINITE)  {  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
130	[BUG]  [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  Result  =  newInstance(this);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    result  =  newInstance(x);  Result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        result    =    newInstance(x);    Result  =  newInstance(this);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	4	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	20	1	replace
132	[BUG]  [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	20	1	replace
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	61	1	add
134	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	61	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }	          result.add(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    	compilable	  [FE]  AssertionError  	52	1	replace
136	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }	          result.add(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    	compilable	  [FE]  AssertionError  	52	1	replace
137	[BUG]  [BUGGY]  result.add(x.sign,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.add(x.sign,  rsign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.add(x.sign,  rsign);	  result.add(x.sign);    	non-compiled	[CE]  cannot  find  symbol  rsign	23	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	54	1	add
139	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	54	1	add
140	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	17	1	add
142	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	17	1	add
143	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  Result  =  newInstance(x);  result  =  newInstance(x.nans);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  Result  =  newInstance(x);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x.nans);    Result  =  newInstance(x);  result  =  newInstance(x.nans);	  	non-compiled	[CE]  cannot  find  symbol  Result	13	None	add
144	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	45	None	add
145	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	45	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	38	1	replace
147	[BUG]  [BUGGY]  if(nans  ==  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  0)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	38	1	replace
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	56	1	add
149	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	56	1	add
150	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	62	1	replace
152	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	62	1	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	7	1	add
154	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.sign!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	7	1	add
155	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol  Result	7	None	add
156	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result	  	non-compiled	[CE]  ';'  expected	15	None	add
157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	59	1	add
158	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	59	1	add
159	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	20	1	replace
161	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	20	1	replace
162	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
163	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    result.add(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(	  	non-compiled	[CE]  ')'  expected	49	None	add
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    	compilable	  [FE]  AssertionError  	42	1	replace
165	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    	compilable	  [FE]  AssertionError  	42	1	replace
166	[BUG]  [BUGGY]  if(x.sign!=  null)  {  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  null)  {  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(x.sign!=  null)  {  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
167	[BUG]  [BUGGY]  if(x.sign!=  null)  {  result  =  newInstance(this);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  null)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(x.sign!=  null)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	60	None	replace
168	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	30	1	replace
169	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(x.sign!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	compilable	  [FE]  AssertionError  	30	1	replace
170	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
171	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	29	1	add
173	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	29	1	add
174	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.	  	non-compiled	[CE]  ')'  expected	29	None	add
175	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
176	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  if(x.nans  ==  FINITE)  {  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  FINITE)  {  result.add(x);  }  if(x.nans  ==  FINITE)  {  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    FINITE)    {    result.add(x);    }    if(x.nans  ==  FINITE)  {  result.add(x);  if(nans  ==  FINITE)  {  result.add(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
177	[BUG]  [BUGGY]  if(sign!=  null)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(sign!=  null)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(sign!=  null)  {  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
178	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE)  {  result.sign  =  (byte)sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
179	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign);  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign);  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
180	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign;  return  result;  }  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign;  return  result;  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)sign  *  x.sign;  return  result;  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
181	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
182	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	21	None	add
183	[BUG]  [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(this);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
184	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
185	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	19	None	add
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result.add(x);        result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	32	1	add
187	[BUG]  [BUGGY]          result.add(x);    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  result.add(x);  result.add(x);  }	  	compilable	  [FE]  AssertionError  	32	1	add
188	[BUG]  [BUGGY]  result  =  newInstance(this,  x.sign);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(this,  x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result  =  newInstance(this,  x.sign);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	31	None	replace
189	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result.sign        =        (byte)(sign        *        x.sign);        return        result;        }        if(x.nans    ==    FINITE)    {    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.	  	non-compiled	[CE]  ')'  expected	27	None	add
190	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	61	1	add
191	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	61	1	add
192	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
193	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
194	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	45	1	add
196	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	45	1	add
197	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.sign  =  x.sign;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	result.sign  =  x.sign;	          result.add(x);    if(nans    ==    0)    {    result.add(x);    }    	compilable	  [FE]  AssertionError  	37	1	replace
198	[BUG]  [BUGGY]  result.sign  =  x.sign;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.sign  =  x.sign;  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.sign  =  x.sign;	          result.add(x);    if(nans    ==    0)    {    result.add(x);    }    	compilable	  [FE]  AssertionError  	37	1	replace
199	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
200	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	17	None	add
201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result.add(x);  }	          result.add(x);    result.add(x);    	compilable	  [FE]  AssertionError  	33	1	replace
202	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result.add(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result.add(x);  }	          result.add(x);    result.add(x);    	compilable	  [FE]  AssertionError  	33	1	replace
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	                result        =        newInstance(x);        result    =    newInstance(x.nans);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	13	1	add
204	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x.nans);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result        =        newInstance(x);        result    =    newInstance(x.nans);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	13	1	add
205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	if(x.sign!=  nans)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	57	1	replace
206	[BUG]  [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	if(x.sign!=  nans)  {  result  =  newInstance(x);  }	          result    =    newInstance(this);    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	57	1	replace
207	[BUG]  [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  if(x.nans  ==  FINITE)  {  result.add(x);  if(nans  ==  0)  {  result.add(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(nans  ==  0)  {  result.add(x);  }  if(x.nans  ==  FINITE)  {  result.add(x);  if(nans  ==  0)  {  result.add(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(nans    ==    0)    {    result.add(x);    }    if(x.nans  ==  FINITE)  {  result.add(x);  if(nans  ==  0)  {  result.add(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
208	[BUG]  [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]          result.add(x);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  }  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	                result.add(x);        if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.add(x);    }    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.add(x);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(	  	non-compiled	[CE]  ')'  expected	51	None	add
209	[BUG]  [BUGGY]  result.add(x.sign,  bsign);  [CE]  cannot  find  symbol  bsign  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);      [BUGGY]  result.add(x.sign,  bsign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	result.add(x.sign,  bsign);	  result.add(x.sign);    	non-compiled	[CE]  cannot  find  symbol  bsign	23	None	replace
