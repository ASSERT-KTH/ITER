bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	6	1	add
2	[BUG]  [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	6	1	add
3	[BUG]  [BUGGY]  result  =  newInstance(x);  Result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x);  Result  =  newInstance(x);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result    =    newInstance(x);    Result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	6	None	add
4	[BUG]  [BUGGY]  x  =  field.getField(this,  nans);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x  =  field.getField(this,  nans);  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x  =  field.getField(this,  nans);	      x    =    field.getField(this);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x.nans  =  INFINITE;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	x.nans  =  INFINITE;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	5	1	replace
6	[BUG]  [BUGGY]  x.nans  =  INFINITE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x.nans  =  INFINITE;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x.nans  =  INFINITE;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	5	1	replace
7	[BUG]  [BUGGY]  x.nans  =  NAN;  [CE]  cannot  find  symbol  NAN  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x.nans  =  NAN;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x.nans  =  NAN;	      x.nans    =    QNAN;    	non-compiled	[CE]  cannot  find  symbol  NAN	5	None	replace
8	[BUG]  [BUGGY]  result  =  newInstance(x,  nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]        AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x,  nans);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result  =  newInstance(x,  nans);	  result    =    newInstance(x,    this);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	12	None	replace
9	[BUG]  [BUGGY]  result  =  newInstance(x,  INFINITE);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]          AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x,  INFINITE);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result  =  newInstance(x,  INFINITE);	  result    =    newInstance(x,    this);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	12	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(getZero());  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	result  =  newInstance(getZero());	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	7	1	replace
11	[BUG]  [BUGGY]  result  =  newInstance(getZero());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(getZero());  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result  =  newInstance(getZero());	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	7	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
13	[BUG]  [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
14	[BUG]  [BUGGY]      x.nans  =  QNAN;  ||  x.nans  ==  QNAN;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      x.nans  =  QNAN;  ||  x.nans  ==  QNAN;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        x.nans    =    QNAN;    ||  x.nans  ==  QNAN;	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
15	[BUG]  [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN);  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        x.nans    =    QNAN;    (x.nans  =  QNAN);	  	non-compiled	[CE]  not  a  statement	4	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	1	1	add
17	[BUG]  [BUGGY]      result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	1	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  result  =  newInstance(getZero());  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	        result    =    newInstance(this);    result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	1	1	add
19	[BUG]  [BUGGY]      result  =  newInstance(this);  result  =  newInstance(getZero());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  result  =  newInstance(getZero());  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        result    =    newInstance(this);    result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	1	1	add
20	[BUG]  [BUGGY]      result  =  newInstance(this);  Result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  Result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        result    =    newInstance(this);    Result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	8	1	add
22	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	8	1	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	result    =    newInstance(x.nans);    if(x.nans!=  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	8	1	add
24	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	8	1	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  INFINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	result    =    newInstance(x.nans);    if(x.nans!=  INFINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	8	1	add
26	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  INFINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  INFINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  INFINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	8	1	add
27	[BUG]  [BUGGY]  x  =  newInstance(nans);  [CE]  final  parameter  x  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x  =  newInstance(nans);  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x  =  newInstance(nans);	      x    =    newInstance(this);    	non-compiled	[CE]  final  parameter  x  may  not  be  assigned	3	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x.nans  =  SNAN;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	x.nans  =  SNAN;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	5	1	replace
29	[BUG]  [BUGGY]  x.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x.nans  =  SNAN;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x.nans  =  SNAN;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	5	1	replace
30	[BUG]  [BUGGY]  result  =  newInstance(x,  SNAN);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]        AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x,  SNAN);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result  =  newInstance(x,  SNAN);	  result    =    newInstance(x,    this);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	12	None	replace
31	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  Result  =  newInstance(x.nans);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.nans);  Result  =  newInstance(x.nans);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result    =    newInstance(x.nans);    Result  =  newInstance(x.nans);	  	non-compiled	[CE]  cannot  find  symbol  Result	8	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x.nans  =  0;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	x.nans  =  0;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	5	1	replace
33	[BUG]  [BUGGY]  x.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x.nans  =  0;  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x.nans  =  0;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	5	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.sign);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	result  =  newInstance(x.sign);	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	7	1	replace
35	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x.sign);  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result  =  newInstance(x.sign);	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	7	1	replace
36	[BUG]  [BUGGY]  result  =  newInstance(x,  getZero());  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  result  =  newInstance(x,  getZero());  [BUGGY]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	result  =  newInstance(x,  getZero());	  result    =    newInstance(x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	7	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	1	1	add
38	[BUG]  [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	1	1	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	1	1	add
40	[BUG]  [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	        result    =    newInstance(this);    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	1	1	add
41	[BUG]  [BUGGY]  x  =  field.setField(getField());  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x  =  field.setField(getField());  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x  =  field.setField(getField());	      x    =    field.getField();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
42	[BUG]  [BUGGY]  x  =  newInstance(this,  sign);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]          AssertionError    [CONTEXT]    return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {    [BUGGY]  x  =  newInstance(this,  sign);  [BUGGY]    result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	x  =  newInstance(this,  sign);	      x    =    newInstance(this);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	3	None	replace
