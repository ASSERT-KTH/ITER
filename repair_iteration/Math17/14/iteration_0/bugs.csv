bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
27	[BUG] [BUGGY] result = newInstance(this); [FE] AssertionError [CONTEXT] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [BUGGY] result = newInstance(this); [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [BUGGY] [BUGGY] result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	
