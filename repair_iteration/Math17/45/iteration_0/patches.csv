bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]  Dfp  result  =  newInstance(x);  [BUGGY]    if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	add	Dfp  result  =  newInstance(x);	Dfp  result  =  newInstance(this);  	compilable	  [FE]  AssertionError  	89	2	replace
2	[BUG]  [BUGGY]  Dfp  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]  Dfp  result  =  newInstance(x);  [BUGGY]    if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	Dfp  result  =  newInstance(x);	Dfp  result  =  newInstance(this);  	compilable	  [FE]  AssertionError  	89	2	replace
3	[BUG]  [BUGGY]  Dfp  result  =  newDfp(x);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]  Dfp  result  =  newDfp(x);  [BUGGY]    if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	Dfp  result  =  newDfp(x);	Dfp  result  =  newInstance(this);  	non-compiled	[CE]  cannot  find  symbol	89	None	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  result  [FE]        AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    [BUGGY]    if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	  	Dfp  result  =  newInstance(this);  	non-compiled	[CE]  cannot  find  symbol  result	89	None	replace
5	[BUG]  [BUGGY]    final  int[]  nans  =(int[])x.clone();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    final  int[]  nans  =(int[])x.clone();  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    final  int[]  nans  =(int[])x.clone();		non-compiled	[CE]  int  cannot  be  dereferenced	90	None	add
6	[BUG]  [BUGGY]    final  int[]  nans  =  new  int[x  +  1];  [CE]  incomparable  types:  int[]  and  byte  [FE]      AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    final  int[]  nans  =  new  int[x  +  1];  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    final  int[]  nans  =  new  int[x  +  1];		non-compiled	[CE]  incomparable  types:  int[]  and  byte	90	None	add
7	[BUG]  [BUGGY]    final  int[]  nans  =  getNaN();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    final  int[]  nans  =  getNaN();  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    final  int[]  nans  =  getNaN();		non-compiled	[CE]  cannot  find  symbol	90	None	add
8	[BUG]  [BUGGY]  Dfp  result  =  newInstance(this,  x);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]    AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]  Dfp  result  =  newInstance(this,  x);  [BUGGY]    if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	Dfp  result  =  newInstance(this,  x);	Dfp  result  =  newInstance(this);  	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	89	None	replace
9	[BUG]  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans;  ++i)  {  result.add(nans[i]);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans;  ++i)  {  result.add(nans[i]);  }  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans;  ++i)  {  result.add(nans[i]);  }		non-compiled	[CE]  illegal  start  of  expression	90	None	add
10	[BUG]  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans.length;  ++i)  {  result.add(nans[i]);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans.length;  ++i)  {  result.add(nans[i]);  }  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans.length;  ++i)  {  result.add(nans[i]);  }		non-compiled	[CE]  illegal  start  of  expression	90	None	add
11	[BUG]  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans;  i++)  {  result.add(nans[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans;  i++)  {  result.add(nans[i]);  }  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    if(x  <  0)  {  final  int[]  nans  =  new  int[x];  for(int  i  =  0;  i  <  nans;  i++)  {  result.add(nans[i]);  }		non-compiled	[CE]  illegal  start  of  expression	90	None	add
12	[BUG]  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  getNaN().multiply(x);  if(nans  ==  0)  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  getNaN().multiply(x);  if(nans  ==  0)  {  return  this;  }  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    if(x  <  0)  {  final  int[]  nans  =  getNaN().multiply(x);  if(nans  ==  0)  {  return  this;  }		non-compiled	[CE]  illegal  start  of  expression	90	None	add
13	[BUG]  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  getNaN().multiply(x);  if(nans!=  0)  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    if(x  <  0)  {  final  int[]  nans  =  getNaN().multiply(x);  if(nans!=  0)  {  return  this;  }  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    if(x  <  0)  {  final  int[]  nans  =  getNaN().multiply(x);  if(nans!=  0)  {  return  this;  }		non-compiled	[CE]  illegal  start  of  expression	90	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    int  nans  =  Math.min(x,  MAX_EXP);  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	add	    int  nans  =  Math.min(x,  MAX_EXP);		compilable	  [FE]  AssertionError  	90	1	add
15	[BUG]  [BUGGY]    int  nans  =  Math.min(x,  MAX_EXP);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  private  Dfp  multiplyFast(final  int  x)  {  [BUGGY]    int  nans  =  Math.min(x,  MAX_EXP);  [BUGGY]  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	    int  nans  =  Math.min(x,  MAX_EXP);		compilable	  [FE]  AssertionError  	90	1	add
