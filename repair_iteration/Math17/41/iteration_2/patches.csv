bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  lostdigit,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  lostdigit,  result,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  LESS_THAN_TRAP,  lostdigit,  result,  null);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	40	None	replace
2	[BUG]  [BUGGY]  result  =  dotrap(result,  RADIX,  lostdigit,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  RADIX,  lostdigit,  MULTIPLY_TRAP);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  RADIX,  lostdigit,  MULTIPLY_TRAP);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    RADIX);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	47	None	replace
3	[BUG]  [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  lostdigit,  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  lostdigit,  RADIX);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  lostdigit,  RADIX);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    RADIX);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	47	None	replace
4	[BUG]  [BUGGY]  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;	          if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    result.mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	non-compiled	[CE]  cannot  find  symbol  i	29	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	final  int  r  =  result.mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;	          if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    result.mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	compilable	  [FE]  AssertionError  	29	1	replace
6	[BUG]  [BUGGY]  final  int  r  =  result.mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result.mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;	          if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    result.mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	compilable	  [FE]  AssertionError  	29	1	replace
7	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  rh  =  r  /  RADIX;  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  rh  =  r  /  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  RADIX  +  x;  rh  =  r  /  RADIX;	  final    int    r    =    mant[i]    *    x    +    rh;    rh    =    r    /    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
8	[BUG]  [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  result);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  result);	  result    =    dotrap(result,    lostdigit,    MULTIPLY_TRAP);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	5	None	replace
9	[BUG]  [BUGGY]  if(mant.length!=  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant.length!=  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant.length!=  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }	  if(mant.length!=    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    rh;    lostdigit    =    r    -    lostdigit    *    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }	  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    	compilable	  [FE]  AssertionError  	12	1	replace
11	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }	  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    	compilable	  [FE]  AssertionError  	12	1	replace
12	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(result.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }  [CE]  cannot  find  symbol  length  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(result.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  lostdigit;  if(result.length-1  <  RADIX)  {  result.mant[mant.length-1]  =  lostdigit;  }	  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
13	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  lostdigit  /  RADIX;  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  lostdigit  /  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  lostdigit  /  RADIX;	  final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    /    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
14	[BUG]  [BUGGY]  final  int  rh  =  result.round(lostdigit  +  2);  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  rh  =  result.round(lostdigit  +  2);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  rh  =  result.round(lostdigit  +  2);	  final    int    rh    =    result.round(lostdigit    +    1);    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	34	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	compilable	  [FE]  AssertionError  	9	1	add
16	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	compilable	  [FE]  AssertionError  	9	1	add
17	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  Result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  Result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    Result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	non-compiled	[CE]  cannot  find  symbol  Result	9	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-2]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-2]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	compilable	  [FE]  AssertionError  	9	1	add
19	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-2]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-2]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-2]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	compilable	  [FE]  AssertionError  	9	1	add
20	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }	  if(mant!=    null)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    rh;    lostdigit    =    r    -    lostdigit    *    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  +  2);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	final  int  r  =  result.round(lostdigit  +  2);	  final    int    r    =    result.round(lostdigit    +    1);    	compilable	  [FE]  AssertionError  	20	1	replace
22	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  +  2);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result.round(lostdigit  +  2);	  final    int    r    =    result.round(lostdigit    +    1);    	compilable	  [FE]  AssertionError  	20	1	replace
23	[BUG]  [BUGGY]  final  int  rh  =  result.round(lostdigit,  lostdigit  +  1);  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  rh  =  result.round(lostdigit,  lostdigit  +  1);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  rh  =  result.round(lostdigit,  lostdigit  +  1);	  final    int    rh    =    result.round(lostdigit,    lostdigit);    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	3	None	replace
24	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  x,  rh);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  x,  rh);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  x,  rh);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    rh);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	46	None	replace
25	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh,  exp);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh,  exp);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh,  exp);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    rh);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	46	None	replace
26	[BUG]  [BUGGY]  result  =  dotrap(result.mant,  lostdigit,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result.mant,  lostdigit,  MULTIPLY_TRAP);  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result.mant,  lostdigit,  MULTIPLY_TRAP);	  result    =    dotrap(result.mant,    MULTIPLY_TRAP,    result,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	42	None	replace
27	[BUG]  [BUGGY]  result  =  dotrap(result.mant,  MULTIPLY_TRAP,  lostdigit,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result.mant,  MULTIPLY_TRAP,  lostdigit,  result);  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result.mant,  MULTIPLY_TRAP,  lostdigit,  result);	  result    =    dotrap(result.mant,    MULTIPLY_TRAP,    result,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	42	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  x;	  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]    =    x;    	compilable	  [FE]  AssertionError  	15	1	replace
29	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  x;	  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]    =    x;    	compilable	  [FE]  AssertionError  	15	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]    =    x;    	compilable	  [FE]  AssertionError  	15	1	replace
31	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  lostdigit;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]    =    x;    	compilable	  [FE]  AssertionError  	15	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]    =    lostdigit;    	compilable	  [FE]  AssertionError  	10	1	replace
33	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  lostdigit;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]    =    lostdigit;    	compilable	  [FE]  AssertionError  	10	1	replace
34	[BUG]  [BUGGY]  final  int[]  rh  =  result.mant.getRight();  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int[]  rh  =  result.mant.getRight();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int[]  rh  =  result.mant.getRight();	  final    int[]    rh    =    result.mant.getField();    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	31	None	replace
35	[BUG]  [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  lostdigit,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  lostdigit,  result);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  LESS_THAN_TRAP,  lostdigit,  result);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
36	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  else  {  result.shiftRight();  }  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  else  {  result.shiftRight();  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  else  {  result.shiftRight();  }	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    else    {    result.shiftRight();    }    	non-compiled	[CE]  ')'  expected	48	None	replace
37	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  lostdigit  =  r  -  lostdigit  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  lostdigit  =  r  -  lostdigit  *  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  lostdigit;  lostdigit  =  r  -  lostdigit  *  RADIX;	  final    int    r    =    mant[i]    *    x    +    rh;    lostdigit    =    r    -    lostdigit    *    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
38	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  +  1);  final  int  r  =  result.round(lostdigit  +  1);  [CE]  variable  r  is  already  defined  in  method  multiplyFast(int)  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  +  1);  final  int  r  =  result.round(lostdigit  +  1);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final    int    r    =    result.round(lostdigit    +    1);    final  int  r  =  result.round(lostdigit  +  1);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  multiplyFast(int)	19	None	add
39	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  +  1);  Final  int  r  =  result.round(lostdigit  +  1);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  +  1);  Final  int  r  =  result.round(lostdigit  +  1);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final    int    r    =    result.round(lostdigit    +    1);    Final  int  r  =  result.round(lostdigit  +  1);	  	non-compiled	[CE]  not  a  statement	19	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  1;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]  =  1;	  result.mant[mant.length-1]    =    0;    	compilable	  [FE]  AssertionError  	2	1	replace
41	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  1;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  1;	  result.mant[mant.length-1]    =    0;    	compilable	  [FE]  AssertionError  	2	1	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  *  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	final  int  r  =  result.round(lostdigit  *  lostdigit);	  final    int    r    =    result.round(lostdigit    +    lostdigit);    	compilable	  [FE]  AssertionError  	36	1	replace
43	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  *  lostdigit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  *  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result.round(lostdigit  *  lostdigit);	  final    int    r    =    result.round(lostdigit    +    lostdigit);    	compilable	  [FE]  AssertionError  	36	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  0;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]    =    0;    result.mant[mant.length-1]  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
45	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  result.mant[mant.length-1]  =  0;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]    =    0;    result.mant[mant.length-1]  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
46	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  0;  Result.mant[mant.length-1]  =  0;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  Result.mant[mant.length-1]  =  0;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]    =    0;    Result.mant[mant.length-1]  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
47	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  0;  results.mant[mant.length-1]  =  0;  [CE]  cannot  find  symbol  results  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  results.mant[mant.length-1]  =  0;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]    =    0;    results.mant[mant.length-1]  =  0;	  	non-compiled	[CE]  cannot  find  symbol  results	1	None	add
48	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  +  lostdigit);  final  int  r  =  result.round(lostdigit  +  lostdigit);  [CE]  variable  r  is  already  defined  in  method  multiplyFast(int)  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  +  lostdigit);  final  int  r  =  result.round(lostdigit  +  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final    int    r    =    result.round(lostdigit    +    lostdigit);    final  int  r  =  result.round(lostdigit  +  lostdigit);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  multiplyFast(int)	35	None	add
49	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  +  lostdigit);  Final  int  r  =  result.round(lostdigit  +  lostdigit);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  +  lostdigit);  Final  int  r  =  result.round(lostdigit  +  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final    int    r    =    result.round(lostdigit    +    lostdigit);    Final  int  r  =  result.round(lostdigit  +  lostdigit);	  	non-compiled	[CE]  not  a  statement	35	None	add
50	[BUG]  [BUGGY]  final  int[]  rh  =  field.getRight();  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int[]  rh  =  field.getRight();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int[]  rh  =  field.getRight();	  final    int[]    rh    =    field.getField();    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	44	None	replace
51	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  }	  if(mant!=    null)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    rh;    rh    =    r    /    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
52	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    result.shiftRight();    }    	non-compiled	[CE]  cannot  find  symbol  i	27	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	final  int  r  =  mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    result.shiftRight();    }    	compilable	  [FE]  AssertionError  	27	1	replace
54	[BUG]  [BUGGY]  final  int  r  =  mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[0]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    result.shiftRight();    }    	compilable	  [FE]  AssertionError  	27	1	replace
55	[BUG]  [BUGGY]  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  /  RADIX;  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  /  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  /  RADIX;	  if(mant!=    null)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    result[i]    *    x    +    rh;    rh    =    r    /    RADIX;    }    	non-compiled	[CE]  cannot  find  symbol  i	33	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]        =        x;        result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;	  	compilable	  [FE]  AssertionError  	14	1	add
57	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        x;        result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;	  	compilable	  [FE]  AssertionError  	14	1	add
58	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  Result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  Result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        x;        result.mant[mant.length-1]    =    x;    Result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;	  	non-compiled	[CE]  cannot  find  symbol  Result	14	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-2]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]        =        x;        result.mant[mant.length-1]    =    x;    result.mant[mant.length-2]  =  x;  result.mant[mant.length-1]  =  x;	  	compilable	  [FE]  AssertionError  	14	1	add
60	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-2]  =  x;  result.mant[mant.length-1]  =  x;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-2]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        x;        result.mant[mant.length-1]    =    x;    result.mant[mant.length-2]  =  x;  result.mant[mant.length-1]  =  x;	  	compilable	  [FE]  AssertionError  	14	1	add
61	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit,  lostdigit);  [CE]  method  round  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result.round(lostdigit,  lostdigit);	          final    int    r    =    result.round(lostdigit);    final    int    r    =    result.round(lostdigit);    	non-compiled	[CE]  method  round  in  class  Dfp  cannot  be  applied  to  given  types;	23	None	replace
62	[BUG]  [BUGGY]  final  int[]  rh  =  result.getLeft();  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int[]  rh  =  result.getLeft();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int[]  rh  =  result.getLeft();	  final    int[]    rh    =    result.getRight();    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	6	None	replace
63	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  lostdigit;  rh  =  r  /  RADIX;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  lostdigit;  rh  =  r  /  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  lostdigit;  rh  =  r  /  RADIX;  }	  if(mant!=    null)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    /    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
64	[BUG]  [BUGGY]  Result.mant[mant.length-1]  =  lostdigit;  [CE]  cannot  find  symbol  Result  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  Result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	Result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    lostdigit;    Result.mant[mant.length-1]    =    lostdigit;    	non-compiled	[CE]  cannot  find  symbol  Result	13	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]        =        lostdigit;        if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }	  	compilable	  [FE]  AssertionError  	11	1	add
66	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }	  	compilable	  [FE]  AssertionError  	11	1	add
67	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
68	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  Result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  Result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    Result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }	  	non-compiled	[CE]  cannot  find  symbol  Result	11	None	add
69	[BUG]  [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  result,  null);	  result    =    dotrap(result,    lostdigit,    MULTIPLY_TRAP,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	26	None	replace
70	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  Result.mant[mant.length-1]  =  lostdigit;  [CE]  cannot  find  symbol  Result  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  x;  Result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  x;  Result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    x;    Result.mant[mant.length-1]    =    x;    	non-compiled	[CE]  cannot  find  symbol  Result	17	None	replace
71	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  Result.mant[mant.length-1]  =  x;  [CE]  cannot  find  symbol  Result  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  Result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  lostdigit;  Result.mant[mant.length-1]  =  x;	  result.mant[mant.length-1]    =    x;    Result.mant[mant.length-1]    =    x;    	non-compiled	[CE]  cannot  find  symbol  Result	17	None	replace
72	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	non-compiled	[CE]  cannot  find  symbol  i	28	None	replace
73	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  verlorendigit;  rh  =  r  -  rh  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  verlorendigit;  rh  =  r  -  rh  *  RADIX;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  verlorendigit;  rh  =  r  -  rh  *  RADIX;	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	non-compiled	[CE]  cannot  find  symbol  i	28	None	replace
74	[BUG]  [BUGGY]  result.mant[mant.length]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
75	[BUG]  [BUGGY]  result  =  dotrap(result,  DIVIDE_TRAP,  lostdigit,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  DIVIDE_TRAP,  lostdigit,  result,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  DIVIDE_TRAP,  lostdigit,  result,  null);	  result    =    dotrap(result,    DIVIDE_TRAP,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
76	[BUG]  [BUGGY]  result  =  dotrap(result,  DIVIDE_TRAP,  lostdigit,  MULTIPLY_TRAP,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  DIVIDE_TRAP,  lostdigit,  MULTIPLY_TRAP,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  DIVIDE_TRAP,  lostdigit,  MULTIPLY_TRAP,  null);	  result    =    dotrap(result,    DIVIDE_TRAP,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
77	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  lostdigit  =  r  -  verlorendigit  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  lostdigit  =  r  -  verlorendigit  *  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  lostdigit;  lostdigit  =  r  -  verlorendigit  *  RADIX;	  final    int    r    =    mant[i]    *    x    +    rh;    lostdigit    =    r    -    verlorendigit    *    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
78	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[Mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [CE]  cannot  find  symbol  Mant  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[Mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        x;        result.mant[mant.length-1]    =    x;    result.mant[Mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;	  	non-compiled	[CE]  cannot  find  symbol  Mant	14	None	add
79	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  RADIX,  rh);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  RADIX,  rh);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  RADIX,  rh);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    rh);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	46	None	replace
80	[BUG]  [BUGGY]  result  =  dotrap(result,  ALIGN_TRAP,  DIVIDE_TRAP,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  ALIGN_TRAP,  DIVIDE_TRAP,  result,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  ALIGN_TRAP,  DIVIDE_TRAP,  result,  null);	  result    =    dotrap(result,    DIVIDE_TRAP,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
81	[BUG]  [BUGGY]  final  int[]  rh  =  result.getRight()  +  lostdigit;  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int[]  rh  =  result.getRight()  +  lostdigit;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int[]  rh  =  result.getRight()  +  lostdigit;	  final    int[]    rh    =    result.getRight();    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	6	None	replace
82	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result,  NAN_STRING);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result,  NAN_STRING);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result,  NAN_STRING);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	40	None	replace
83	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  }	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
84	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
85	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[Mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [CE]  cannot  find  symbol  Mant  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[Mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    result.mant[Mant.length-1]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	non-compiled	[CE]  cannot  find  symbol  Mant	9	None	add
86	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  RADIX);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  RADIX);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
87	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
88	[BUG]  [BUGGY]  if(mant.length!=  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  /  RADIX;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant.length!=  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  /  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant.length!=  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  /  RADIX;  }	  if(mant.length!=    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    rh;    rh    =    r    /    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
89	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  lostdigit;  rh  =  r  /  RADIX;  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  lostdigit;  rh  =  r  /  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  RADIX  +  lostdigit;  rh  =  r  /  RADIX;	  final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    /    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
90	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight();  }	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    result.shiftRight();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
91	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight()  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight()  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight()	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    result.shiftRight();    }    	non-compiled	[CE]  ';'  expected	27	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(rh  <  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]  =  lostdigit;  if(rh  <  0)  {  result.mant[mant.length-1]  =  lostdigit;  }	  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    	compilable	  [FE]  AssertionError  	12	1	replace
93	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(rh  <  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(rh  <  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  lostdigit;  if(rh  <  0)  {  result.mant[mant.length-1]  =  lostdigit;  }	  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    	compilable	  [FE]  AssertionError  	12	1	replace
94	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  lostdigit;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
95	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  lostdigit;  }	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
96	[BUG]  [BUGGY]  result.mant[1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[1]  =  x;  }  else  {  result.shiftRight();  }  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[1]  =  x;  }  else  {  result.shiftRight();  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[1]  =  x;  }  else  {  result.shiftRight();  }	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    else    {    result.shiftRight();    }    	non-compiled	[CE]  ')'  expected	48	None	replace
97	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  null);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	25	None	replace
98	[BUG]  [BUGGY]  result  =  dotrap(result,  RADIX,  result,  lostdigit,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  RADIX,  result,  lostdigit,  MULTIPLY_TRAP);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  RADIX,  result,  lostdigit,  MULTIPLY_TRAP);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    RADIX);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	47	None	replace
99	[BUG]  [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    RADIX);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	47	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  -  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	final  int  r  =  result.round(lostdigit  -  lostdigit);	  final    int    r    =    result.round(lostdigit    +    lostdigit);    	compilable	  [FE]  AssertionError  	36	1	replace
101	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  -  lostdigit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  -  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result.round(lostdigit  -  lostdigit);	  final    int    r    =    result.round(lostdigit    +    lostdigit);    	compilable	  [FE]  AssertionError  	36	1	replace
102	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  lostdigit  =  r  -  lostdigit  *  RADIX;  }	  if(mant!=    null)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    rh;    lostdigit    =    r    -    lostdigit    *    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
103	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  %  RADIX;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  %  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result[i]  *  x  +  rh;  rh  =  r  %  RADIX;  }	  if(mant!=    null)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    result[i]    *    x    +    rh;    rh    =    r    /    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
104	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  }	          if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    result.mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
105	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX	          if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    result.mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
106	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  y;  [CE]  cannot  find  symbol  y  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  y;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        x;        result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  y;	  	non-compiled	[CE]  cannot  find  symbol  y	14	None	add
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  0;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]  =  0;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  0;  }	  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    	compilable	  [FE]  AssertionError  	12	1	replace
108	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  0;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  0;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  0;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  0;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  0;  }	  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    	compilable	  [FE]  AssertionError  	12	1	replace
109	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  lostdigit);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  lostdigit);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
110	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  result.mant[Mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [CE]  cannot  find  symbol  Mant  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  result.mant[Mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        if(mant.length-1    <    lostdigit)    {    result.mant[mant.length-1]    =    lostdigit;    }    result.mant[Mant.length-1]  =  lostdigit;  if(mant.length-1  <  lostdigit)  {  result.mant[mant.length-1]  =  lostdigit;  }	  	non-compiled	[CE]  cannot  find  symbol  Mant	11	None	add
111	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  adiff;  lostdigit  =  r  -  lostdigit  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  adiff;  lostdigit  =  r  -  lostdigit  *  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  adiff;  lostdigit  =  r  -  lostdigit  *  RADIX;	  final    int    r    =    mant[i]    *    x    +    rh;    lostdigit    =    r    -    lostdigit    *    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
112	[BUG]  [BUGGY]  result.length[mant.length-1]  =  0;  [CE]  cannot  find  symbol  length  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.length[mant.length-1]  =  0;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.length[mant.length-1]  =  0;	  result.mant[mant.length-1]    =    0;    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[0]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    result.mant[0]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	compilable	  [FE]  AssertionError  	9	1	add
114	[BUG]  [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[0]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]    =    lostdigit;    result.mant[mant.length-1]  =  lostdigit;  result.mant[0]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]        =        lostdigit;        result.mant[mant.length-1]    =    lostdigit;    result.mant[0]  =  lostdigit;  result.mant[mant.length-1]  =  lostdigit;	  	compilable	  [FE]  AssertionError  	9	1	add
115	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	result.mant[mant.length]  =  x;	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
116	[BUG]  [BUGGY]  result.mant[mant.length]  =  x;  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length]  =  x;  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length]  =  x;	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
117	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  /  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	final  int  r  =  result.round(lostdigit  /  lostdigit);	  final    int    r    =    result.round(lostdigit    +    lostdigit);    	compilable	  [FE]  ArithmeticException  	36	1	replace
118	[BUG]  [BUGGY]  final  int  r  =  result.round(lostdigit  /  lostdigit);  [FE]  ArithmeticException  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  result.round(lostdigit  /  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  result.round(lostdigit  /  lostdigit);	  final    int    r    =    result.round(lostdigit    +    lostdigit);    	compilable	  [FE]  ArithmeticException  	36	1	replace
119	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  lostdigit  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  lostdigit  *  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  lostdigit  *  RADIX;	  final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    /    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
120	[BUG]  [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  lostdigit);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  LESS_THAN_TRAP,  MULTIPLY_TRAP,  lostdigit);	  result    =    dotrap(result,    MULTIPLY_TRAP,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	37	None	replace
121	[BUG]  [BUGGY]  if(mant.length  ==  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant.length  ==  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant.length  ==  0)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  lostdigit;  rh  =  r  -  rh  *  RADIX;  result.shiftRight	  if(mant.length    ==    0)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    -    rh    *    RADIX;    result.shiftRight();    }    	non-compiled	[CE]  not  a  statement	27	None	replace
122	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  x  +  adiff;  lostdigit  =  r  -  verlorendigit  *  RADIX;  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  final  int  r  =  mant[i]  *  x  +  adiff;  lostdigit  =  r  -  verlorendigit  *  RADIX;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	final  int  r  =  mant[i]  *  x  +  adiff;  lostdigit  =  r  -  verlorendigit  *  RADIX;	  final    int    r    =    mant[i]    *    x    +    rh;    lostdigit    =    r    -    verlorendigit    *    RADIX;    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
123	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX,  ERR_SCALE);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX,  ERR_SCALE);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX,  ERR_SCALE);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    RADIX);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	47	None	replace
124	[BUG]  [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  /  RADIX;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  /  RADIX;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	if(mant!=  null)  {  for(int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  result.mant[i]  *  x  +  lostdigit;  rh  =  r  /  RADIX;  }	  if(mant!=    null)    {    for(int    i    =    0;    i    <    mant.length;    i++)    {    final    int    r    =    mant[i]    *    x    +    lostdigit;    rh    =    r    /    RADIX;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
125	[BUG]  [BUGGY]  result  =  dotrap(result,  DIVIDE_TRAP,  LESS_THAN_TRAP,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  DIVIDE_TRAP,  LESS_THAN_TRAP,  result,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  DIVIDE_TRAP,  LESS_THAN_TRAP,  result,  null);	  result    =    dotrap(result,    DIVIDE_TRAP,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
126	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-2]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  else  {  result.shiftRight();  }  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-2]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  else  {  result.shiftRight();  }  [BUGGY]      }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result.mant[mant.length-1]  =  x;  if(mant.length-2]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  else  {  result.shiftRight();  }	  result.mant[mant.length-1]    =    x;    if(mant.length-1]    ==    0)    {    result.mant[mant.length-1]    =    x;    }    else    {    result.shiftRight();    }    	non-compiled	[CE]  ')'  expected	48	None	replace
127	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  lostdigit,  rh);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  lostdigit,  rh);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  lostdigit,  rh);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit,    rh);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	46	None	replace
