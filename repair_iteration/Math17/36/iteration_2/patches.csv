bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  MULTIPLY_TRAP),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,String)  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  MULTIPLY_TRAP),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  MULTIPLY_TRAP),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    RADIX),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,String)	25	None	replace
2	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    RADIX),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	25	None	replace
3	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize()),  field);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize()),  field);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize()),  field);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getSize()),    result);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
4	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  MULTIPLY_TRAP));  [CE]  no  suitable  method  found  for  newInstance(Dfp,String)  [FE]            AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  MULTIPLY_TRAP));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  MULTIPLY_TRAP));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    RADIX));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,String)	31	None	replace
5	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]              AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    RADIX));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	31	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans        =        0;        nans    =    0;    result.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
7	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans        =        0;        nans    =    0;    result.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
8	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  Result.nans  =  0;  nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  Result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans        =        0;        nans    =    0;    Result.nans  =  0;  nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	7	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans        =        0;        nans    =    0;    nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
10	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans        =        0;        nans    =    0;    nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
11	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  field,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  field,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  field,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	22	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans    =    SNAN;    result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	26	1	add
13	[BUG]  [BUGGY]  result.nans  =  SNAN;  result.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans    =    SNAN;    result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	26	1	add
14	[BUG]  [BUGGY]  result.nans  =  SNAN;  Result.nans  =  SNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  SNAN;  Result.nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans    =    SNAN;    Result.nans  =  SNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	26	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans    =    SNAN;    nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	26	1	add
16	[BUG]  [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans    =    SNAN;    nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	26	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans        =        0;        result.nans    =    0;    result.nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
18	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans        =        0;        result.nans    =    0;    result.nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
19	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  Result.nans  =  0;  result.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  Result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans        =        0;        result.nans    =    0;    Result.nans  =  0;  result.nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	4	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans        =        0;        result.nans    =    0;    nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
21	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans        =        0;        result.nans    =    0;    nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
22	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	19	None	replace
23	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	12	None	replace
24	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	35	None	replace
25	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);  [CE]  cannot  find  symbol  FLAG_INT  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	35	None	replace
26	[BUG]  [BUGGY]  Result.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  Result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	Result.nans  =  0;	  result.nans    =    0;    Result.nans    =    0;    	non-compiled	[CE]  cannot  find  symbol  Result	6	None	replace
27	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(x),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(x),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	3	None	replace
28	[BUG]  [BUGGY]  int  mant  =  field.getItemCount(result.nans);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  int  mant  =  field.getItemCount(result.nans);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	int  mant  =  field.getItemCount(result.nans);	          int    mant    =    field.getItemCount(x);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
29	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);	  	compilable	  [FE]  NullPointerException  	29	1	add
30	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);	  	compilable	  [FE]  NullPointerException  	29	1	add
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));	  	compilable	  [FE]  NullPointerException  	29	1	add
32	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));	  	compilable	  [FE]  NullPointerException  	29	1	add
33	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));	  	compilable	  [FE]  NullPointerException  	29	1	add
34	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));	  	compilable	  [FE]  NullPointerException  	29	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);	  	compilable	  [FE]  AssertionError  	2	1	add
36	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);	  	compilable	  [FE]  AssertionError  	2	1	add
37	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  newInstance(x),  result);  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  newInstance(x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  newInstance(x),  result);	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	2	None	add
38	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x)),  result);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x)),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x)),  result);	  	non-compiled	[CE]  ';'  expected	2	None	add
39	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]              AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    field));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	32	None	replace
40	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  MULTIPLY_TRAP));  [CE]  no  suitable  method  found  for  newInstance(Dfp,String)  [FE]                AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  MULTIPLY_TRAP));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  MULTIPLY_TRAP));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    field));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,String)	32	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans    =    1;    result.nans  =  1;	  	compilable	  [FE]  AssertionError  	20	1	add
42	[BUG]  [BUGGY]  result.nans  =  1;  result.nans  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans    =    1;    result.nans  =  1;	  	compilable	  [FE]  AssertionError  	20	1	add
43	[BUG]  [BUGGY]  result.nans  =  1;  Result.nans  =  1;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  Result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans    =    1;    Result.nans  =  1;	  	non-compiled	[CE]  cannot  find  symbol  Result	20	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result.nans    =    1;    nans  =  1;	  	compilable	  [FE]  AssertionError  	20	1	add
45	[BUG]  [BUGGY]  result.nans  =  1;  nans  =  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans    =    1;    nans  =  1;	  	compilable	  [FE]  AssertionError  	20	1	add
46	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  RADIX,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  RADIX,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  RADIX,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	9	None	replace
47	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  field);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  field);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	9	None	replace
48	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX()),  result);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getX()),    result);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
49	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);  [CE]  cannot  find  symbol  FLAG_NON  [FE]          NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_NON,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	37	None	replace
50	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  null);  [CE]  cannot  find  symbol  FLAG_NON  [FE]            NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_NON,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	37	None	replace
51	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  field),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  field),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  field),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)	1	None	replace
52	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	24	None	replace
53	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	24	None	replace
54	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);	  	compilable	  [FE]  NullPointerException  	16	1	add
55	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);	  	compilable	  [FE]  NullPointerException  	16	1	add
56	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result);	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	16	None	add
57	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);  [CE]  cannot  find  symbol  FLAG_NON  [FE]        NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	16	None	add
58	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	10	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	11	1	add
60	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	11	1	add
61	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()	  	non-compiled	[CE]  ')'  expected	11	None	add
62	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero())  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero())  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero())	  	non-compiled	[CE]  ')'  expected	11	None	add
63	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);  [CE]  cannot  find  symbol  FLAG_INT  [FE]        NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	36	None	replace
64	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  null);  [CE]  cannot  find  symbol  FLAG_INT  [FE]          NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	36	None	replace
65	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  field,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  field,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  field,  newInstance(getZero()));	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	30	None	replace
66	[BUG]  [BUGGY]  int  mant  =  field.getItemCount()  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  int  mant  =  field.getItemCount()  -  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	int  mant  =  field.getItemCount()  -  1;	          int    mant    =    field.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
67	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [CE]  no  suitable  method  found  for  newInstance(Dfp,String)  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,String)	38	None	replace
68	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  field);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  field);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	38	None	replace
69	[BUG]  [BUGGY]  result.nans  =  MAX_EXP;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  MAX_EXP;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result.nans  =  MAX_EXP;	  result.nans    =    ERR_SCALE;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
70	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]            AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	24	None	replace
71	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  cannot  find  symbol  FLAG_INT  [FE]        NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()));	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	36	None	replace
72	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  RADIX,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  RADIX,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  RADIX,  result,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	22	None	replace
73	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  NAN_STRING,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  NAN_STRING,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  NAN_STRING,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    RADIX),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	25	None	replace
74	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    	compilable	  [FE]  NullPointerException  	17	1	replace
75	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    	compilable	  [FE]  NullPointerException  	17	1	replace
76	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  Result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  Result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    Result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);	  	non-compiled	[CE]  cannot  find  symbol  Result	2	None	add
77	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x));	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	2	None	add
78	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  result,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPly_TRAP,    result,    null);    	compilable	  [FE]  NullPointerException  	18	1	replace
79	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  result,  null);  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  result,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPly_TRAP,    result,    null);    	compilable	  [FE]  NullPointerException  	18	1	replace
80	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	29	None	add
81	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  null);	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	16	None	add
82	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  cannot  find  symbol  FLAG_NON  [FE]          NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  newInstance(getZero()));	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_NON,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	37	None	replace
83	[BUG]  [BUGGY]  int  mant  =  field.getItemCount(x,  RADIX);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  int  mant  =  field.getItemCount(x,  RADIX);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	int  mant  =  field.getItemCount(x,  RADIX);	          int    mant    =    field.getItemCount(x);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
84	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  NAN_STRING,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]            AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  NAN_STRING,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  NAN_STRING,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    RADIX));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	31	None	replace
85	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	11	None	add
86	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  RADIX),  result);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  RADIX),  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  RADIX),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getSize()),    result);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
87	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	1	None	replace
88	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getNero()),    result);    	non-compiled	[CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;	13	None	replace
89	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	38	None	replace
90	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [CE]  cannot  find  symbol  FLAG_INT  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  newInstance(getZero()));	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	30	None	replace
91	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]            AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    RADIX));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	31	None	replace
92	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  x));  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  x));  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  x));	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getSize()),    result);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
93	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  x));  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  x));  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getSize(),  x));	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getSize()),    result);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
94	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	1	None	replace
95	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	19	None	replace
96	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]        NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	36	None	replace
97	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX(),  result);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX(),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX(),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getX()),    result);    	non-compiled	[CE]  ')'  expected	28	None	replace
98	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX(),  result);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX(),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  trap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getX(),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getX()),    result);    	non-compiled	[CE]  ')'  expected	28	None	replace
99	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);  [CE]  cannot  find  symbol  FLAG_INT  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	16	None	add
100	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  result,  null);	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	16	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  return  result;  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	2	1	add
102	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  return  result;  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	2	1	add
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  }	  	compilable	  [FE]  AssertionError  	2	1	add
104	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x),    result);    if(x  <  0  ||  x  >  RADIX)  {  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x),  result);  }	  	compilable	  [FE]  AssertionError  	2	1	add
105	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result);  [CE]  cannot  find  symbol  FLAG_NON  [FE]          NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result    =    dotrap(DfpField.FLAG_NON,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	37	None	replace
106	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  result,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	22	None	replace
107	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]    AssertionError    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	11	None	add
108	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);  [CE]  cannot  find  symbol  FLAG_INT  [FE]    NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  result,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	29	None	add
109	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);  [CE]  cannot  find  symbol  FLAG_NON  [FE]      NullPointerException    [CONTEXT]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  newInstance(getZero()));  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        result,        null);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    result,    newInstance(getZero()));    result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  result,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	29	None	add
