bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
2	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
4	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
5	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x  ==  0)  {  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x  ==  0)  {  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x  ==  0)  {  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getZero());  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result  =  newInstance(getZero());  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  AssertionError  	52	1	replace
7	[BUG]  [BUGGY]  result  =  newInstance(getZero());  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getZero());  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getZero());  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  AssertionError  	52	1	replace
8	[BUG]  [BUGGY]  result  =  dotrap(DfpField.INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  cannot  find  symbol  INVALID  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  cannot  find  symbol  INVALID	37	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result    =    newInstance(this);    result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	33	1	add
10	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  newInstance(getZero());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result    =    newInstance(this);    result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	33	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	33	1	add
12	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	33	1	add
13	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  newInstance(getNumber());  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(getNumber());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result    =    newInstance(this);    result  =  newInstance(getNumber());	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	13	1	add
15	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	13	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	13	1	add
17	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	13	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
19	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
21	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
23	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x!=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	53	1	add
25	[BUG]  [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x!=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	53	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x!=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	53	1	add
27	[BUG]  [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x!=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	53	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x!=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	53	1	add
29	[BUG]  [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x!=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	53	1	add
30	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [CE]  no  suitable  method  found  for  newInstance(Dfp,String)  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,String)	36	None	replace
31	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	36	None	replace
32	[BUG]  [BUGGY]  result  =  dotrap(DfpField.SNAN_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  cannot  find  symbol  SNAN_INVALID  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.SNAN_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.SNAN_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.SNAN_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  cannot  find  symbol  SNAN_INVALID	23	None	replace
33	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x  +  1);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x  +  1);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x  +  1);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x);    	non-compiled	[CE]  ')'  expected	43	None	replace
34	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	61	1	add
36	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	61	1	add
37	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
38	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
39	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	39	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(getZero());        if(getZero()!=    null)    {    result    =    newInstance(getZero());    }    result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	55	1	add
41	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(getZero()!=    null)    {    result    =    newInstance(getZero());    }    result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	55	1	add
42	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  Result  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  Result  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(getZero()!=    null)    {    result    =    newInstance(getZero());    }    Result  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(getZero());        if(getZero()!=    null)    {    result    =    newInstance(getZero());    }    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	55	1	add
44	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(getZero()!=    null)    {    result    =    newInstance(getZero());    }    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	55	1	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(getZero());        result    =    newInstance(getZero());    result  =  newInstance(getZero());  result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	30	1	add
46	[BUG]  [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        result    =    newInstance(getZero());    result  =  newInstance(getZero());  result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	30	1	add
47	[BUG]  [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  Result  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  Result  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        result    =    newInstance(getZero());    Result  result  =  newInstance(getZero());  result  =  newInstance(getZero());	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
48	[BUG]  [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  result  =  getZero());  result  =  newInstance(getZero());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  result  =  getZero());  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        result    =    newInstance(getZero());    result  =  getZero());  result  =  newInstance(getZero());	  	non-compiled	[CE]  ';'  expected	30	None	add
49	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  field);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  field);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	10	None	replace
50	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  x),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero(),  x),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	10	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	44	1	add
52	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	44	1	add
53	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
54	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  Result  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  Result  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    Result  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  cannot  find  symbol	44	None	add
55	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FIELD_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FIELD_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FIELD_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	62	None	replace
56	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }	          result    =    newInstance(getZero());    if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
57	[BUG]  [BUGGY]  result  =  newInstance(getNaN(),  field);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getNaN(),  field);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getNaN(),  field);	  result    =    newInstance(getNaN());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  0;  result.nans  =  0;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result.nans    =    0;    result.nans  =  0;	  	compilable	  [FE]  AssertionError  	27	1	add
59	[BUG]  [BUGGY]  result.nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  0;  result.nans  =  0;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans    =    0;    result.nans  =  0;	  	compilable	  [FE]  AssertionError  	27	1	add
60	[BUG]  [BUGGY]  result.nans  =  0;  Result.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  0;  Result.nans  =  0;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans    =    0;    Result.nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	27	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  0;  nans  =  0;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result.nans    =    0;    nans  =  0;	  	compilable	  [FE]  AssertionError  	27	1	add
62	[BUG]  [BUGGY]  result.nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  0;  nans  =  0;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans    =    0;    nans  =  0;	  	compilable	  [FE]  AssertionError  	27	1	add
63	[BUG]  [BUGGY]  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    x    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  incompatible  types	60	None	replace
64	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	49	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	24	1	add
66	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	24	1	add
67	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	24	1	add
69	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	24	1	add
70	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
71	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
72	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
74	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
75	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  Result.nans  =  QNAN;  result.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  Result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    Result.nans  =  QNAN;  result.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	2	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
77	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
78	[BUG]  [BUGGY]  if(nans  ==  INFINITE)  {  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  INFINITE)  {  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(nans  ==  INFINITE)  {  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
79	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]              AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  x,  newInstance(getZero(),  MULTIPLY_TRAP));	  result    =    dotrap(DfpField.FLAG_FACTOR,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	59	None	replace
80	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  FINITE)  {  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(nans  ==  FINITE)  {  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    If(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
81	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG	  	non-compiled	[CE]  ')'  expected	11	None	add
82	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(Df  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(Df  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(Df	  	non-compiled	[CE]  ')'  expected	11	None	add
83	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	57	1	add
85	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	57	1	add
86	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    if(x  ==  0)  {  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
87	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  Result  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  Result  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    Result  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  cannot  find  symbol	57	None	add
88	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newIn  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newIn  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newIn	  	non-compiled	[CE]  ')'  expected	38	None	add
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	38	1	add
90	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	38	1	add
91	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance	  	non-compiled	[CE]  ')'  expected	38	None	add
92	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero());  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero());	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero());    	non-compiled	[CE]  ')'  expected	48	None	replace
93	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero());  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero());	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero());    	non-compiled	[CE]  ')'  expected	48	None	replace
94	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	7	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	19	1	add
96	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	19	1	add
97	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
98	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  getInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  getInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  getInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result.nans    =    SNAN;    result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	41	1	add
100	[BUG]  [BUGGY]  result.nans  =  SNAN;  result.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans    =    SNAN;    result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	41	1	add
101	[BUG]  [BUGGY]  result.nans  =  SNAN;  Result.nans  =  SNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  SNAN;  Result.nans  =  SNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans    =    SNAN;    Result.nans  =  SNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	41	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result.nans    =    SNAN;    nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	41	1	add
103	[BUG]  [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans    =    SNAN;    nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	41	1	add
104	[BUG]  [BUGGY]  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
105	[BUG]  [BUGGY]  result.nans  =  NAN;  nans  =  NAN;  [CE]  cannot  find  symbol  NAN  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  NAN;  nans  =  NAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans  =  NAN;  nans  =  NAN;	          result.nans    =    QNAN;    nans    =    QNAN;    	non-compiled	[CE]  cannot  find  symbol  NAN	6	None	replace
106	[BUG]  [BUGGY]  result  =  newInstance(getField(),  field);  [CE]  no  suitable  method  found  for  newInstance(DfpField,DfpField)  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getField(),  field);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getField(),  field);	  result    =    newInstance(getField());    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(DfpField,DfpField)	17	None	replace
107	[BUG]  [BUGGY]  result  =  newInstance(x,  getField());  [CE]  no  suitable  method  found  for  newInstance(int,DfpField)  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(x,  getField());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(x,  getField());	  result    =    newInstance(getField());    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(int,DfpField)	17	None	replace
108	[BUG]  [BUGGY]  Result  result  =  newInstance(getZero());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  Result  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	Result  result  =  newInstance(getZero());	          result    =    newInstance(getZero());    Result    result    =    newInstance(getZero());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result.nans        =        QNAN;        nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	5	1	add
110	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	5	1	add
111	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  Result.nans  =  QNAN;  nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  Result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    Result.nans  =  QNAN;  nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	5	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result.nans        =        QNAN;        nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	5	1	add
113	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	5	1	add
114	[BUG]  [BUGGY]  result  =  newInstance(getNaN());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getNaN());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getNaN());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	          result    =    newInstance(getZero());    if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
115	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  field,  newInstance(getZero()));  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]              AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  field,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  field,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_FACTOR,    x,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	1	None	replace
116	[BUG]  [BUGGY]  result  =  newInstance(getZero(),  x,  field);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int,DfpField)  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getZero(),  x,  field);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getZero(),  x,  field);	  result    =    newInstance(getZero(),    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int,DfpField)	40	None	replace
117	[BUG]  [BUGGY]  result  =  newInstance(getZero(),  x,  field.setIEEEFlagsBits(DfpField.FLAG_INVALID));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getZero(),  x,  field.setIEEEFlagsBits(DfpField.FLAG_INVALID));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getZero(),  x,  field.setIEEEFlagsBits(DfpField.FLAG_INVALID));	  result    =    newInstance(getZero(),    x);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
119	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
121	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
123	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	15	1	add
124	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
125	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  field,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
126	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MIN_EXP,  newInstance(getZero()));  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]              AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MIN_EXP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  MIN_EXP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_FACTOR,    x,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	1	None	replace
127	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	39	None	replace
128	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  Result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    Result  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	19	None	add
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	19	1	add
130	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	19	1	add
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  INFINITE  &&  x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(nans  ==  INFINITE  &&  x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	16	1	replace
132	[BUG]  [BUGGY]  if(nans  ==  INFINITE  &&  x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(nans  ==  INFINITE  &&  x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(nans  ==  INFINITE  &&  x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	16	1	replace
133	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	7	None	replace
134	[BUG]  [BUGGY]  result  =  newInstance(getNumber());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getNumber());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getNumber());	  result    =    newInstance(this);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	compilable	  [FE]  AssertionError  	62	1	replace
136	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  ALIGN_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	compilable	  [FE]  AssertionError  	62	1	replace
137	[BUG]  [BUGGY]  result  =  newInstance(getZero(),  getZero());  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getZero(),  getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getZero(),  getZero());	          result    =    newInstance(getZero());    Result    result    =    newInstance(getZero());    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	32	None	replace
138	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x  +  1));  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]              AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x  +  1));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x  +  1));	  result    =    dotrap(DfpField.FLAG_FACTOR,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	59	None	replace
139	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	          result    =    newInstance(getZero());    if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    	non-compiled	[CE]  ')'  expected	45	None	replace
140	[BUG]  [BUGGY]  result  =  dotrap(DfpField.INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  INVALID  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  cannot  find  symbol  INVALID	37	None	replace
141	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result    =    newInstance(this);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	33	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result    =    newInstance(this);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	33	1	add
143	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result    =    newInstance(this);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	33	1	add
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  FINITE;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result.nans  =  FINITE;	  result.nans    =    SNAN;    	compilable	  [FE]  AssertionError  	42	1	replace
145	[BUG]  [BUGGY]  result.nans  =  FINITE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result.nans  =  FINITE;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result.nans  =  FINITE;	  result.nans    =    SNAN;    	compilable	  [FE]  AssertionError  	42	1	replace
146	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero(),  x));  [CE]  cannot  find  symbol  X  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero(),  x));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  X	36	None	replace
147	[BUG]  [BUGGY]  result  =  newInstance(getZero(),  x,  nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int,byte)  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getZero(),  x,  nans);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getZero(),  x,  nans);	  result    =    newInstance(getZero(),    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int,byte)	40	None	replace
148	[BUG]  [BUGGY]  result  =  newInstance(getZero(),  x,  SNAN);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int,byte)  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getZero(),  x,  SNAN);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getZero(),  x,  SNAN);	  result    =    newInstance(getZero(),    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int,byte)	40	None	replace
149	[BUG]  [BUGGY]  result  =  newInstance(getField(),  x);  [CE]  no  suitable  method  found  for  newInstance(DfpField,int)  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getField(),  x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getField(),  x);	  result    =    newInstance(getField());    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(DfpField,int)	17	None	replace
150	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  Result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  Result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    Result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  cannot  find  symbol  Result	44	None	add
151	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result	  	non-compiled	[CE]  not  a  statement	44	None	add
152	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  Result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  Result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    Result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  cannot  find  symbol  Result	57	None	add
153	[BUG]  [BUGGY]  result  =  newInstance(getNaN(),  x);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(getNaN(),  x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(getNaN(),  x);	  result    =    newInstance(getNaN());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
154	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP	  	non-compiled	[CE]  ')'  expected	38	None	add
155	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID	  	non-compiled	[CE]  ')'  expected	61	None	add
156	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FL  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FL  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FL	  	non-compiled	[CE]  ')'  expected	11	None	add
157	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(Dfp  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(Dfp  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(Dfp	  	non-compiled	[CE]  ')'  expected	11	None	add
158	[BUG]  [BUGGY]  result  =  dotrap(DfpField.SNAN_INVALID);  [CE]  cannot  find  symbol  SNAN_INVALID  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.SNAN_INVALID);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.SNAN_INVALID);	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.SNAN_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  cannot  find  symbol  SNAN_INVALID	23	None	replace
159	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()));  [CE]  cannot  find  symbol  X  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  X	49	None	replace
160	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)	9	None	replace
161	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x);	  	non-compiled	[CE]  ')'  expected	21	None	add
162	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG	  	non-compiled	[CE]  ')'  expected	13	None	add
163	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero());    	non-compiled	[CE]  ')'  expected	48	None	replace
164	[BUG]  [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  Result  =  newInstance(getZero());  result  =  newInstance(getZero());  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  Result  =  newInstance(getZero());  result  =  newInstance(getZero());  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        result    =    newInstance(getZero());    Result  =  newInstance(getZero());  result  =  newInstance(getZero());	  	non-compiled	[CE]  cannot  find  symbol  Result	30	None	add
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(getZero());        result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	30	1	add
166	[BUG]  [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	30	1	add
167	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()	  	non-compiled	[CE]  ')'  expected	24	None	add
168	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  if(getZero()!=  null)  {  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  if(getZero()!=  null)  {  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(getZero()!=    null)    {    result    =    newInstance(getZero());    }    if(getZero()!=  null)  {  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
169	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  Result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  Result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(getZero()!=    null)    {    result    =    newInstance(getZero());    }    Result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  cannot  find  symbol  Result	55	None	add
170	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
171	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
173	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	21	1	add
174	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newIn  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newIn  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newIn	  	non-compiled	[CE]  ';'  expected	21	None	add
175	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG	  	non-compiled	[CE]  ')'  expected	15	None	add
176	[BUG]  [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                if(x        ==        0)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(x);        }        if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
177	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
178	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    result  =  newInstance(x);  if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
180	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
182	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    if(x!=  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x  >=  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	51	1	add
183	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero(),  field));  [CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)  [FE]              AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero(),  field));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero(),  field));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)	8	None	replace
184	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  DIVIDE_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  DIVIDE_TRAP,  newInstance(getZero()));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  DIVIDE_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
185	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()	  	non-compiled	[CE]  ')'  expected	38	None	add
186	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
187	[BUG]  [BUGGY]  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  Result  [FE]          AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    Result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  Result	26	None	replace
188	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }	          result    =    newInstance(getZero());    if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	47	1	replace
189	[BUG]  [BUGGY]  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( " ");  }	          result    =    newInstance(getZero());    if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	47	1	replace
190	[BUG]  [BUGGY]  result  =  newInstance(this,  x);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this,  x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  newInstance(this,  x);	  result    =    newInstance(this);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	34	None	replace
191	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	22	1	replace
192	[BUG]  [BUGGY]  if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  }	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	22	1	replace
193	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]              AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);	  result    =    dotrap(DfpField.FLAG_FACTOR,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	59	None	replace
194	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
195	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	46	1	add
196	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	46	1	add
197	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	compilable	  [FE]  AssertionError  	39	1	replace
198	[BUG]  [BUGGY]  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  }	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	compilable	  [FE]  AssertionError  	39	1	replace
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    if(x!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
200	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  if(x!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    if(x!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
201	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  x  =  newInstance(x);  result  =  newInstance(x);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  x  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    x  =  newInstance(x);  result  =  newInstance(x);	  	non-compiled	[CE]  incompatible  types	19	None	add
202	[BUG]  [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]          result    =    newInstance(getZero());    if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	                result        =        newInstance(getZero());        if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance	  	non-compiled	[CE]  ';'  expected	44	None	add
203	[BUG]  [BUGGY]  if(x  <  0)  {  field.setFLAG_INVALID;  result  =  newInstance(x);  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  <  0)  {  field.setFLAG_INVALID;  result  =  newInstance(x);  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x  <  0)  {  field.setFLAG_INVALID;  result  =  newInstance(x);  }	          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x    >=    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
204	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field));  [CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field));  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)	49	None	replace
205	[BUG]  [BUGGY]  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
206	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.FLAG_INVALID);	          if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    if(x    ==    0)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	14	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  AssertionError  	52	1	replace
208	[BUG]  [BUGGY]  if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x  ==  0)  {  result  =  newInstance(x);  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  AssertionError  	52	1	replace
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	nans  =  QNAN;	          result.nans    =    QNAN;    nans    =    QNAN;    	compilable	  [FE]  AssertionError  	6	1	replace
210	[BUG]  [BUGGY]  nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  nans  =  QNAN;  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	nans  =  QNAN;	          result.nans    =    QNAN;    nans    =    QNAN;    	compilable	  [FE]  AssertionError  	6	1	replace
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	33	1	add
212	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	33	1	add
213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	          result    =    newInstance(getZero());    if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	45	1	replace
214	[BUG]  [BUGGY]  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	if(x  ==  0)  {  result  =  newInstance(getZero());  }  else  {  result  =  newInstance(getZero());  }	          result    =    newInstance(getZero());    if(x    ==    0)    {    result    =    newInstance(getZero());    }    else    {    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	45	1	replace
215	[BUG]  [BUGGY]  result  =  dotrap(DfpField.SNAN_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  SNAN_INVALID  [FE]            AssertionError      [CONTEXT]      Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);      [BUGGY]  result  =  dotrap(DfpField.SNAN_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	result  =  dotrap(DfpField.SNAN_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    newInstance(x);    if(x!=    0)    {    result    =    newInstance(x);    }    else    {    field.setIEEEFlagsBits(DfpField.SNAN_INVALID);    result    =    newInstance(x);    }    	non-compiled	[CE]  cannot  find  symbol  SNAN_INVALID	23	None	replace
