bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()),  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	3	None	replace
2	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()),  field);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()),  field);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()),  field);	      result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	3	None	replace
3	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX);  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
4	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  result);  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
5	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()),  field);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()),  field);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()),  field);	      result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	2	None	replace
6	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  RADIX);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  RADIX);	      result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()),    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	1	None	replace
7	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  RADIX);	      result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()),    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	1	None	replace
8	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()));  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	6	None	replace
9	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	5	None	replace
10	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	5	None	replace
11	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	5	None	replace
12	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]          AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x));  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero(),  x));	      result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	2	None	replace
13	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  result,  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  result,  RADIX);  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  result,  RADIX);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
14	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]            AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	3	None	replace
15	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX));  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX));	      result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	6	None	replace
16	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);	      result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    newInstance(getZero()),    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	1	None	replace
17	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  result,  x);  [CE]  cannot  find  symbol  X  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  result,  x);  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  result,  x);	  result    =    dotrap(DfpField.FLAG_INVALID,    RADIX,    result,    x);    	non-compiled	[CE]  cannot  find  symbol  X	4	None	replace
18	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]            AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x),  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	3	None	replace
19	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x));  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x));	      result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	6	None	replace
20	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]          AssertionError    [CONTEXT]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [BUGGY]    return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	5	None	replace
