bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  return  result;  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  return  result;  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  return  result;	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	5	None	replace
2	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	2	None	replace
3	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans,  MULTIPLY_TRAP);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans,  MULTIPLY_TRAP);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    nans);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	9	None	replace
4	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  nans,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  nans,  MULTIPLY_TRAP);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  nans,  MULTIPLY_TRAP);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    nans);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	9	None	replace
5	[BUG]  [BUGGY]  result  =  multiply(x,  DfpField.FLAG_INVALID,  FINITE);  [CE]  no  suitable  method  found  for  multiply(Dfp,int,byte)  [FE]          AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  multiply(x,  DfpField.FLAG_INVALID,  FINITE);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  multiply(x,  DfpField.FLAG_INVALID,  FINITE);	  result    =    multiply(DfpField.FLAG_INVALID,    x,    FINITE);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(Dfp,int,byte)	7	None	replace
6	[BUG]  [BUGGY]  result  =  multiply(x.inVALID,  DfpField.FLAG_INVALID,  FINITE);  [CE]  cannot  find  symbol  inVALID  [FE]            AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  multiply(x.inVALID,  DfpField.FLAG_INVALID,  FINITE);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  multiply(x.inVALID,  DfpField.FLAG_INVALID,  FINITE);	  result    =    multiply(DfpField.FLAG_INVALID,    x,    FINITE);    	non-compiled	[CE]  cannot  find  symbol  inVALID	7	None	replace
7	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
8	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  null);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	add	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	1	1	add
10	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	1	1	add
11	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]      AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	1	None	add
12	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  result);  [CE]  cannot  find  symbol  y  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  result);	  	non-compiled	[CE]  cannot  find  symbol  y	1	None	add
13	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  x,  mant,  result);  [CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  x,  mant,  result);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  trap(DfpField.FLAG_INVALID,  x,  mant,  result);	  result    =    trap(DfpField.FLAG_INVALID,    mant,    x,    result);    	non-compiled	[CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
14	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  mant,  nans,  x,  result);  [CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  mant,  nans,  x,  result);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  trap(DfpField.FLAG_INVALID,  mant,  nans,  x,  result);	  result    =    trap(DfpField.FLAG_INVALID,    mant,    x,    result);    	non-compiled	[CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	add	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	  	compilable	  [FE]  NullPointerException  	3	1	add
16	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	  	compilable	  [FE]  NullPointerException  	3	1	add
17	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  null);  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]      NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  null);	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	3	None	add
18	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  null);  [CE]  cannot  find  symbol  FLAG_INT  [FE]        NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	3	None	add
19	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  mant,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  mant,  result);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  mant,  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    mant,    x,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	6	None	replace
20	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  result);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    mant,    x,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	6	None	replace
21	[BUG]  [BUGGY]  result  =  multiply(x,  DfpField.FLAG_INVALID);  [CE]  no  suitable  method  found  for  multiply(Dfp,int)  [FE]          AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  multiply(x,  DfpField.FLAG_INVALID);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  multiply(x,  DfpField.FLAG_INVALID);	  result    =    multiply(DfpField.FLAG_INVALID,    x,    FINITE);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(Dfp,int)	7	None	replace
22	[BUG]  [BUGGY]  result  =  dotrap(x,  mant,  DfpField.FLAG_INVALID,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(x,  mant,  DfpField.FLAG_INVALID,  result);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(x,  mant,  DfpField.FLAG_INVALID,  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    mant,    x,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	6	None	replace
23	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CE]  final  parameter  x  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	non-compiled	[CE]  final  parameter  x  may  not  be  assigned	1	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	add	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	1	1	add
25	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	1	1	add
26	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [CE]  final  parameter  x  may  not  be  assigned  [FE]    NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	  	non-compiled	[CE]  final  parameter  x  may  not  be  assigned	3	None	add
27	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  null);  [CE]  cannot  find  symbol  y  [FE]      NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  null);	  	non-compiled	[CE]  cannot  find  symbol  y	3	None	add
28	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    nans);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	9	None	replace
29	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  NAN_STRING,  nans);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  NAN_STRING,  nans);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  NAN_STRING,  nans);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    nans);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	9	None	replace
30	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  x,  mant);  [CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  x,  mant);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  trap(DfpField.FLAG_INVALID,  x,  mant);	  result    =    trap(DfpField.FLAG_INVALID,    mant,    x,    result);    	non-compiled	[CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
31	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  x,  null);  [CE]  cannot  find  symbol  FLAG_NON  [FE]    NullPointerException    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  x,  null);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_NON,  MULTIPLY_TRAP,  x,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	3	None	add
32	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  nans);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  nans);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  nans);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    nans);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	9	None	replace
33	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]    AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  result);  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  result);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	1	None	add
34	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  mant,  x,  nans);  [CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;    [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  mant,  x,  nans);  [BUGGY]    return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	result  =  trap(DfpField.FLAG_INVALID,  mant,  x,  nans);	  result    =    trap(DfpField.FLAG_INVALID,    mant,    x,    result);    	non-compiled	[CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
