bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	52	1	add
2	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	52	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	52	1	add
4	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	52	1	add
5	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,	  	non-compiled	[CE]  ')'  expected	52	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	x.nans    =    SNAN;    x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	41	1	add
7	[BUG]  [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    SNAN;    x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	41	1	add
8	[BUG]  [BUGGY]  x.nans  =  SNAN;  (x.nans  =  SNAN);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  SNAN;  (x.nans  =  SNAN);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    SNAN;    (x.nans  =  SNAN);	  	non-compiled	[CE]  not  a  statement	41	None	add
9	[BUG]  [BUGGY]  x.nans  =  SNAN;  (x.nans  =  SNAN;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  SNAN;  (x.nans  =  SNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    SNAN;    (x.nans  =  SNAN;	  	non-compiled	[CE]  ')'  expected	41	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        nans    =    SNAN;    result.nans  =  SNAN;  nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	60	1	add
11	[BUG]  [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  result.nans  =  SNAN;  nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        nans    =    SNAN;    result.nans  =  SNAN;  nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	60	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        nans    =    SNAN;    nans  =  SNAN;  nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	60	1	add
13	[BUG]  [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  nans  =  SNAN;  nans  =  SNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        nans    =    SNAN;    nans  =  SNAN;  nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	60	1	add
14	[BUG]  [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  Result.nans  =  SNAN;  nans  =  SNAN;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    nans  =  SNAN;  Result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        nans    =    SNAN;    Result.nans  =  SNAN;  nans  =  SNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	60	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans    =    1;    result.nans  =  1;	  	compilable	  [FE]  AssertionError  	37	1	add
16	[BUG]  [BUGGY]  result.nans  =  1;  result.nans  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    1;    result.nans  =  1;	  	compilable	  [FE]  AssertionError  	37	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  x.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans    =    1;    x.nans  =  1;	  	compilable	  [FE]  AssertionError  	37	1	add
18	[BUG]  [BUGGY]  result.nans  =  1;  x.nans  =  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  x.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    1;    x.nans  =  1;	  	compilable	  [FE]  AssertionError  	37	1	add
19	[BUG]  [BUGGY]  result.nans  =  1;  Result.nans  =  1;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  Result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    1;    Result.nans  =  1;	  	non-compiled	[CE]  cannot  find  symbol  Result	37	None	add
20	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	36	None	replace
21	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  return  result;  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  return  result;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  return  result;	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	36	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  result.nans  =  x.nans;  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        x.nans    =    x.nans;    result.nans  =  x.nans;  x.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	28	1	add
23	[BUG]  [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  result.nans  =  x.nans;  x.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  result.nans  =  x.nans;  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        x.nans    =    x.nans;    result.nans  =  x.nans;  x.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	28	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  x.nans  =  x.nans;  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        x.nans    =    x.nans;    x.nans  =  x.nans;  x.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	28	1	add
25	[BUG]  [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  x.nans  =  x.nans;  x.nans  =  x.nans;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  x.nans  =  x.nans;  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        x.nans    =    x.nans;    x.nans  =  x.nans;  x.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	28	1	add
26	[BUG]  [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  Result.nans  =  x.nans;  x.nans  =  x.nans;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  Result.nans  =  x.nans;  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        x.nans    =    x.nans;    Result.nans  =  x.nans;  x.nans  =  x.nans;	  	non-compiled	[CE]  cannot  find  symbol  Result	28	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  1;  x.nans  =  1;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	x.nans    =    1;    x.nans  =  1;	  	compilable	  [FE]  AssertionError  	22	1	add
28	[BUG]  [BUGGY]  x.nans  =  1;  x.nans  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  1;  x.nans  =  1;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    1;    x.nans  =  1;	  	compilable	  [FE]  AssertionError  	22	1	add
29	[BUG]  [BUGGY]  x.nans  =  1;  (x.nans  =  1);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  1;  (x.nans  =  1);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    1;    (x.nans  =  1);	  	non-compiled	[CE]  not  a  statement	22	None	add
30	[BUG]  [BUGGY]  x.nans  =  1;  (x.nans  =  1;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  1;  (x.nans  =  1;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    1;    (x.nans  =  1;	  	non-compiled	[CE]  ')'  expected	22	None	add
31	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	33	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  FINITE;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans  =  FINITE;	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    	compilable	  [FE]  AssertionError  	5	1	replace
33	[BUG]  [BUGGY]  result.nans  =  FINITE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  FINITE;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  FINITE;	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    	compilable	  [FE]  AssertionError  	5	1	replace
34	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0));    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	13	None	replace
35	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0));    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  ')'  expected	13	None	replace
36	[BUG]  [BUGGY]  result.nans  =  rsign;  [CE]  cannot  find  symbol  rsign  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  rsign;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  rsign;	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    	non-compiled	[CE]  cannot  find  symbol  rsign	6	None	replace
37	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SN  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SN  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SN	  	non-compiled	[CE]  ';'  expected	4	None	add
38	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }	  	compilable	  [FE]  AssertionError  	4	1	add
40	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }	  	compilable	  [FE]  AssertionError  	4	1	add
41	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	  	compilable	  [FE]  NullPointerException  	34	1	add
42	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	  	compilable	  [FE]  NullPointerException  	34	1	add
43	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  null);  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]      NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  null);	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	34	None	add
44	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  null);  [CE]  cannot  find  symbol  FLAG_INT  [FE]        NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	34	None	add
45	[BUG]  [BUGGY]  x.nans  =  Math.min(result.nans,  1);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(result.nans,  1);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(result.nans,  1);	  x.nans    =    Math.min(result.nans,    0);    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
46	[BUG]  [BUGGY]  x.nans  =  Math.min(result.nans,  2);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(result.nans,  2);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(result.nans,  2);	  x.nans    =    Math.min(result.nans,    0);    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	nans  =  QNAN;	          x.nans    =    QNAN;    (x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	12	1	replace
48	[BUG]  [BUGGY]  nans  =  QNAN;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	nans  =  QNAN;	          x.nans    =    QNAN;    (x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	12	1	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    x.nans  =  0;  result.nans  =  0;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        x.nans    =    0;    result.nans  =  0;  x.nans  =  0;	  	compilable	  [FE]  AssertionError  	17	1	add
50	[BUG]  [BUGGY]  result.nans    =    0;    x.nans  =  0;  result.nans  =  0;  x.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    x.nans  =  0;  result.nans  =  0;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        x.nans    =    0;    result.nans  =  0;  x.nans  =  0;	  	compilable	  [FE]  AssertionError  	17	1	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    x.nans  =  0;  x.nans  =  0;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        x.nans    =    0;    x.nans  =  0;  x.nans  =  0;	  	compilable	  [FE]  AssertionError  	17	1	add
52	[BUG]  [BUGGY]  result.nans    =    0;    x.nans  =  0;  x.nans  =  0;  x.nans  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    x.nans  =  0;  x.nans  =  0;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        x.nans    =    0;    x.nans  =  0;  x.nans  =  0;	  	compilable	  [FE]  AssertionError  	17	1	add
53	[BUG]  [BUGGY]  result.nans    =    0;    x.nans  =  0;  Result.nans  =  0;  x.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    x.nans  =  0;  Result.nans  =  0;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        x.nans    =    0;    Result.nans  =  0;  x.nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	17	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  nans;  result.nans  =  nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans    =    nans;    result.nans  =  nans;	  	compilable	  [FE]  AssertionError  	39	1	add
55	[BUG]  [BUGGY]  result.nans  =  nans;  result.nans  =  nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  nans;  result.nans  =  nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    nans;    result.nans  =  nans;	  	compilable	  [FE]  AssertionError  	39	1	add
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  nans;  nans  =  nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans    =    nans;    nans  =  nans;	  	compilable	  [FE]  AssertionError  	39	1	add
57	[BUG]  [BUGGY]  result.nans  =  nans;  nans  =  nans;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  nans;  nans  =  nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    nans;    nans  =  nans;	  	compilable	  [FE]  AssertionError  	39	1	add
58	[BUG]  [BUGGY]  result.nans  =  nans;  Result.nans  =  nans;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  nans;  Result.nans  =  nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    nans;    Result.nans  =  nans;	  	non-compiled	[CE]  cannot  find  symbol  Result	39	None	add
59	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  x);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  x);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	57	None	replace
60	[BUG]  [BUGGY]  x.nans  =  NAN_STRING;  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  NAN_STRING;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  NAN_STRING;	  x.nans    =    NAN;    	non-compiled	[CE]  incompatible  types	21	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        result.nans    =    0;    result.nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	15	1	add
62	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        result.nans    =    0;    result.nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	15	1	add
63	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  Result.nans  =  0;  result.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  Result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        result.nans    =    0;    Result.nans  =  0;  result.nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	15	None	add
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  if(x.nans  ==  0)  {  result.nans  =  0;  result.nans  =  0;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        result.nans    =    0;    if(x.nans  ==  0)  {  result.nans  =  0;  result.nans  =  0;  }	  	compilable	  [FE]  AssertionError  	15	1	add
65	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  if(x.nans  ==  0)  {  result.nans  =  0;  result.nans  =  0;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  if(x.nans  ==  0)  {  result.nans  =  0;  result.nans  =  0;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        result.nans    =    0;    if(x.nans  ==  0)  {  result.nans  =  0;  result.nans  =  0;  }	  	compilable	  [FE]  AssertionError  	15	1	add
66	[BUG]  [BUGGY]  (nans  ==  QNAN  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  QNAN  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  QNAN  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    QNAN    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	54	None	replace
67	[BUG]  [BUGGY]  (x.nans  ==  QNAN  ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (x.nans  ==  QNAN  ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(x.nans  ==  QNAN  ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    QNAN    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	54	None	replace
68	[BUG]  [BUGGY]  x.nans  =  NON;  [CE]  cannot  find  symbol  NON  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  NON;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  NON;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  cannot  find  symbol  NON	10	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	nans  =  SNAN;	  result.nans    =    SNAN;    nans    =    SNAN;    	compilable	  [FE]  AssertionError  	61	1	replace
70	[BUG]  [BUGGY]  nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	nans  =  SNAN;	  result.nans    =    SNAN;    nans    =    SNAN;    	compilable	  [FE]  AssertionError  	61	1	replace
71	[BUG]  [BUGGY]  result.nans  =  NAN;  [CE]  cannot  find  symbol  NAN  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  NAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  NAN;	  result.nans    =    SNAN;    result.nans    =    SNAN;    	non-compiled	[CE]  cannot  find  symbol  NAN	3	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  result.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        x.nans    =    SNAN;    result.nans  =  SNAN;  x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	58	1	add
73	[BUG]  [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  result.nans  =  SNAN;  x.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  result.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        x.nans    =    SNAN;    result.nans  =  SNAN;  x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	58	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        x.nans    =    SNAN;    x.nans  =  SNAN;  x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	58	1	add
75	[BUG]  [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  x.nans  =  SNAN;  x.nans  =  SNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        x.nans    =    SNAN;    x.nans  =  SNAN;  x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	58	1	add
76	[BUG]  [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  Result.nans  =  SNAN;  x.nans  =  SNAN;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    x.nans  =  SNAN;  Result.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        x.nans    =    SNAN;    Result.nans  =  SNAN;  x.nans  =  SNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	58	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  0;  x.nans  =  0;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	x.nans    =    0;    x.nans  =  0;	  	compilable	  [FE]  AssertionError  	43	1	add
78	[BUG]  [BUGGY]  x.nans  =  0;  x.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  0;  x.nans  =  0;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    0;    x.nans  =  0;	  	compilable	  [FE]  AssertionError  	43	1	add
79	[BUG]  [BUGGY]  x.nans  =  0;  (x.nans  =  0;  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  0;  (x.nans  =  0;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    0;    (x.nans  =  0;	  	non-compiled	[CE]  ')'  expected	43	None	add
80	[BUG]  [BUGGY]  x.nans  =  0;  (x.nans  =  0);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  0;  (x.nans  =  0);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    0;    (x.nans  =  0);	  	non-compiled	[CE]  not  a  statement	43	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	50	1	add
82	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	50	1	add
83	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,	  	non-compiled	[CE]  ')'  expected	50	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	50	1	add
85	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	50	1	add
86	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	7	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	26	1	add
88	[BUG]  [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;  result.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	26	1	add
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	26	1	add
90	[BUG]  [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;  result.nans  =  x.nans;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	26	1	add
91	[BUG]  [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  Result.nans  =  x.nans;  result.nans  =  x.nans;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  Result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        result.nans    =    x.nans;    Result.nans  =  x.nans;  result.nans  =  x.nans;	  	non-compiled	[CE]  cannot  find  symbol  Result	26	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);	  	compilable	  [FE]  AssertionError  	56	1	add
93	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);	  	compilable	  [FE]  AssertionError  	56	1	add
94	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  y);  [CE]  cannot  find  symbol  y  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  y);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  y);	  	non-compiled	[CE]  cannot  find  symbol  y	56	None	add
95	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  d);  [CE]  cannot  find  symbol  d  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  d);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  d);	  	non-compiled	[CE]  cannot  find  symbol  d	56	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  2;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	x.nans  =  2;	  x.nans    =    1;    	compilable	  [FE]  AssertionError  	23	1	replace
97	[BUG]  [BUGGY]  x.nans  =  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  2;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  2;	  x.nans    =    1;    	compilable	  [FE]  AssertionError  	23	1	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	nans  =  x.nans;	  result.nans    =    x.nans;    nans    =    x.nans;    	compilable	  [FE]  AssertionError  	31	1	replace
99	[BUG]  [BUGGY]  nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	nans  =  x.nans;	  result.nans    =    x.nans;    nans    =    x.nans;    	compilable	  [FE]  AssertionError  	31	1	replace
100	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	35	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	30	1	add
102	[BUG]  [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;  nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	30	1	add
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	30	1	add
104	[BUG]  [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;  nans  =  x.nans;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	30	1	add
105	[BUG]  [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  Result.nans  =  x.nans;  nans  =  x.nans;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  Result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        nans    =    x.nans;    Result.nans  =  x.nans;  nans  =  x.nans;	  	non-compiled	[CE]  cannot  find  symbol  Result	30	None	add
106	[BUG]  [BUGGY]  x.nans  =  Math.min(result.nans,  result.nans,  1);  [CE]  no  suitable  method  found  for  min(byte,byte,int)  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(result.nans,  result.nans,  1);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(result.nans,  result.nans,  1);	  x.nans    =    Math.min(result.nans,    mant);    	non-compiled	[CE]  no  suitable  method  found  for  min(byte,byte,int)	25	None	replace
107	[BUG]  [BUGGY]  result.nans  =  NAN;  if(nans  ==  FINITE)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CE]  cannot  find  symbol  NAN  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  NAN;  if(nans  ==  FINITE)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  NAN;  if(nans  ==  FINITE)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  result.nans    =    SNAN;    if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    	non-compiled	[CE]  cannot  find  symbol  NAN	51	None	replace
108	[BUG]  [BUGGY]  result.nans  =  NAN;  if(nans  ==  FINITE)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  return  result;  }  [CE]  cannot  find  symbol  NAN  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  NAN;  if(nans  ==  FINITE)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  NAN;  if(nans  ==  FINITE)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  return  result;  }	  result.nans    =    SNAN;    if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    	non-compiled	[CE]  cannot  find  symbol  NAN	51	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans  =  1;  x.nans  =  0;	  result.nans    =    0;    x.nans    =    0;    	compilable	  [FE]  AssertionError  	18	1	replace
110	[BUG]  [BUGGY]  result.nans  =  1;  x.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  1;  x.nans  =  0;	  result.nans    =    0;    x.nans    =    0;    	compilable	  [FE]  AssertionError  	18	1	replace
111	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    x.mant    ==    FINITE    &&    x.nans[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	49	None	replace
112	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    x.mant    ==    FINITE    &&    x.nans[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	49	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  result.nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        result.nans    =    SNAN;    result.nans  =  SNAN;  result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
114	[BUG]  [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  result.nans  =  SNAN;  result.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  result.nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        result.nans    =    SNAN;    result.nans  =  SNAN;  result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        result.nans    =    SNAN;    nans  =  SNAN;  result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
116	[BUG]  [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  nans  =  SNAN;  result.nans  =  SNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        result.nans    =    SNAN;    nans  =  SNAN;  result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
117	[BUG]  [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  Result.nans  =  SNAN;  result.nans  =  SNAN;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  Result.nans  =  SNAN;  result.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        result.nans    =    SNAN;    Result.nans  =  SNAN;  result.nans  =  SNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	2	None	add
118	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0));    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	48	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	32	1	add
120	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	32	1	add
121	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	32	None	add
122	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	  	compilable	  [FE]  NullPointerException  	32	1	add
123	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [FE]  NullPointerException  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	  	compilable	  [FE]  NullPointerException  	32	1	add
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());	  	compilable	  [FE]  AssertionError  	46	1	add
125	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());	  	compilable	  [FE]  AssertionError  	46	1	add
126	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  getZero());  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  getZero());	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	46	None	add
127	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  asign());  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  asign());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  asign());	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	x.nans  =  x.nans;	  result.nans    =    x.nans;    x.nans    =    x.nans;    	compilable	  [FE]  AssertionError  	29	1	replace
129	[BUG]  [BUGGY]  x.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  x.nans;	  result.nans    =    x.nans;    x.nans    =    x.nans;    	compilable	  [FE]  AssertionError  	29	1	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	9	1	add
131	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	9	1	add
132	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nan  =  QNAN;  x.nans  =  QNAN;  [CE]  cannot  find  symbol  nan  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nan  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nan  =  QNAN;  x.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  nan	9	None	add
133	[BUG]  [BUGGY]  result.nans  =  NEG_INFINITY_STRING;  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  NEG_INFINITY_STRING;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  NEG_INFINITY_STRING;	  result.nans    =    NAN_STRING;    	non-compiled	[CE]  incompatible  types	1	None	replace
134	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  getZero());  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  getZero());	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	47	None	replace
135	[BUG]  [BUGGY]  result.nans  =  Math.min(result.nans,  0);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  Math.min(result.nans,  0);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  Math.min(result.nans,  0);	  result.nans    =    SNAN;    if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
136	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0));  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0));    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	14	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        nans    =    0;    result.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	19	1	add
138	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        nans    =    0;    result.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	19	1	add
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        nans    =    0;    nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	19	1	add
140	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        nans    =    0;    nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	19	1	add
141	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  Result.nans  =  0;  nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  Result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        nans    =    0;    Result.nans  =  0;  nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	19	None	add
142	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	8	None	replace
143	[BUG]  [BUGGY]  (x.nans  =  QNAN);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (x.nans  =  QNAN);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(x.nans  =  QNAN);	          x.nans    =    QNAN;    (x.nans    =    QNAN);    	non-compiled	[CE]  not  a  statement	11	None	replace
144	[BUG]  [BUGGY]  x.nans  =  Math.min(x.nans,  mant.nans);  [CE]  cannot  find  symbol  nans  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(x.nans,  mant.nans);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(x.nans,  mant.nans);	  x.nans    =    Math.min(mant.nans,    x.nans);    	non-compiled	[CE]  cannot  find  symbol  nans	55	None	replace
145	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  }  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG	  	non-compiled	[CE]  ')'  expected	4	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  -1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans  =  -1;	  result.nans    =    SNAN;    if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    	compilable	  [FE]  AssertionError  	51	1	replace
147	[BUG]  [BUGGY]  result.nans  =  -1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  -1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  -1;	  result.nans    =    SNAN;    if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    	compilable	  [FE]  AssertionError  	51	1	replace
148	[BUG]  [BUGGY]  x.nans  =  1;  int  x.nans  =  1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  1;  int  x.nans  =  1;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans    =    1;    int  x.nans  =  1;	  	non-compiled	[CE]  ';'  expected	22	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans    =    1;    nans  =  1;	  	compilable	  [FE]  AssertionError  	37	1	add
150	[BUG]  [BUGGY]  result.nans  =  1;  nans  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    1;    nans  =  1;	  	compilable	  [FE]  AssertionError  	37	1	add
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	32	1	add
152	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }	  	compilable	  [FE]  AssertionError  	32	1	add
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	32	1	add
154	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    if(nans  ==  0)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	32	1	add
155	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  [CE]  final  parameter  x  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());	  	non-compiled	[CE]  final  parameter  x  may  not  be  assigned	46	None	add
156	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  getZero());  [CE]  cannot  find  symbol  y  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  y,  getZero());	  	non-compiled	[CE]  cannot  find  symbol  y	46	None	add
157	[BUG]  [BUGGY]  result.nans  =  QNAN;  if(!(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  QNAN;  if(!(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  QNAN;  if(!(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
158	[BUG]  [BUGGY]  result.nans  =  QNAN;  if(!(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  QNAN;  if(!(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  QNAN;  if(!(nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        result.nans    =    0;    nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	15	1	add
160	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        result.nans    =    0;    nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	15	1	add
161	[BUG]  [BUGGY]  x.nans  =  Math.min(NON_INFINITE,  x.nans);  [CE]  cannot  find  symbol  NON_INFINITE  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(NON_INFINITE,  x.nans);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(NON_INFINITE,  x.nans);	  x.nans    =    Math.min(mant.nans,    x.nans);    	non-compiled	[CE]  cannot  find  symbol  NON_INFINITE	55	None	replace
162	[BUG]  [BUGGY]  x.nans  =  Math.min(result.nans,  NAN_STRING,  mant);  [CE]  no  suitable  method  found  for  min(byte,String,int[])  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(result.nans,  NAN_STRING,  mant);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(result.nans,  NAN_STRING,  mant);	  x.nans    =    Math.min(result.nans,    mant);    	non-compiled	[CE]  no  suitable  method  found  for  min(byte,String,int[])	25	None	replace
163	[BUG]  [BUGGY]  x.nans  =  Math.min(result.nans,  result.length);  [CE]  cannot  find  symbol  length  [FE]                AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(result.nans,  result.length);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(result.nans,  result.length);	  x.nans    =    Math.min(result.nans,    mant);    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
164	[BUG]  [BUGGY]  result.nans  =  NAN_STRING  |  NEG_INFINITY_STRING;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]        AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  NAN_STRING  |  NEG_INFINITY_STRING;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  NAN_STRING  |  NEG_INFINITY_STRING;	  result.nans    =    NAN_STRING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	1	None	replace
165	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  null);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	35	None	replace
166	[BUG]  [BUGGY]  (x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	8	None	replace
167	[BUG]  [BUGGY]  (nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	8	None	replace
168	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  0);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  0);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  0);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	57	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans  =  1;  nans  =  0;	  result.nans    =    0;    nans    =    0;    	compilable	  [FE]  AssertionError  	20	1	replace
170	[BUG]  [BUGGY]  result.nans  =  1;  nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans  =  1;  nans  =  0;	  result.nans    =    0;    nans    =    0;    	compilable	  [FE]  AssertionError  	20	1	replace
171	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  md);  [CE]  cannot  find  symbol  md  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  md);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  md);	  	non-compiled	[CE]  cannot  find  symbol  md	56	None	add
172	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    (x.nans  =  QNAN;  x.nans  =  QNAN);	  	non-compiled	[CE]  ')'  expected	9	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	52	1	add
174	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  result.nans  =  SNAN;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    result.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	52	1	add
175	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    result.nans  =  SNAN;  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x	  	non-compiled	[CE]  ')'  expected	50	None	add
176	[BUG]  [BUGGY]  (x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    x.mant    ==    FINITE    &&    x.nans[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	49	None	replace
177	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  mant,  x,  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  mant,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INT,  mant,  x,  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	33	None	replace
178	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
179	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FL  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FL  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FL	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  nans;  x.nans  =  nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans    =    nans;    x.nans  =  nans;	  	compilable	  [FE]  AssertionError  	39	1	add
181	[BUG]  [BUGGY]  result.nans  =  nans;  x.nans  =  nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  nans;  x.nans  =  nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans    =    nans;    x.nans  =  nans;	  	compilable	  [FE]  AssertionError  	39	1	add
182	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	35	None	replace
183	[BUG]  [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  mant,  x,  result);  [CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  trap(DfpField.FLAG_INVALID,  mant,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result  =  trap(DfpField.FLAG_INVALID,  mant,  x,  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    	non-compiled	[CE]  method  trap  in  class  Dfp  cannot  be  applied  to  given  types;	36	None	replace
184	[BUG]  [BUGGY]  x.nans  =  Math.min(mant.nans,  0);  [CE]  cannot  find  symbol  nans  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(mant.nans,  0);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(mant.nans,  0);	  x.nans    =    Math.min(result.nans,    0);    	non-compiled	[CE]  cannot  find  symbol  nans	45	None	replace
185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	50	1	add
186	[BUG]  [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    return    result;    }    if(result.nans  ==  SNAN)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	50	1	add
187	[BUG]  [BUGGY]  (x.nans  ==  QNAN  ||  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (x.nans  ==  QNAN  ||  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(x.nans  ==  QNAN  ||  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    QNAN    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	54	None	replace
188	[BUG]  [BUGGY]  result.setNans(nans);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.setNans(nans);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.setNans(nans);	  result.nans    =    SNAN;    if(result.nans    ==    SNAN)    {    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
189	[BUG]  [BUGGY]  (x.nans  ==  QNAN  &&  x.mant  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (x.nans  ==  QNAN  &&  x.mant  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(x.nans  ==  QNAN  &&  x.mant  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  (x.nans    ==    FINITE    &&    x.mant    ==    FINITE    &&    x.nans[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	49	None	replace
190	[BUG]  [BUGGY]  x.nans  =  Math.min(result.nans,  QNAN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(result.nans,  QNAN);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(result.nans,  QNAN);	  x.nans    =    Math.min(result.nans,    mant);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
191	[BUG]  [BUGGY]  x.nans  =  Math.min(mant,  result.nans);  [CE]  no  suitable  method  found  for  min(int[],byte)  [FE]                AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  x.nans  =  Math.min(mant,  result.nans);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	x.nans  =  Math.min(mant,  result.nans);	  x.nans    =    Math.min(result.nans,    mant);    	non-compiled	[CE]  no  suitable  method  found  for  min(int[],byte)	25	None	replace
192	[BUG]  [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  if(x.nans!=  null)  {  result.nans  =  x.nans;  result.nans  =  x.nans;  }  [CE]  incomparable  types:  byte  and  <null>  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    result.nans  =  x.nans;  if(x.nans!=  null)  {  result.nans  =  x.nans;  result.nans  =  x.nans;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        result.nans    =    x.nans;    if(x.nans!=  null)  {  result.nans  =  x.nans;  result.nans  =  x.nans;  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	26	None	add
193	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    (x.nans  =  QNAN;  x.nans  =  QNAN;	  	non-compiled	[CE]  ')'  expected	9	None	add
194	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_IGN,  MULTIPLY_TRAP,  x,  null);  [CE]  cannot  find  symbol  FLAG_IGN  [FE]    NullPointerException    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  result  =  dotrap(DfpField.FLAG_IGN,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    result  =  dotrap(DfpField.FLAG_IGN,  MULTIPLY_TRAP,  x,  null);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_IGN	34	None	add
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  result.nans  =  SNAN;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        SNAN;        result.nans    =    SNAN;    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  result.nans  =  SNAN;  }	  	compilable	  [FE]  AssertionError  	2	1	add
196	[BUG]  [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  result.nans  =  SNAN;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  result.nans  =  SNAN;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        result.nans    =    SNAN;    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SNAN;  result.nans  =  SNAN;  }	  	compilable	  [FE]  AssertionError  	2	1	add
197	[BUG]  [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_NON);  result.nans  =  SNAN;  result.nans  =  SNAN;  }  [CE]  cannot  find  symbol  FLAG_NON  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    SNAN;    result.nans  =  SNAN;  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_NON);  result.nans  =  SNAN;  result.nans  =  SNAN;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        SNAN;        result.nans    =    SNAN;    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_NON);  result.nans  =  SNAN;  result.nans  =  SNAN;  }	  	non-compiled	[CE]  cannot  find  symbol  FLAG_NON	2	None	add
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  if(x.nans  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  0;  result.nans  =  0;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        result.nans    =    0;    if(x.nans  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  0;  result.nans  =  0;  }	  	compilable	  [FE]  AssertionError  	15	1	add
199	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  if(x.nans  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  0;  result.nans  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  if(x.nans  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  0;  result.nans  =  0;  }  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        result.nans    =    0;    if(x.nans  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  0;  result.nans  =  0;  }	  	compilable	  [FE]  AssertionError  	15	1	add
200	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  result);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	32	None	add
201	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INSTANCE_TRAP,  MULTIPLY_TRAP,  x,  result);  [CE]  cannot  find  symbol  FLAG_INSTANCE_TRAP  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INSTANCE_TRAP,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INSTANCE_TRAP,  MULTIPLY_TRAP,  x,  result);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INSTANCE_TRAP	32	None	add
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  nans  =  x.nans;  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        x.nans    =    x.nans;    nans  =  x.nans;  x.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	28	1	add
203	[BUG]  [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  nans  =  x.nans;  x.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    x.nans  =  x.nans;  nans  =  x.nans;  x.nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        x.nans    =    x.nans;    nans  =  x.nans;  x.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	28	1	add
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  x.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        nans    =    0;    x.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	19	1	add
205	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  x.nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  x.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        nans    =    0;    x.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	19	1	add
206	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  getZero());  [CE]  cannot  find  symbol  FLAG_INT  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  getZero());	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	46	None	add
207	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INSTANCE_TRAP,  MULTIPLY_TRAP,  x,  getZero());  [CE]  cannot  find  symbol  FLAG_INSTANCE_TRAP  [FE]      AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  getZero());  result  =  dotrap(DfpField.FLAG_INSTANCE_TRAP,  MULTIPLY_TRAP,  x,  getZero());  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    getZero());    result  =  dotrap(DfpField.FLAG_INSTANCE_TRAP,  MULTIPLY_TRAP,  x,  getZero());	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INSTANCE_TRAP	46	None	add
208	[BUG]  [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  x);  [CE]  cannot  find  symbol  FLAG_INT  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  x);  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  x);  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	                result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    x);    result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  x,  x);	  	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	56	None	add
209	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SN  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SN  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  SN	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    	non-compiled	[CE]  ';'  expected	6	None	replace
210	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	if(x.nans  ==  FINITE)  {  result.nans  =  SNAN;  if(!(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG	  result.nans    =    SNAN;    if(!(x.nans    ==    FINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result.nans    =    SNAN;    	non-compiled	[CE]  ')'  expected	6	None	replace
211	[BUG]  [BUGGY]  (x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  (x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  field.setIEEEFlagsBits(DfpField.FLAG	  (x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	8	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    x.nans  =  0;  nans  =  0;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        0;        x.nans    =    0;    nans  =  0;  x.nans  =  0;	  	compilable	  [FE]  AssertionError  	17	1	add
213	[BUG]  [BUGGY]  result.nans    =    0;    x.nans  =  0;  nans  =  0;  x.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    x.nans  =  0;  nans  =  0;  x.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        0;        x.nans    =    0;    nans  =  0;  x.nans  =  0;	  	compilable	  [FE]  AssertionError  	17	1	add
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  x.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	result.nans        =        x.nans;        nans    =    x.nans;    x.nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	30	1	add
215	[BUG]  [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  x.nans  =  x.nans;  nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    x.nans;    nans  =  x.nans;  x.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	result.nans        =        x.nans;        nans    =    x.nans;    x.nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	30	1	add
