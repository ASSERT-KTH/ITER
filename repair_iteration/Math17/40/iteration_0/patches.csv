bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]  result.shiftLeft();  [BUGGY]  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	result.shiftLeft();	result.shiftRight();  	compilable	  [FE]  AssertionError  	79	1	replace
2	[BUG]  [BUGGY]  result.shiftLeft();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]  result.shiftLeft();  [BUGGY]  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft();	result.shiftRight();  	compilable	  [FE]  AssertionError  	79	1	replace
3	[BUG]  [BUGGY]  result.shiftRight(lostdigit);  [CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]  result.shiftRight(lostdigit);  [BUGGY]  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftRight(lostdigit);	result.shiftRight();  	non-compiled	[CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;	79	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    [BUGGY]  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	  	result.shiftRight();  	compilable	  [FE]  AssertionError  	79	1	replace
5	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    [BUGGY]  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	  	result.shiftRight();  	compilable	  [FE]  AssertionError  	79	1	replace
6	[BUG]  [BUGGY]    result.shiftWidth();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    result.shiftWidth();  [BUGGY]  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	    result.shiftWidth();		non-compiled	[CE]  cannot  find  symbol	80	None	add
7	[BUG]  [BUGGY]    result.setWidth(width);  [CE]  cannot  find  symbol  width  [FE]    AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    result.setWidth(width);  [BUGGY]  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	    result.setWidth(width);		non-compiled	[CE]  cannot  find  symbol  width	80	None	add
8	[BUG]  [BUGGY]  result.setRight(lostdigit);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]  result.setRight(lostdigit);  [BUGGY]  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.setRight(lostdigit);	result.shiftRight();  	non-compiled	[CE]  cannot  find  symbol	79	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    if(mant.length  ==  0)  {  result.shiftLeft();  }  [BUGGY]  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	    if(mant.length  ==  0)  {  result.shiftLeft();  }		compilable	  [FE]  AssertionError  	80	1	add
10	[BUG]  [BUGGY]    if(mant.length  ==  0)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    if(mant.length  ==  0)  {  result.shiftLeft();  }  [BUGGY]  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	    if(mant.length  ==  0)  {  result.shiftLeft();  }		compilable	  [FE]  AssertionError  	80	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }		compilable	  [FE]  AssertionError  	80	1	add
12	[BUG]  [BUGGY]    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  [BUGGY]    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }		compilable	  [FE]  AssertionError  	80	1	add
