bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-1]  =  rh;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	result.mant[mant.length-1]    =    rh;    result.mant[mant.length-1]  =  rh;	  	compilable	  [FE]  AssertionError  	3	1	add
2	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-1]  =  rh;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-1]  =  rh;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    rh;    result.mant[mant.length-1]  =  rh;	  	compilable	  [FE]  AssertionError  	3	1	add
3	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  rh;  Result.mant[mant.length-1]  =  rh;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  rh;  Result.mant[mant.length-1]  =  rh;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    rh;    Result.mant[mant.length-1]  =  rh;	  	non-compiled	[CE]  cannot  find  symbol  Result	3	None	add
4	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-1]  =  lh;  [CE]  cannot  find  symbol  lh  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-1]  =  lh;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    rh;    result.mant[mant.length-1]  =  lh;	  	non-compiled	[CE]  cannot  find  symbol  lh	3	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    x;    	compilable	  [FE]  AssertionError  	2	1	replace
6	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  lostdigit;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]  =  lostdigit;	  result.mant[mant.length-1]    =    x;    	compilable	  [FE]  AssertionError  	2	1	replace
7	[BUG]  [BUGGY]  final  int  rh  =  result.round(lostdigit,  lostdigit);  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  final  int  rh  =  result.round(lostdigit,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	final  int  rh  =  result.round(lostdigit,  lostdigit);	          final    int    rh    =    result.round(lostdigit);    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	19	None	replace
8	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  null);	          result    =    dotrap(result,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	31	None	replace
9	[BUG]  [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP,  null);	          result    =    dotrap(result,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	31	None	replace
10	[BUG]  [BUGGY]  result.shiftRight(rh,  x,  lostdigit);  [CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftRight(rh,  x,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftRight(rh,  x,  lostdigit);	  result.shiftRight(x,    lostdigit);    	non-compiled	[CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;	27	None	replace
11	[BUG]  [BUGGY]  result.shiftRight(x,  lostdigit,  rh);  [CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftRight(x,  lostdigit,  rh);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftRight(x,  lostdigit,  rh);	  result.shiftRight(x,    lostdigit);    	non-compiled	[CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;	27	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
13	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
15	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
17	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	14	1	add
19	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	14	1	add
20	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  	  	non-compiled	[CE]  ')'  expected	14	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)	  	compilable	  [FE]  AssertionError  	14	1	add
22	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)	  	compilable	  [FE]  AssertionError  	14	1	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length    >=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	22	1	add
24	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length    >=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	22	1	add
25	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >>  lostdigit)  {  result.shiftLeft();  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >>  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length    >=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >>  lostdigit)  {  result.shiftLeft();  }	  	non-compiled	[CE]  incompatible  types	22	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length    >=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	22	1	add
27	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length    >=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	22	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;	  	compilable	  [FE]  AssertionError  	1	1	add
29	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  x;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  x;	  	compilable	  [FE]  AssertionError  	1	1	add
30	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  Result.mant[mant.length-1]  =  x;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  x;  Result.mant[mant.length-1]  =  x;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    x;    Result.mant[mant.length-1]  =  x;	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
31	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  y;  [CE]  cannot  find  symbol  y  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[mant.length-1]  =  y;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    x;    result.mant[mant.length-1]  =  y;	  	non-compiled	[CE]  cannot  find  symbol  y	1	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	16	1	add
33	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	16	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  >=  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  >=  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	16	1	add
35	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  >=  0)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  >=  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  >=  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	16	1	add
36	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  	  	non-compiled	[CE]  ')'  expected	16	None	add
37	[BUG]  [BUGGY]  result.shiftLeft(lostdigit,  lostdigit);  [CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft(lostdigit,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft(lostdigit,  lostdigit);	  result.shiftLeft(lostdigit);    	non-compiled	[CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;	24	None	replace
38	[BUG]  [BUGGY]  result.shiftLeft(r,  lostdigit);  [CE]  cannot  find  symbol  r  [FE]          AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft(r,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft(r,  lostdigit);	  result.shiftLeft(lostdigit);    	non-compiled	[CE]  cannot  find  symbol  r	24	None	replace
39	[BUG]  [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  lostdigit,  MULTIPLY_TRAP);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	29	None	replace
40	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  exp);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  exp);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  exp);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	29	None	replace
41	[BUG]  [BUGGY]  result.shiftLeft(2);  [CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft(2);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft(2);	  result.shiftLeft(1);    	non-compiled	[CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;	18	None	replace
42	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  mant.length);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  mant.length);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  mant.length);	  if(mant.length    ==    0)    {    result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit);    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	34	None	replace
43	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	30	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft();    result.shiftLeft();  result.shiftLeft();  result.shiftLeft();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	result.shiftLeft();        result.shiftLeft();    result.shiftLeft();  result.shiftLeft();	  	compilable	  [FE]  AssertionError  	10	1	add
45	[BUG]  [BUGGY]  result.shiftLeft();    result.shiftLeft();  result.shiftLeft();  result.shiftLeft();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft();    result.shiftLeft();  result.shiftLeft();  result.shiftLeft();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft();        result.shiftLeft();    result.shiftLeft();  result.shiftLeft();	  	compilable	  [FE]  AssertionError  	10	1	add
46	[BUG]  [BUGGY]  result.shiftLeft();    result.shiftLeft();  Result.shiftLeft();  result.shiftLeft();  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft();    result.shiftLeft();  Result.shiftLeft();  result.shiftLeft();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft();        result.shiftLeft();    Result.shiftLeft();  result.shiftLeft();	  	non-compiled	[CE]  cannot  find  symbol  Result	10	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft();    result.shiftLeft();  result.shiftRight();  result.shiftLeft();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	result.shiftLeft();        result.shiftLeft();    result.shiftRight();  result.shiftLeft();	  	compilable	  [FE]  AssertionError  	10	1	add
48	[BUG]  [BUGGY]  result.shiftLeft();    result.shiftLeft();  result.shiftRight();  result.shiftLeft();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft();    result.shiftLeft();  result.shiftRight();  result.shiftLeft();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft();        result.shiftLeft();    result.shiftRight();  result.shiftLeft();	  	compilable	  [FE]  AssertionError  	10	1	add
49	[BUG]  [BUGGY]  result.setRight(lendigit,  lostdigit);  [CE]  cannot  find  symbol  lendigit  [FE]            AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.setRight(lendigit,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.setRight(lendigit,  lostdigit);	  result.setRight(lostdigit,    lostdigit);    	non-compiled	[CE]  cannot  find  symbol  lendigit	9	None	replace
50	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  mant,  null);	          if(mant.length    ==    0)    {    result    =    dotrap(result,    MULTIPLY_TRAP,    result,    null);    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	35	None	replace
51	[BUG]  [BUGGY]  int  rh  =  result.round(lostdigit,  lostdigit);  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  int  rh  =  result.round(lostdigit,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	int  rh  =  result.round(lostdigit,  lostdigit);	  int    rh    =    result.round(lostdigit);    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	33	None	replace
52	[BUG]  [BUGGY]  result.shiftRight(r,  lostdigit);  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftRight(r,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftRight(r,  lostdigit);	  result.shiftRight(lostdigit,    lostdigit);    	non-compiled	[CE]  cannot  find  symbol  r	8	None	replace
53	[BUG]  [BUGGY]  result.shiftRight(rh,  lostdigit,  x);  [CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftRight(rh,  lostdigit,  x);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftRight(rh,  lostdigit,  x);	  result.shiftRight(rh,    lostdigit);    	non-compiled	[CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;	7	None	replace
54	[BUG]  [BUGGY]  result.shiftRight(x,  rh,  lostdigit);  [CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftRight(x,  rh,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftRight(x,  rh,  lostdigit);	  result.shiftRight(rh,    lostdigit);    	non-compiled	[CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;	7	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length    >=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	22	1	add
56	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length    >=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	22	1	add
57	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant	  	non-compiled	[CE]  ')'  expected	14	None	add
58	[BUG]  [BUGGY]  result.shiftLeft(x,  lostdigit);  [CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft(x,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft(x,  lostdigit);	  result.shiftLeft(lostdigit);    	non-compiled	[CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;	24	None	replace
59	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant	  	non-compiled	[CE]  ')'  expected	16	None	add
60	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.	  	non-compiled	[CE]  ')'  expected	16	None	add
61	[BUG]  [BUGGY]  Result.shiftLeft();  [CE]  cannot  find  symbol  Result  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  Result.shiftLeft();  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	Result.shiftLeft();	  result.shiftLeft();    if(result.shiftLeft())    {    result.shiftLeft();    }    	non-compiled	[CE]  cannot  find  symbol  Result	25	None	replace
62	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result,  null);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  result,  null);	          result    =    dotrap(result,    MULTIPLY_TRAP,    result,    null);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	31	None	replace
63	[BUG]  [BUGGY]  final  int  rh  =  result.round(lostdigit  +  1);  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  final  int  rh  =  result.round(lostdigit  +  1);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	final  int  rh  =  result.round(lostdigit  +  1);	          final    int    rh    =    result.round(lostdigit);    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	19	None	replace
64	[BUG]  [BUGGY]  result.shiftRight(x,  lostdigit,  RADIX);  [CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftRight(x,  lostdigit,  RADIX);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftRight(x,  lostdigit,  RADIX);	  result.shiftRight(x,    lostdigit);    	non-compiled	[CE]  method  shiftRight  in  class  Dfp  cannot  be  applied  to  given  types;	27	None	replace
65	[BUG]  [BUGGY]  int  rh  =  result.round(lostdigit  +  1);  [CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  int  rh  =  result.round(lostdigit  +  1);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	int  rh  =  result.round(lostdigit  +  1);	  int    rh    =    result.round(lostdigit);    	non-compiled	[CE]  variable  rh  is  already  defined  in  method  multiplyFast(int)	33	None	replace
66	[BUG]  [BUGGY]  result.setRight(lessdigit,  lostdigit);  [CE]  cannot  find  symbol  lessdigit  [FE]            AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.setRight(lessdigit,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.setRight(lessdigit,  lostdigit);	  result.setRight(lostdigit,    lostdigit);    	non-compiled	[CE]  cannot  find  symbol  lessdigit	9	None	replace
67	[BUG]  [BUGGY]  Result  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  null);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  Result  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  null);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	Result  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  null);	          if(mant.length    ==    0)    {    result    =    dotrap(result,    MULTIPLY_TRAP,    result,    null);    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
68	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit,  rh);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	29	None	replace
69	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  else  {  result.mant[mant.length-1]  =  x;  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  else  {  result.mant[mant.length-1]  =  x;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    x;    if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  else  {  result.mant[mant.length-1]  =  x;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
70	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  x;  if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    x;    if(mant.length-1]  ==  0)  {  result.mant[mant.length-1]  =  x;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
71	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >>  lostdigit)  {  result.shiftLeft();  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >>  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length  >>  lostdigit)  {  result.shiftLeft();  }	  	non-compiled	[CE]  incompatible  types	20	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-2]  =  rh;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	result.mant[mant.length-1]    =    rh;    result.mant[mant.length-2]  =  rh;	  	compilable	  [FE]  AssertionError  	3	1	add
73	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-2]  =  rh;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  rh;  result.mant[mant.length-2]  =  rh;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    rh;    result.mant[mant.length-2]  =  rh;	  	compilable	  [FE]  AssertionError  	3	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	14	1	add
75	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	14	1	add
76	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  lostdigit);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	30	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	16	1	add
78	[BUG]  [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length    ==    0)    {    result.shiftLeft();    }    if(mant.length!=  0)  {  result.shiftLeft();  }  if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length        ==        0)        {        result.shiftLeft();        }        if(mant.length!=    0)    {    result.shiftLeft();    }    if(mant.length  ==  0)  {  result.shiftLeft();  }  if(mant.length!=  0)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	16	1	add
79	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  rh);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  rh);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  rh);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	29	None	replace
80	[BUG]  [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result  =  dotrap(result,  MULTIPLY_TRAP,  result,  lostdigit,  RADIX);	  result    =    dotrap(result,    MULTIPLY_TRAP,    result,    lostdigit);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	29	None	replace
81	[BUG]  [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[Mant.length-1]  =  x;  [CE]  cannot  find  symbol  Mant  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.mant[mant.length-1]  =  x;  result.mant[Mant.length-1]  =  x;  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.mant[mant.length-1]    =    x;    result.mant[Mant.length-1]  =  x;	  	non-compiled	[CE]  cannot  find  symbol  Mant	1	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
83	[BUG]  [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]          if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  [BUGGY]      result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	                if(mant.length!=        lostdigit)        {        result.shiftLeft();        }        if(mant.length!=    lostdigit)    {    result.shiftLeft();    }    if(mant.length!=  lostdigit)  {  result.shiftLeft();  }  if(mant.length!=  lostdigit)  {  result.shiftLeft();  }	  	compilable	  [FE]  AssertionError  	20	1	add
84	[BUG]  [BUGGY]  result.shiftLeft(rh,  lostdigit);  [CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];      [BUGGY]  result.shiftLeft(rh,  lostdigit);  [BUGGY]      result.mant[mant.length-1]  =  rh;  }  if  (result.mant[mant.length-1]  ==  0)  {  //  if  result  is  zero,  set  exp  to  zero  result.exp  =  0;  }  final  int  excp  =  result.round(lostdigit);  if  (excp  !=  0)  {  result  =  dotrap(excp,  MULTIPLY_TRAP,  result,  result);  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	result.shiftLeft(rh,  lostdigit);	  result.shiftLeft(lostdigit);    	non-compiled	[CE]  method  shiftLeft  in  class  Dfp  cannot  be  applied  to  given  types;	24	None	replace
