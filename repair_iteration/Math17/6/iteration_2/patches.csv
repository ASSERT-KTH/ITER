bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  isNaN())  {  return  this;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  ||  isNaN())  {  return  this;  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	||  isNaN())  {  return  this;	  if(nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(isNaN())  {  return  this;  }  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(isNaN())    {    return    this;    }    if(isNaN())  {  return  this;  }	  	compilable	  [FE]  AssertionError  	2	1	add
3	[BUG]  [BUGGY]  if(isNaN())  {  return  this;  }  if(isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(isNaN())  {  return  this;  }  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(isNaN())    {    return    this;    }    if(isNaN())  {  return  this;  }	  	compilable	  [FE]  AssertionError  	2	1	add
4	[BUG]  [BUGGY]  if(isNaN())  {  return  this;  }  If(isNaN())  {  return  this;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(isNaN())  {  return  this;  }  If(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(isNaN())    {    return    this;    }    If(isNaN())  {  return  this;  }	  	non-compiled	[CE]  ';'  expected	2	None	add
5	[BUG]  [BUGGY]  Result  =  newInstance(x.sign);  [CE]  cannot  find  symbol  Result  [FE]        AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  Result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	Result  =  newInstance(x.sign);	  result    =    newInstance(x.sign);    Result    =    newInstance(x.sign);    	non-compiled	[CE]  cannot  find  symbol  Result	29	None	replace
6	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
7	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	12	1	add
9	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	12	1	add
10	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	40	1	add
12	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	40	1	add
13	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  Result  result  =  newInstance(x);  result  =  newInstance(this);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  Result  result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(this);    Result  result  =  newInstance(x);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	40	1	add
15	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(this);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	40	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(!isNaN())  {  return  this;  }  if(!isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(!isNaN())    {    return    this;    }    if(!isNaN())  {  return  this;  }	  	compilable	  [FE]  AssertionError  	34	1	add
17	[BUG]  [BUGGY]  if(!isNaN())  {  return  this;  }  if(!isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(!isNaN())  {  return  this;  }  if(!isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(!isNaN())    {    return    this;    }    if(!isNaN())  {  return  this;  }	  	compilable	  [FE]  AssertionError  	34	1	add
18	[BUG]  [BUGGY]  if(!isNaN())  {  return  this;  }  If(!isNaN())  {  return  this;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(!isNaN())  {  return  this;  }  If(!isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(!isNaN())    {    return    this;    }    If(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  ';'  expected	34	None	add
19	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
20	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	44	1	add
22	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	44	1	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	42	1	add
24	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	42	1	add
25	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	21	1	add
27	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	21	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	21	1	add
29	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	21	1	add
30	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  Result  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  Result  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    Result  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	38	1	add
32	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	38	1	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	38	1	add
34	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	38	1	add
35	[BUG]  [BUGGY]  parent!=  null  &&  isNaN())  {  return  this;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  parent!=  null  &&  isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	parent!=  null  &&  isNaN())  {  return  this;  }	  if(isNaN())    {    return    this;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
36	[BUG]  [BUGGY]  parent  ==  null  ||  isNaN())  {  return  this;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  parent  ==  null  ||  isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	parent  ==  null  ||  isNaN())  {  return  this;  }	  if(isNaN())    {    return    this;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
37	[BUG]  [BUGGY]  parent!=  null  &&!isNaN())  {  return  this;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  parent!=  null  &&!isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	parent!=  null  &&!isNaN())  {  return  this;  }	  if(!isNaN())    {    return    this;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
38	[BUG]  [BUGGY]  parent  ==  null  ||!isNaN())  {  return  this;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  parent  ==  null  ||!isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	parent  ==  null  ||!isNaN())  {  return  this;  }	  if(!isNaN())    {    return    this;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	16	1	add
40	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	16	1	add
41	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	16	1	add
43	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	16	1	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.nans);        if(x.nans!=    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	14	1	add
45	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	14	1	add
46	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  Result  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  Result  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE)    {    result    =    newInstance(x.nans);    }    Result  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
47	[BUG]  [BUGGY]  Result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]        AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  Result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	Result  =  newInstance(this);	          result    =    newInstance(x);    Result    =    newInstance(x);    	non-compiled	[CE]  cannot  find  symbol  Result	32	None	replace
48	[BUG]  [BUGGY]  result  =  newInstance(x.sig);  [CE]  cannot  find  symbol  sig  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result  =  newInstance(x.sig);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result  =  newInstance(x.sig);	  result    =    newInstance(x.sign);    result    =    newInstance(x.sig);    	non-compiled	[CE]  cannot  find  symbol  sig	30	None	replace
49	[BUG]  [BUGGY]  result  =  newInstance(x.sign,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result  =  newInstance(x.sign,  rsign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result  =  newInstance(x.sign,  rsign);	  result    =    newInstance(x.sign);    if(x.sign!=    null)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    	non-compiled	[CE]  cannot  find  symbol  rsign	23	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
51	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
53	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	4	1	add
55	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	4	1	add
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
57	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
59	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
60	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	8	1	add
62	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	8	1	add
63	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
64	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
65	[BUG]  [BUGGY]  Result  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  Result  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	Result  result  =  newInstance(x);	  Result    result    =    newInstance(this);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.nans);        result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	10	1	add
67	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	10	1	add
68	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  Result  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  Result  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        result    =    newInstance(x.nans);    Result  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.nans);        result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	10	1	add
70	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	10	1	add
71	[BUG]  [BUGGY]  result  =  newInstance(x,  this);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]        AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result  =  newInstance(x,  this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result  =  newInstance(x,  this);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	33	None	replace
72	[BUG]  [BUGGY]  result  =  newInstance(x,  nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result  =  newInstance(x,  nans);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result  =  newInstance(x,  nans);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	33	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(nans  ==  FINITE)  {  result  =  newInstance(this);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    If(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	27	1	replace
74	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(nans  ==  FINITE)  {  result  =  newInstance(this);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    If(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	27	1	replace
75	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
76	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	7	1	replace
78	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	7	1	replace
79	[BUG]  [BUGGY]  if(x.sign!=  QNAN)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  QNAN)  {  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  QNAN)  {  if(isNaN())  {  return  this;  }	  if(x.sign!=    SNAN)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
80	[BUG]  [BUGGY]  parent  ==  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  parent  ==  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	parent  ==  if(isNaN())  {  return  this;  }	  if(nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
81	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(	  	non-compiled	[CE]  ')'  expected	25	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	44	1	add
83	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	44	1	add
84	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
85	[BUG]  [BUGGY]  result  =  newInstance(this,  x.nans);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]        AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result  =  newInstance(this,  x.nans);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result  =  newInstance(this,  x.nans);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	33	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(!isInfinite())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(!isInfinite())  {  return  this;  }	  if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	35	1	replace
87	[BUG]  [BUGGY]  if(!isInfinite())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(!isInfinite())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(!isInfinite())  {  return  this;  }	  if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	35	1	replace
88	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  Result  =  newInstance(x);  result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  Result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(this);    Result  =  newInstance(x);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  Result	40	None	add
89	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }	  if(nans    ==    FINITE)    {    if(!isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
91	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	4	1	add
93	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(this);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(x);    result  =  newInstance(x);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	4	1	add
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	6	1	add
95	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	6	1	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	6	1	add
97	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	6	1	add
98	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
99	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.	  	non-compiled	[CE]  ')'  expected	14	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  if(x.sign!=  SNAN)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    if(x.sign!=  SNAN)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	21	1	add
101	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  if(x.sign!=  SNAN)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  if(x.sign!=  SNAN)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    if(x.sign!=  SNAN)  {  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	21	1	add
102	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  Result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    result  =  newInstance(x.sign);  Result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        result    =    newInstance(x.sign);    Result  =  newInstance(x.sign);  result  =  newInstance(x.sign);	  	non-compiled	[CE]  cannot  find  symbol  Result	21	None	add
103	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(	  	non-compiled	[CE]  ')'  expected	16	None	add
104	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  If(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  If(x.sign!=  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=    FINITE)    {    result    =    newInstance(this);    }    If(x.sign!=  FINITE)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  ';'  expected	38	None	add
105	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
106	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FIN  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FIN  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.nans  ==  FIN	  	non-compiled	[CE]  ')'  expected	12	None	add
107	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  Result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    result  =  newInstance(x.nans);  Result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        result    =    newInstance(x.nans);    Result  =  newInstance(x.nans);  result  =  newInstance(x.nans);	  	non-compiled	[CE]  cannot  find  symbol  Result	10	None	add
108	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
109	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	7	1	replace
111	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	7	1	replace
112	[BUG]  [BUGGY]  parent  ==  null  &&  isNaN())  {  return  this;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  parent  ==  null  &&  isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	parent  ==  null  &&  isNaN())  {  return  this;  }	  if(isNaN())    {    return    this;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
113	[BUG]  [BUGGY]  if(x.sign!=  SNAN)  {  if(isInFINITE())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  SNAN)  {  if(isInFINITE())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  SNAN)  {  if(isInFINITE())  {  return  this;  }	  if(x.sign!=    SNAN)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(x.sign!=  nans)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	7	1	replace
115	[BUG]  [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  nans)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  nans)  {  result  =  newInstance(this);  }	          result    =    newInstance(x);    if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	compilable	  [FE]  AssertionError  	7	1	replace
116	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
118	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	25	1	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(isInfinite())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(isInfinite())  {  return  this;  }	  if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	35	1	replace
120	[BUG]  [BUGGY]  if(isInfinite())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(isInfinite())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(isInfinite())  {  return  this;  }	  if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	35	1	replace
121	[BUG]  [BUGGY]  if(x.sign!=  nans)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  nans)  {  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  nans)  {  if(isNaN())  {  return  this;  }	  if(nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
122	[BUG]  [BUGGY]  if(x.sign!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  null)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  null)  {	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    If(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
123	[BUG]  [BUGGY]  result  =  newInstance(this,  x.sign);  [CE]  no  suitable  method  found  for  newInstance(Dfp,byte)  [FE]        AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result  =  newInstance(this,  x.sign);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result  =  newInstance(this,  x.sign);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,byte)	33	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }	  result    =    newInstance(x.sign);    if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    	compilable	  [FE]  AssertionError  	45	1	replace
125	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }	  result    =    newInstance(x.sign);    if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    	compilable	  [FE]  AssertionError  	45	1	replace
126	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          result    =    newInstance(x);    result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	5	1	replace
127	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	          result    =    newInstance(x);    result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	5	1	replace
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  result    =    newInstance(x.nans);    if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    	compilable	  [FE]  AssertionError  	13	1	replace
129	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(x);  }	  result    =    newInstance(x.nans);    if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    	compilable	  [FE]  AssertionError  	13	1	replace
130	[BUG]  [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.sign);    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.sign);        if(x.sign!=    FINITE)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  if(x.sign!=  FINITE)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	16	1	add
132	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	16	1	add
133	[BUG]  [BUGGY]  if(x.sign!=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  0)  {	          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    If(x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
134	[BUG]  [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        if(x.nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x);    }    if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
135	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  FINITE)  {  if(isNaN())  {  return  this;  }	  if(nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(isNaN()  ||  x.sign!=  FINITE)  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	if(isNaN()  ||  x.sign!=  FINITE)  {  return  this;  }	  if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	3	1	replace
137	[BUG]  [BUGGY]  if(isNaN()  ||  x.sign!=  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(isNaN()  ||  x.sign!=  FINITE)  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(isNaN()  ||  x.sign!=  FINITE)  {  return  this;  }	  if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	3	1	replace
138	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance	  	non-compiled	[CE]  ';'  expected	12	None	add
139	[BUG]  [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x.  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  result    =    newInstance(x.nans);    if(x.nans!=  FINITE  ||  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  }  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x.  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	result        =        newInstance(x.nans);        if(x.nans!=    FINITE    ||    x.nans    ==    FINITE)    {    result    =    newInstance(x.nans);    }    if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  result  =  newInstance(x.nans);  if(x.nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x.	  	non-compiled	[CE]  ')'  expected	12	None	add
140	[BUG]  [BUGGY]  if(x.sign!=  rsign)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  rsign)  {  if(isNaN())  {  return  this;  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  rsign)  {  if(isNaN())  {  return  this;  }	  if(x.sign!=    nan)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(this);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	40	1	add
142	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(this);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	40	1	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	                result        =        newInstance(x);        result    =    newInstance(this);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	40	1	add
144	[BUG]  [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]          result    =    newInstance(x);    result  =  newInstance(this);  if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	                result        =        newInstance(x);        result    =    newInstance(this);    if(x.sign!=  FINITE)  {  result  =  newInstance(x);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	40	1	add
145	[BUG]  [BUGGY]  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]          AssertionError      [CONTEXT]      if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {      [BUGGY]  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  [BUGGY]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }	  result    =    newInstance(x.sign);    if(x.sign!=    null)    {    result    =    newInstance(x.sign);    }    else    {    result    =    newInstance(x.sign);    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	23	None	replace
