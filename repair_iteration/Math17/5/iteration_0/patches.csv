bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  	compilable	  [FE]  AssertionError  	9	1	replace
2	[BUG]  [BUGGY]  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  	compilable	  [FE]  AssertionError  	9	1	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	  	if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
5	[BUG]  [BUGGY]    if(x.nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	    if(x.nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
6	[BUG]  [BUGGY]    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	    if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
7	[BUG]  [BUGGY]    if(x.nans  ==  FINITE)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.nans  ==  FINITE)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	    if(x.nans  ==  FINITE)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
8	[BUG]  [BUGGY]    if(x.nans  ==  FINITE)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.nans  ==  FINITE)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	    if(x.nans  ==  FINITE)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
9	[BUG]  [BUGGY]  if(x.sign!=  null)  {  [CE]  incomparable  types:  byte  and  <null>  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]  if(x.sign!=  null)  {  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  null)  {	if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	9	None	replace
10	[BUG]  [BUGGY]  if  (x.sign  ==  nan)  {  [CE]  cannot  find  symbol  nan  [FE]      AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]  if  (x.sign  ==  nan)  {  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if  (x.sign  ==  nan)  {	if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  	non-compiled	[CE]  cannot  find  symbol  nan	9	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	    if(x.nans  ==  FINITE)  {  return  this;  }		compilable	  [FE]  AssertionError  	10	1	add
12	[BUG]  [BUGGY]    if(x.nans  ==  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	    if(x.nans  ==  FINITE)  {  return  this;  }		compilable	  [FE]  AssertionError  	10	1	add
13	[BUG]  [BUGGY]    if(x.sign!=  null)  {  if(!x.isInfinite())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]    if(x.sign!=  null)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	    if(x.sign!=  null)  {  if(!x.isInfinite())  {  return  this;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
14	[BUG]  [BUGGY]  if(x.sign!=  nan)  {  [CE]  cannot  find  symbol  nan  [FE]    AssertionError  [CONTEXT]    if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  [BUGGY]  if(x.sign!=  nan)  {  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  nan)  {	if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  	non-compiled	[CE]  cannot  find  symbol  nan	9	None	replace
