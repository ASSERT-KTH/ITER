bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x.sign  ==  0)  {	  if(x.sign!=    0)    {    	compilable	  [FE]  AssertionError  	60	1	replace
2	[BUG]  [BUGGY]  if(x.sign  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign  ==  0)  {	  if(x.sign!=    0)    {    	compilable	  [FE]  AssertionError  	60	1	replace
3	[BUG]  [BUGGY]  if(x.sign!=  0)  {  if(x.sign!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  0)  {  if(x.sign!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=    0)    {    if(x.sign!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
4	[BUG]  [BUGGY]  if(x.sign!=  0)  {  if(x.sign  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  0)  {  if(x.sign  >=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=    0)    {    if(x.sign  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  nans)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if  (x.sign  ==  nans)  {	  if    (x.sign    ==    rsign)    {    	compilable	  [FE]  AssertionError  	9	1	replace
6	[BUG]  [BUGGY]  if  (x.sign  ==  nans)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  nans)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if  (x.sign  ==  nans)  {	  if    (x.sign    ==    rsign)    {    	compilable	  [FE]  AssertionError  	9	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	10	1	replace
8	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	10	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	10	1	replace
10	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	10	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	36	1	replace
12	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	36	1	replace
13	[BUG]  [BUGGY]  if(x.sign!=  SNAN)  {  if(x.sign!=  SNAN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  SNAN)  {  if(x.sign!=  SNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=    SNAN)    {    if(x.sign!=  SNAN)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
14	[BUG]  [BUGGY]  if(x.sign!=  SNAN)  {  if(x.sign  ==  SNAN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  SNAN)  {  if(x.sign  ==  SNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=    SNAN)    {    if(x.sign  ==  SNAN)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
15	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
16	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x  ==  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x  ==  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x  ==  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
17	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
18	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
19	[BUG]  [BUGGY]  if(x.sign  ==  null)  {  if(!isNaN())  {  return  this;  }  [CE]  incomparable  types:  byte  and  <null>  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  null)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign  ==  null)  {  if(!isNaN())  {  return  this;  }	  if(x.sign!=    null)    {    if(!isNaN())    {    return    this;    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	62	None	replace
20	[BUG]  [BUGGY]  if(x.sign!=  nans)  {  if(x.sign!=  nans)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  nans)  {  if(x.sign!=  nans)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=    nans)    {    if(x.sign!=  nans)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
21	[BUG]  [BUGGY]  if(x.sign!=  nans)  {  if(x.sign  >=  nans)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  nans)  {  if(x.sign  >=  nans)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=    nans)    {    if(x.sign  >=  nans)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
22	[BUG]  [BUGGY]  if(x.sign!=  rsign)  {  if(isNaN())  {  return  this;  }  [CE]  cannot  find  symbol  rsign  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  rsign)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  rsign)  {  if(isNaN())  {  return  this;  }	  if(x.sign!=    nan)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  cannot  find  symbol  rsign	53	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  SNAN)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x.sign!=  SNAN)  {  if(isNaN())  {  return  this;  }	  if(x.sign!=    nan)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	53	1	replace
24	[BUG]  [BUGGY]  if(x.sign!=  SNAN)  {  if(isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  SNAN)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  SNAN)  {  if(isNaN())  {  return  this;  }	  if(x.sign!=    nan)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	53	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign!=  QNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if  (x.sign!=  QNAN)  {	  if    (x.sign    ==    SNAN)    {    	compilable	  [FE]  AssertionError  	8	1	replace
26	[BUG]  [BUGGY]  if  (x.sign!=  QNAN)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign!=  QNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if  (x.sign!=  QNAN)  {	  if    (x.sign    ==    SNAN)    {    	compilable	  [FE]  AssertionError  	8	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  QNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if  (x.sign  ==  QNAN)  {	  if    (x.sign    ==    SNAN)    {    	compilable	  [FE]  AssertionError  	8	1	replace
28	[BUG]  [BUGGY]  if  (x.sign  ==  QNAN)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  QNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if  (x.sign  ==  QNAN)  {	  if    (x.sign    ==    SNAN)    {    	compilable	  [FE]  AssertionError  	8	1	replace
29	[BUG]  [BUGGY]  int  mant  =  x.nans.getInt();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  int  mant  =  x.nans.getInt();  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	int  mant  =  x.nans.getInt();	  int    mant    =    x.getInt();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
30	[BUG]  [BUGGY]  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(isNaN())  {  return  null;  }	  if(x.sign!=    null)    {    if(isNaN())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
31	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  return  this;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE)  {  return  this;  }	          if(x.nans    ==    FINITE)    {    return    this;    }    If(x.nans    ==    FINITE)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE)  {  if(!x.isInfinite())  {  return  this;  }	  if(x!=    null)    {    if(!x.isInfinite())    {    return    this;    }    	compilable	  [FE]  AssertionError  	46	1	replace
33	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(!x.isInfinite())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE)  {  if(!x.isInfinite())  {  return  this;  }	  if(x!=    null)    {    if(!x.isInfinite())    {    return    this;    }    	compilable	  [FE]  AssertionError  	46	1	replace
34	[BUG]  [BUGGY]  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(isNaN())  {  return  this;  }	  if(x.sign!=    null)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
35	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  result  =  newInstance(x.nans);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	result  =  newInstance(x.nans);	  result    =    newInstance(this);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if    (x.sign    ==    FINITE    &&    nans    ==    INFINITE    &&    mant[mant.length-1]!=    0)    {    if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
37	[BUG]  [BUGGY]  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  if  (x.sign  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  if  (x.sign  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if    (x.sign    ==    FINITE    &&    nans    ==    INFINITE    &&    mant[mant.length-1]!=    0)    {    if  (x.sign  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
38	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE)    {    if(!isNaN())    {    return    this;    }    if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
39	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE)    {    if(!isNaN())    {    return    this;    }    if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
40	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
41	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
42	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	22	1	replace
44	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	22	1	replace
45	[BUG]  [BUGGY]  if(x.sign  ==  rsign)  {  if(isNaN())  {  return  null;  }  [CE]  cannot  find  symbol  rsign  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  rsign)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign  ==  rsign)  {  if(isNaN())  {  return  null;  }	  if(x.sign    ==    nan)    {    if(isNaN())    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  rsign	54	None	replace
46	[BUG]  [BUGGY]  Result  result  =  newInstance(this);  result  =  newInstance(x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  Result  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	Result  result  =  newInstance(this);  result  =  newInstance(x);	  if(mant!=    null)    {    result    =    newInstance(this);    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
47	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
48	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign!=  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if  (x.sign!=  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.sign    ==    FINITE    &&    nans    ==    INFINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	27	1	replace
50	[BUG]  [BUGGY]  if  (x.sign!=  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign!=  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if  (x.sign!=  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.sign    ==    FINITE    &&    nans    ==    INFINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	27	1	replace
51	[BUG]  [BUGGY]  Result  result  =  newInstance(x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  Result  result  =  newInstance(x);  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	Result  result  =  newInstance(x);	  Result    result    =    newInstance(this);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
52	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
53	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	30	1	add
55	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	30	1	add
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	30	1	add
57	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	30	1	add
58	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
59	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans!=    FINITE)    {    if(isNaN())    {    return    null;    }    if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
60	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans!=    FINITE)    {    if(isNaN())    {    return    null;    }    if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x.sign  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    If    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	32	1	replace
62	[BUG]  [BUGGY]  if(x.sign  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign  ==  FINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    If    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	32	1	replace
63	[BUG]  [BUGGY]  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(!isNaN())  {  return  this;  }	  if(sign!=    null)    {    if(!isNaN())    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
64	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
65	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
66	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    if(nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
67	[BUG]  [BUGGY]  if(x!=  null)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  return  null;  }	  if(x!=    null)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
68	[BUG]  [BUGGY]  if  (x.sign  ==  SNAN)  {  if  (x.sign  ==  SNAN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  SNAN)  {  if  (x.sign  ==  SNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if    (x.sign    ==    SNAN)    {    if  (x.sign  ==  SNAN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
69	[BUG]  [BUGGY]  if  (x.sign  ==  SNAN)  {  if  (x.sign!=  SNAN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  SNAN)  {  if  (x.sign!=  SNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if    (x.sign    ==    SNAN)    {    if  (x.sign!=  SNAN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x.nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }	  if(nans!=    FINITE)    {    if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	34	1	replace
71	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }	  if(nans!=    FINITE)    {    if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	34	1	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans!=    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	11	1	replace
73	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE  &&  nans!=  INFINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans!=    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	11	1	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x.nans  ==  FINITE  &&  nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans!=    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	11	1	replace
75	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans  ==  FINITE  &&  nans!=  FINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans!=    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	11	1	replace
76	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  return  this;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans!=  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans!=  FINITE)  {  return  this;  }	          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=    FINITE)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
77	[BUG]  [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
78	[BUG]  [BUGGY]  int  mant  =  x.nans  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  int  mant  =  x.nans  -  1;  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	int  mant  =  x.nans  -  1;	  int    mant    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
79	[BUG]  [BUGGY]  int  mant  =  x.nans  &  0xff;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  int  mant  =  x.nans  &  0xff;  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	int  mant  =  x.nans  &  0xff;	  int    mant    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	28	1	add
81	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	28	1	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	28	1	add
83	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	28	1	add
84	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
85	[BUG]  [BUGGY]  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(!x.isInfinite())    {    return    this;    }    if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
86	[BUG]  [BUGGY]  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  if(x  ==  null)  {  if(!x.isInfinite())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  if(x  ==  null)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(!x.isInfinite())    {    return    this;    }    if(x  ==  null)  {  if(!x.isInfinite())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
87	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
88	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x  ==  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x  ==  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x  ==  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
89	[BUG]  [BUGGY]  result  =  newInstance(nans);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  result  =  newInstance(nans);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	result  =  newInstance(nans);	  result    =    newInstance(x);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
90	[BUG]  [BUGGY]  if(mant!=  null  &&  x.sign.length  >  0)  {  [CE]  byte  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(mant!=  null  &&  x.sign.length  >  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(mant!=  null  &&  x.sign.length  >  0)  {	  if(x.sign!=    null    &&    mant.length    >    0)    {    	non-compiled	[CE]  byte  cannot  be  dereferenced	58	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(mant!=  null  &&  mant.length  >  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(mant!=  null  &&  mant.length  >  0)  {	  if(x.sign!=    null    &&    mant.length    >    0)    {    	compilable	  [FE]  AssertionError  	58	1	replace
92	[BUG]  [BUGGY]  if(mant!=  null  &&  mant.length  >  0)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(mant!=  null  &&  mant.length  >  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(mant!=  null  &&  mant.length  >  0)  {	  if(x.sign!=    null    &&    mant.length    >    0)    {    	compilable	  [FE]  AssertionError  	58	1	replace
93	[BUG]  [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.sign.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.sign.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.sign.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x.sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
94	[BUG]  [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x.sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
95	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans!=    FINITE)    {    if(!isNaN())    {    return    this;    }    if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
96	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans!=    FINITE)    {    if(!isNaN())    {    return    this;    }    if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
97	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  If(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  If(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE)    {    if(!isNaN())    {    return    this;    }    If(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  ';'  expected	24	None	add
98	[BUG]  [BUGGY]  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  If(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  If(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(!x.isInfinite())    {    return    this;    }    If(x!=  null)  {  if(!x.isInfinite())  {  return  this;  }	  	non-compiled	[CE]  ';'  expected	45	None	add
99	[BUG]  [BUGGY]  if(nans  ==  0)  {  return  this;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  0)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  0)  {  return  this;  }	          if(x.nans    ==    FINITE)    {    return    this;    }    If(x.nans    ==    FINITE)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
100	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.sign[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  array  required,  but  byte  found  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.sign[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.sign[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  array  required,  but  byte  found	51	None	replace
101	[BUG]  [BUGGY]  int  mant  =  x.nans  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  int  mant  =  x.nans  +  1;  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	int  mant  =  x.nans  +  1;	  int    mant    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
102	[BUG]  [BUGGY]  if(x.sign!=  null)  {  return  this;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  null)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  null)  {  return  this;  }	          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans    ==    FINITE)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
103	[BUG]  [BUGGY]  if(x.sign!=  SNAN)  {  If(x.sign!=  SNAN)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  SNAN)  {  If(x.sign!=  SNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=    SNAN)    {    If(x.sign!=  SNAN)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
104	[BUG]  [BUGGY]  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  If  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  If  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if    (x.sign    ==    FINITE    &&    nans    ==    INFINITE    &&    mant[mant.length-1]!=    0)    {    If  (x.sign  ==  FINITE  &&  nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	28	1	add
106	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	28	1	add
107	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  If(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  If(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    If(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  ';'  expected	50	None	add
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	30	1	add
109	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }	  	compilable	  [FE]  AssertionError  	30	1	add
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans!=    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	11	1	replace
111	[BUG]  [BUGGY]  if(nans  ==  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if    (x.nans    ==    INFINITE    &&    nans!=    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	11	1	replace
112	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  x.sign[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  incomparable  types:  int[]  and  byte  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  x.sign[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  x.sign[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x.sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  incomparable  types:  int[]  and  byte	40	None	replace
113	[BUG]  [BUGGY]  Result  =  newInstance(this);  result  =  newInstance(x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  Result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	Result  =  newInstance(this);  result  =  newInstance(x);	  if(mant!=    null)    {    result    =    newInstance(this);    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
114	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans  >=  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(!isNaN())  {  return  this;  }  if(nans  >=  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans!=    FINITE)    {    if(!isNaN())    {    return    this;    }    if(nans  >=  FINITE)  {  if(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
115	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x  ==  null)  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    if(x  ==  null)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
116	[BUG]  [BUGGY]  if(nans!=  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans!=  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
117	[BUG]  [BUGGY]  result  =  newInstance(this,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  result  =  newInstance(this,  x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	result  =  newInstance(this,  x);	  result    =    newInstance(x);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x!=  null)  {  if(isNaN())  {  return  this;  }	  if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	36	1	replace
119	[BUG]  [BUGGY]  if(x!=  null)  {  if(isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(isNaN())  {  return  this;  }	  if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	36	1	replace
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans!=  FINITE)  {  if(isNaN())  {  return  this;  }	  if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	36	1	replace
121	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans!=  FINITE)  {  if(isNaN())  {  return  this;  }	  if(x.nans!=    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	36	1	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x!=  null)  {	  if(x.sign    ==    null)    {    	compilable	  [FE]  AssertionError  	2	1	replace
123	[BUG]  [BUGGY]  if(x!=  null)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {	  if(x.sign    ==    null)    {    	compilable	  [FE]  AssertionError  	2	1	replace
124	[BUG]  [BUGGY]  if(sign  ==  null)  {  if(!isNaN())  {  return  this;  }  [CE]  incomparable  types:  byte  and  <null>  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(sign  ==  null)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(sign  ==  null)  {  if(!isNaN())  {  return  this;  }	  if(sign!=    null)    {    if(!isNaN())    {    return    this;    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	61	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans!=  FINITE)  {  if(!x.isInfinite())  {  return  this;  }	  if(x!=    null)    {    if(!x.isInfinite())    {    return    this;    }    	compilable	  [FE]  AssertionError  	46	1	replace
126	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  if(!x.isInfinite())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(!x.isInfinite())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans!=  FINITE)  {  if(!x.isInfinite())  {  return  this;  }	  if(x!=    null)    {    if(!x.isInfinite())    {    return    this;    }    	compilable	  [FE]  AssertionError  	46	1	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x!=  null)  {  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	39	1	replace
128	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	39	1	replace
129	[BUG]  [BUGGY]  if  (x.sign  ==  SNAN)  {  If  (x.sign  ==  SNAN)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  SNAN)  {  If  (x.sign  ==  SNAN)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if    (x.sign    ==    SNAN)    {    If  (x.sign  ==  SNAN)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x!=  null)  {  if(isNaN())  {  return  null;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	22	1	replace
131	[BUG]  [BUGGY]  if(x!=  null)  {  if(isNaN())  {  return  null;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(isNaN())  {  return  null;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	22	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans!=  FINITE)  {  if(isNaN())  {  return  null;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	22	1	replace
133	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans!=  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans!=  FINITE)  {  if(isNaN())  {  return  null;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	22	1	replace
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  SNAN)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x.sign  ==  SNAN)  {  if(isNaN())  {  return  null;  }	  if(x.sign    ==    nan)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	54	1	replace
135	[BUG]  [BUGGY]  if(x.sign  ==  SNAN)  {  if(isNaN())  {  return  null;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  SNAN)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign  ==  SNAN)  {  if(isNaN())  {  return  null;  }	  if(x.sign    ==    nan)    {    if(isNaN())    {    return    null;    }    	compilable	  [FE]  AssertionError  	54	1	replace
136	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  NFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  NFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x!=  null)  {  if(nans  ==  NFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
137	[BUG]  [BUGGY]  if(x  ==  null)  {  return  this;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x  ==  null)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x  ==  null)  {  return  this;  }	  if(x!=    null)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE)  {	  if(x.sign    ==    null)    {    	compilable	  [FE]  AssertionError  	2	1	replace
139	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE)  {	  if(x.sign    ==    null)    {    	compilable	  [FE]  AssertionError  	2	1	replace
140	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
141	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if  [CE]  '('  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if	  	non-compiled	[CE]  '('  expected	28	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x!=  null)  {  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	51	1	replace
143	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	compilable	  [FE]  AssertionError  	51	1	replace
144	[BUG]  [BUGGY]  if(x.sign!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x.sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	40	None	replace
145	[BUG]  [BUGGY]  if(x.sign!=  null)  {  if(nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]                  AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  null)  {  if(nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  null)  {  if(nans  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(x.sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	40	None	replace
146	[BUG]  [BUGGY]  if(x.sign!=  bsign)  {  [CE]  cannot  find  symbol  bsign  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  bsign)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  bsign)  {	  if(x.sign!=    rsign)    {    	non-compiled	[CE]  cannot  find  symbol  bsign	15	None	replace
147	[BUG]  [BUGGY]  if(x.sign!=  0)  {  return  this;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  0)  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  0)  {  return  this;  }	          if(x.nans    ==    FINITE)    {    return    this;    }    If(x.nans    ==    FINITE)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
148	[BUG]  [BUGGY]  if  (x.sign  ==  bsign)  {  [CE]  cannot  find  symbol  bsign  [FE]                AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if  (x.sign  ==  bsign)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if  (x.sign  ==  bsign)  {	  if    (x.sign    ==    rsign)    {    	non-compiled	[CE]  cannot  find  symbol  bsign	9	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x!=  null)  {  if(!isNaN())  {  return  this;  }	  if(nans    ==    FINITE)    {    if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	25	1	replace
150	[BUG]  [BUGGY]  if(x!=  null)  {  if(!isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(!isNaN())  {  return  this;  }	  if(nans    ==    FINITE)    {    if(!isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	25	1	replace
151	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
152	[BUG]  [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.sign  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  if(isNaN())  {  return  this;  }  if(x.sign  ==  FINITE)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE    ||    x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    if(x.sign  ==  FINITE)  {  if(isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
153	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  FINITE)  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  FINITE)  {  return  null;  }	  if(x.sign!=    FINITE)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
154	[BUG]  [BUGGY]  if(x.sign!=  FINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  incomparable  types:  int[]  and  byte  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  FINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  FINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.sign    ==    FINITE    &&    nans    ==    INFINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  incomparable  types:  int[]  and  byte	27	None	replace
155	[BUG]  [BUGGY]  if(x.sign!=  FINITE  &&  mant  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  incomparable  types:  int[]  and  byte  [FE]      AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  FINITE  &&  mant  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  FINITE  &&  mant  ==  INFINITE  &&  mant[mant.length-1]!=  0)  {	  if    (x.sign    ==    FINITE    &&    nans    ==    INFINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  incomparable  types:  int[]  and  byte	27	None	replace
156	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  If(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  If(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    null;    }    If(x.nans  ==  FINITE)  {  if(isNaN())  {  return  null;  }	  	non-compiled	[CE]  ';'  expected	21	None	add
157	[BUG]  [BUGGY]  int  mant  =  x.sign;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  int  mant  =  x.sign;  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	int  mant  =  x.sign;	  int    mant    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
158	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
159	[BUG]  [BUGGY]  if(x.sign!=  null)  {  if(isNaN()  ||  isNaN())  {  return  this;  }  [CE]  incomparable  types:  byte  and  <null>  [FE]            AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  null)  {  if(isNaN()  ||  isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  null)  {  if(isNaN()  ||  isNaN())  {  return  this;  }	  if(x.sign!=    null)    {    if(isNaN())    {    return    this;    }    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	52	None	replace
160	[BUG]  [BUGGY]  if(x.sign  ==  FINITE)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign  ==  FINITE)  {  return  null;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign  ==  FINITE)  {  return  null;  }	  if(x.nans    ==    FINITE)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
161	[BUG]  [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	result  =  newInstance(this);  result  =  newInstance(x);	  if(mant!=    null)    {    result    =    newInstance(this);    result    =    newInstance(x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  0)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(x.sign!=  0)  {  if(isNaN())  {  return  this;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	4	1	replace
163	[BUG]  [BUGGY]  if(x.sign!=  0)  {  if(isNaN())  {  return  this;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x.sign!=  0)  {  if(isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x.sign!=  0)  {  if(isNaN())  {  return  this;  }	  if(x.nans    ==    FINITE)    {    if(isNaN())    {    return    this;    }    	compilable	  [FE]  AssertionError  	4	1	replace
164	[BUG]  [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [CE]  incomparable  types:  int[]  and  byte  [FE]              AssertionError      [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(x!=  null)  {  if(nans  ==  INFINITE  &&  mant  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  if(sign!=    null)    {    if(nans    ==    INFINITE    &&    nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    }    	non-compiled	[CE]  incomparable  types:  int[]  and  byte	65	None	replace
165	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if  [CE]  '('  expected  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]          if(x.nans    ==    FINITE)    {    return    this;    }    if(x.nans!=  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	                if(x.nans        ==        FINITE)        {        return        this;        }        if(x.nans!=    FINITE)    {    return    this;    }    if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if(x.nans  ==  FINITE)  {  return  this;  }  if	  	non-compiled	[CE]  '('  expected	30	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  if(x.sign!=    0)    {    	compilable	  [FE]  AssertionError  	60	1	replace
167	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]      result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  if(x.sign!=    0)    {    	compilable	  [FE]  AssertionError  	60	1	replace
168	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  if(Nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }      [BUGGY]  if(nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  if(Nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }  [BUGGY]      if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	if(nans    ==    FINITE)    {    if(!isNaN())    {    return    this;    }    if(Nans  ==  FINITE)  {  if(!isNaN())  {  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
