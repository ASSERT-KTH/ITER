bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [CE]  cannot  find  symbol  FLAG_INT  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  x,  newInstance(getZero(),  MULTIPLY_TRAP));	  result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	27	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	result.nans  =  1;	  result.nans    =    0;    nans    =    0;    	compilable	  [FE]  AssertionError  	5	1	replace
3	[BUG]  [BUGGY]  result.nans  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans  =  1;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans  =  1;	  result.nans    =    0;    nans    =    0;    	compilable	  [FE]  AssertionError  	5	1	replace
4	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()    	non-compiled	[CE]  ')'  expected	23	None	replace
5	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  +  ')'  expected);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  +  ')'  expected);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  +  ')'  expected);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()    	non-compiled	[CE]  ')'  expected	23	None	replace
6	[BUG]  [BUGGY]  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  Result  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    Result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  Result	19	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	result.nans        =        0;        result.nans    =    0;    result.nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
8	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans        =        0;        result.nans    =    0;    result.nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
9	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  Result.nans  =  0;  result.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  Result.nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans        =        0;        result.nans    =    0;    Result.nans  =  0;  result.nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	result.nans        =        0;        result.nans    =    0;    nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
11	[BUG]  [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    result.nans  =  0;  nans  =  0;  result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans        =        0;        result.nans    =    0;    nans  =  0;  result.nans  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
12	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  field);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  field);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	26	None	replace
13	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	21	None	replace
14	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MIN_EXP,  newInstance(getZero()),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	21	None	replace
15	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero()),  x);  [CE]  cannot  find  symbol  FLAG_INT  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero()),  x);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero()),  x);	  result    =    dotrap(DfpField.FLAG_INT,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	22	None	replace
16	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  RADIX,  newInstance(getZero()),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZer    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	24	None	replace
17	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()),  field);  [CE]  cannot  find  symbol  X  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()),  field);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()),  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  X	16	None	replace
18	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero()),  field);  [CE]  cannot  find  symbol  FLAG_INT  [FE]              AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero()),  field);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero()),  field);	  result    =    dotrap(DfpField.FLAG_INT,    X,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	7	None	replace
19	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	18	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	result.nans        =        0;        nans    =    0;    result.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
21	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans        =        0;        nans    =    0;    result.nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	result.nans        =        0;        nans    =    0;    nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
23	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans        =        0;        nans    =    0;    nans  =  0;  nans  =  0;	  	compilable	  [FE]  AssertionError  	4	1	add
24	[BUG]  [BUGGY]  result.nans    =    0;    nans  =  0;  Result.nans  =  0;  nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result.nans    =    0;    nans  =  0;  Result.nans  =  0;  nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans        =        0;        nans    =    0;    Result.nans  =  0;  nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	4	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result.nans        =        QNAN;        nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	11	1	add
26	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	11	1	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result.nans        =        QNAN;        nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	11	1	add
28	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	11	1	add
29	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  Result.nans  =  QNAN;  nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  Result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    Result.nans  =  QNAN;  nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	11	None	add
30	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	14	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	17	1	add
32	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	17	1	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	17	1	add
34	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	17	1	add
35	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),	  	non-compiled	[CE]  ')'  expected	17	None	add
36	[BUG]  [BUGGY]  Result.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  Result.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	Result.nans  =  QNAN;	          result.nans    =    QNAN;    Result.nans    =    QNAN;    	non-compiled	[CE]  cannot  find  symbol  Result	10	None	replace
37	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  field),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)	15	None	replace
38	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  X  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  X	15	None	replace
39	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  SNAN,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  SNAN,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  SNAN,  newInstance(getZero()),  result);	  result    =    dotrap(DfpField.FLAG_INT,    x,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	6	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	8	1	add
41	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	8	1	add
42	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  Result.nans  =  QNAN;  result.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  Result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    Result.nans  =  QNAN;  result.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	8	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	8	1	add
44	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	8	1	add
45	[BUG]  [BUGGY]  Result.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  Result.nans  =  0;  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	Result.nans  =  0;	  result.nans    =    0;    Result.nans    =    0;    	non-compiled	[CE]  cannot  find  symbol  Result	3	None	replace
46	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  RADIX,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	13	None	replace
47	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  x,  MULTIPLY_TRAP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	13	None	replace
48	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [CE]  no  suitable  method  found  for  newInstance(Dfp,String)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  MULTIPLY_TRAP));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,String)	25	None	replace
49	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	25	None	replace
50	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [CE]  cannot  find  symbol  FLAG_INT  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  RADIX));	  result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	27	None	replace
51	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	18	None	replace
52	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  field);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  field);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    field,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	14	None	replace
53	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	21	None	replace
54	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	26	None	replace
55	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  RADIX),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  RADIX),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero(),  RADIX),  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	15	None	replace
56	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  NEG_INFINITY_STRING);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  NEG_INFINITY_STRING);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  NEG_INFINITY_STRING);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    Result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	19	None	replace
57	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero(),  x));  [CE]  cannot  find  symbol  X  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  X	25	None	replace
58	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  RADIX,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  RADIX,  newInstance(getZero()),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  RADIX,  newInstance(getZero()),  result);	  result    =    dotrap(DfpField.FLAG_INT,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	22	None	replace
59	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]              AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero(),  RADIX),  result);	  result    =    dotrap(DfpField.FLAG_INT,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	22	None	replace
60	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero(),  x));  [CE]  cannot  find  symbol  FLAG_INT  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INT,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	22	None	replace
61	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero(),  x));  [CE]  cannot  find  symbol  FLAG_INT  [FE]              AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INT,    X,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	7	None	replace
62	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  field);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  field);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	25	None	replace
63	[BUG]  [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result        =        dotrap(DfpField.FLAG_INVALID,        MULTIPLY_TRAP,        newInstance(getZero()),        result);        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()	  	non-compiled	[CE]  ')'  expected	17	None	add
64	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x);	          result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZer    	non-compiled	[CE]  ')'  expected	24	None	replace
65	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);	  result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero(),    x));    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	27	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  result.nans  =  QNAN;  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	8	1	add
67	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  result.nans  =  QNAN;  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	8	1	add
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x  <  0  ||  x  >=  RADIX)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    if(x  <  0  ||  x  >=  RADIX)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	8	1	add
69	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x  <  0  ||  x  >=  RADIX)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x  <  0  ||  x  >=  RADIX)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    if(x  <  0  ||  x  >=  RADIX)  {  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }	  	compilable	  [FE]  AssertionError  	8	1	add
70	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()));  [CE]  cannot  find  symbol  X  [FE]            AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  newInstance(getZero()));	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  X	26	None	replace
71	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]        AssertionError      [CONTEXT]      }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x));  [BUGGY]      result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero(),  x));	  result    =    dotrap(DfpField.FLAG_INVALID,    MIN_EXP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	21	None	replace
