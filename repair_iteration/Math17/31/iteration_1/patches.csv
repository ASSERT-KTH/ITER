bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result.nans  =  0;  result.nans  =  0;  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	result.nans    =    0;    result.nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
2	[BUG]  [BUGGY]  result.nans  =  0;  result.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result.nans  =  0;  result.nans  =  0;  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans    =    0;    result.nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
3	[BUG]  [BUGGY]  result.nans  =  0;  Result.nans  =  0;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result.nans  =  0;  Result.nans  =  0;  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans    =    0;    Result.nans  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Result	7	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result.nans  =  0;  nans  =  0;  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	result.nans    =    0;    nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
5	[BUG]  [BUGGY]  result.nans  =  0;  nans  =  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result.nans  =  0;  nans  =  0;  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans    =    0;    nans  =  0;	  	compilable	  [FE]  AssertionError  	7	1	add
6	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  x,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  x,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  x,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	10	None	replace
7	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]          AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  X,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	10	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	        result.nans    =    QNAN;    result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
9	[BUG]  [BUGGY]      result.nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	        result.nans    =    QNAN;    result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
10	[BUG]  [BUGGY]      result.nans  =  QNAN;  Result.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result.nans  =  QNAN;  Result.nans  =  QNAN;  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	        result.nans    =    QNAN;    Result.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	4	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	        result.nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
12	[BUG]  [BUGGY]      result.nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	        result.nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
13	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	1	None	replace
15	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	3	None	replace
16	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	3	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	2	1	add
18	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	2	1	add
19	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	non-compiled	[CE]  cannot  find  symbol  Result	2	None	add
20	[BUG]  [BUGGY]  result.nans  =  NAN;  [CE]  cannot  find  symbol  NAN  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result.nans  =  NAN;  [BUGGY]    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result.nans  =  NAN;	  result.nans    =    RADIX;    	non-compiled	[CE]  cannot  find  symbol  NAN	6	None	replace
21	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MIN_EXP,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	3	None	replace
22	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  FLAG_INT  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero()),  result);  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MIN_EXP,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	10	None	replace
23	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()	  	non-compiled	[CE]  ')'  expected	2	None	add
24	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZer  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZer  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZer	  	non-compiled	[CE]  ')'  expected	2	None	add
25	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]    AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	3	None	replace
26	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()));  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	1	None	replace
27	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [CE]  cannot  find  symbol  FLAG_INT  [FE]        AssertionError    [CONTEXT]    }  if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());    [BUGGY]  result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [BUGGY]    result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	result  =  dotrap(DfpField.FLAG_INT,  MULTIPLY_TRAP,  newInstance(getZero(),  x));	      result    =    dotrap(DfpField.FLAG_INT,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INT	10	None	replace
