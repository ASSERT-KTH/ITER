bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (isNaN()) { [FE] AssertionError [CONTEXT] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { [BUGGY] if (isNaN()) { [BUGGY] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { [BUGGY] [BUGGY] if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	
3	[BUG] [BUGGY] return this; [FE] AssertionError [CONTEXT] final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { [BUGGY] return this; [BUGGY] } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { [BUGGY] [BUGGY] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	add	
5	[BUG] [BUGGY] if (x.isNaN()) { [FE] AssertionError [CONTEXT] } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } [BUGGY] if (x.isNaN()) { [BUGGY] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1514	1514	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } [BUGGY] [BUGGY] if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1514	1514	1	add	
7	[BUG] [BUGGY] return x; [FE] AssertionError [CONTEXT] Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { [BUGGY] return x; [BUGGY] } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1515	1515	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { [BUGGY] [BUGGY] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1515	1515	1	add	
9	[BUG] [BUGGY] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [FE] AssertionError [CONTEXT]  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } [BUGGY] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [BUGGY] result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } [BUGGY] [BUGGY] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	
11	[BUG] [BUGGY] result = newInstance(this); [FE] AssertionError [CONTEXT] if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [BUGGY] result = newInstance(this); [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [BUGGY] [BUGGY] result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	
13	[BUG] [BUGGY] result.sign = (byte) (sign * x.sign); [FE] AssertionError [CONTEXT] if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); [BUGGY] result.sign = (byte) (sign * x.sign); [BUGGY] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); [BUGGY] [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	
15	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [BUGGY] return result; [BUGGY] } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [BUGGY] [BUGGY] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	
17	[BUG] [BUGGY] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [FE] AssertionError [CONTEXT] if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [BUGGY] result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] [BUGGY] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	
19	[BUG] [BUGGY] result = newInstance(x); [FE] AssertionError [CONTEXT] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [BUGGY] result = newInstance(x); [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1525	1525	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [BUGGY] [BUGGY] result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1525	1525	1	add	
21	[BUG] [BUGGY] result.sign = (byte) (sign * x.sign); [FE] AssertionError [CONTEXT] } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); [BUGGY] result.sign = (byte) (sign * x.sign); [BUGGY] return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); [BUGGY] [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1526	1526	1	add	
23	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); [BUGGY] return result; [BUGGY] } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); [BUGGY] [BUGGY] return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1527	1527	1	add	
25	[BUG] [BUGGY] if (x.nans == INFINITE && nans == INFINITE) { [FE] AssertionError [CONTEXT] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] if (x.nans == INFINITE && nans == INFINITE) { [BUGGY] result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1530	1530	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] [BUGGY] if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1530	1530	1	add	
27	[BUG] [BUGGY] result = newInstance(this); [FE] AssertionError [CONTEXT] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [BUGGY] result = newInstance(this); [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [BUGGY] [BUGGY] result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1531	1531	1	add	
29	[BUG] [BUGGY] result.sign = (byte) (sign * x.sign); [FE] AssertionError [CONTEXT] } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); [BUGGY] result.sign = (byte) (sign * x.sign); [BUGGY] return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1532	1532	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); [BUGGY] [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1532	1532	1	add	
31	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [BUGGY] return result; [BUGGY] } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1533	1533	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [BUGGY] [BUGGY] return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1533	1533	1	add	
33	[BUG] [BUGGY] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||  (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { [FE] AssertionError [CONTEXT] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||     (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { [BUGGY] (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } } int[] product = new int[mant.length*2];// Big enough to hold even the largest result [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] [BUGGY] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||     (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } } int[] product = new int[mant.length*2];// Big enough to hold even the largest result [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	
35	[BUG] [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [FE] AssertionError [CONTEXT] } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } } int[] product = new int[mant.length*2];// Big enough to hold even the largest result for (int i = 0; i < mant.length; i++) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { [BUGGY] [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } } int[] product = new int[mant.length*2];// Big enough to hold even the largest result for (int i = 0; i < mant.length; i++) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	
37	[BUG] [BUGGY] result = newInstance(getZero()); [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] result = newInstance(getZero()); [BUGGY] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1539	1539	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] [BUGGY] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1539	1539	1	add	
39	[BUG] [BUGGY] result.nans = QNAN; [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [BUGGY] result.nans = QNAN; [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [BUGGY] [BUGGY] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1540	1540	1	add	
41	[BUG] [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [BUGGY] return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [BUGGY] [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1541	1541	1	add	
43	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [BUGGY] return result; [BUGGY] } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1542	1542	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); [BUGGY] [BUGGY] return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1542	1542	1	add	
45	[BUG] [BUGGY] if (isNaN()) { [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { [BUGGY] if (isNaN()) { [BUGGY] return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1616	1616	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { [BUGGY] [BUGGY] if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1616	1616	1	add	
47	[BUG] [BUGGY] return this; [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { [BUGGY] return this; [BUGGY] } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1617	1617	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { [BUGGY] [BUGGY] return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1617	1617	1	add	
49	[BUG] [BUGGY] if (nans == INFINITE && x != 0) { [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { return this; } [BUGGY] if (nans == INFINITE && x != 0) { [BUGGY] result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1620	1620	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { return this; } [BUGGY] [BUGGY] if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1620	1620	1	add	
51	[BUG] [BUGGY] result = newInstance(this); [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { [BUGGY] result = newInstance(this); [BUGGY] return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { [BUGGY] [BUGGY] result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	
53	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); [BUGGY] return result; [BUGGY] } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); [BUGGY] [BUGGY] return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1622	1622	1	add	
55	[BUG] [BUGGY] if (nans == INFINITE && x == 0) { [FE] AssertionError [CONTEXT] if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } [BUGGY] if (nans == INFINITE && x == 0) { [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1625	1625	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } [BUGGY] [BUGGY] if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1625	1625	1	add	
57	[BUG] [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [FE] AssertionError [CONTEXT] if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1626	1626	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { [BUGGY] [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1626	1626	1	add	
59	[BUG] [BUGGY] result = newInstance(getZero()); [FE] AssertionError [CONTEXT] return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] result = newInstance(getZero()); [BUGGY] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1627	1627	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] [BUGGY] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1627	1627	1	add	
61	[BUG] [BUGGY] result.nans = QNAN; [FE] AssertionError [CONTEXT] } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [BUGGY] result.nans = QNAN; [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [BUGGY] [BUGGY] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1628	1628	1	add	
63	[BUG] [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); [FE] AssertionError [CONTEXT] if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); [BUGGY] return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1629	1629	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [BUGGY] [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1629	1629	1	add	
65	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); [BUGGY] return result; [BUGGY] } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); [BUGGY] [BUGGY] return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	
67	[BUG] [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [FE] AssertionError [CONTEXT] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1636	1636	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { [BUGGY] [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1636	1636	1	add	
69	[BUG] [BUGGY] result = newInstance(getZero()); [FE] AssertionError [CONTEXT] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] result = newInstance(getZero()); [BUGGY] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1637	1637	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); [BUGGY] [BUGGY] result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1637	1637	1	add	
71	[BUG] [BUGGY] result.nans = QNAN; [FE] AssertionError [CONTEXT] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [BUGGY] result.nans = QNAN; [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); [BUGGY] [BUGGY] result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1638	1638	1	add	
73	[BUG] [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); [FE] AssertionError [CONTEXT] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); [BUGGY] return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; }  [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; [BUGGY] [BUGGY] result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; }  [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1639	1639	1	add	
75	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); [BUGGY] return result; [BUGGY] } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1640	1640	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return result; } }  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); [BUGGY] [BUGGY] return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1640	1640	1	add	
77	[BUG] [BUGGY] lostdigit = result.mant[0]; [FE] AssertionError [CONTEXT] int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { [BUGGY] lostdigit = result.mant[0]; [BUGGY] result.shiftRight(); result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1652	1652	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { [BUGGY] [BUGGY] lostdigit = result.mant[0]; result.shiftRight(); result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1652	1652	1	add	
79	[BUG] [BUGGY] result.shiftRight(); [FE] AssertionError [CONTEXT] int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; [BUGGY] result.shiftRight(); [BUGGY] result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { result = dotrap(excp, MULTIPLY_TRAP, result, result); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; [BUGGY] [BUGGY] result.shiftRight(); result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { result = dotrap(excp, MULTIPLY_TRAP, result, result); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1653	1653	1	add	
81	[BUG] [BUGGY] result.mant[mant.length-1] = rh; [FE] AssertionError [CONTEXT] for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); [BUGGY] result.mant[mant.length-1] = rh; [BUGGY] } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { result = dotrap(excp, MULTIPLY_TRAP, result, result); } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); [BUGGY] [BUGGY] result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { result = dotrap(excp, MULTIPLY_TRAP, result, result); } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1654	1654	1	add	
83	[BUG] [BUGGY] result.exp = 0; [FE] AssertionError [CONTEXT] } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero [BUGGY] result.exp = 0; [BUGGY] } final int excp = result.round(lostdigit); if (excp != 0) { result = dotrap(excp, MULTIPLY_TRAP, result, result); } return result; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1658	1658	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero [BUGGY] [BUGGY] result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { result = dotrap(excp, MULTIPLY_TRAP, result, result); } return result; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1658	1658	1	add	
85	[BUG] [BUGGY] result = dotrap(excp, MULTIPLY_TRAP, result, result); [FE] AssertionError [CONTEXT] result.shiftRight(); result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { [BUGGY] result = dotrap(excp, MULTIPLY_TRAP, result, result); [BUGGY] } return result; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1663	1663	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] result.shiftRight(); result.mant[mant.length-1] = rh; } if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero result.exp = 0; } final int excp = result.round(lostdigit); if (excp != 0) { [BUGGY] [BUGGY] result = dotrap(excp, MULTIPLY_TRAP, result, result); } return result; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1663	1663	1	add	
87	[BUG] [BUGGY] return multiplyFast(x); [FE] AssertionError [CONTEXT] public Dfp multiply(final int x) { [BUGGY] return multiplyFast(x); [BUGGY] } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  final int x [VARIABLES] DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1603	1603	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Dfp multiply(final int x) { [BUGGY] [BUGGY] return multiplyFast(x); } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  final int x [VARIABLES] DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1603	1603	1	add	
89	[BUG] [BUGGY] Dfp result = newInstance(this); [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { [BUGGY] Dfp result = newInstance(this); [BUGGY]   if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { [BUGGY] [BUGGY] Dfp result = newInstance(this);  if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1612	1612	1	add	
91	[BUG] [BUGGY] if (nans != FINITE) { [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  [BUGGY] if (nans != FINITE) { [BUGGY] if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1615	1615	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private Dfp multiplyFast(final int x) { Dfp result = newInstance(this);  [BUGGY] [BUGGY] if (nans != FINITE) { if (isNaN()) { return this; } if (nans == INFINITE && x != 0) { result = newInstance(this); return result; } if (nans == INFINITE && x == 0) { [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1615	1615	1	add	
93	[BUG] [BUGGY] if (x < 0 || x >= RADIX) { [FE] AssertionError [CONTEXT] if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  [BUGGY] if (x < 0 || x >= RADIX) { [BUGGY] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1635	1635	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (nans == INFINITE && x == 0) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result); return result; } }  [BUGGY] [BUGGY] if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1635	1635	1	add	
95	[BUG] [BUGGY] int rh = 0; [FE] AssertionError [CONTEXT]  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } [BUGGY] int rh = 0; [BUGGY] for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1643	1643	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } [BUGGY] [BUGGY] int rh = 0; for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1643	1643	1	add	
97	[BUG] [BUGGY] for (int i = 0; i < mant.length; i++) { [FE] AssertionError [CONTEXT]  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; [BUGGY] for (int i = 0; i < mant.length; i++) { [BUGGY] final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); result.mant[mant.length-1] = rh; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; [BUGGY] [BUGGY] for (int i = 0; i < mant.length; i++) { final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); result.mant[mant.length-1] = rh; [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	add	
99	[BUG] [BUGGY] final int r = mant[i] * x + rh; [FE] AssertionError [CONTEXT] if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { [BUGGY] final int r = mant[i] * x + rh; [BUGGY] rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); result.mant[mant.length-1] = rh; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (x < 0 || x >= RADIX) { field.setIEEEFlagsBits(DfpField.FLAG_INVALID); result = newInstance(getZero()); result.nans = QNAN; result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result); return result; } int rh = 0; for (int i = 0; i < mant.length; i++) { [BUGGY] [BUGGY] final int r = mant[i] * x + rh; rh = r / RADIX; result.mant[i] = r - rh * RADIX; } int lostdigit = 0; if (rh != 0) { lostdigit = result.mant[0]; result.shiftRight(); result.mant[mant.length-1] = rh; } [CLASS] Dfp [METHOD] multiplyFast [RETURN_TYPE] Dfp  final int x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	
