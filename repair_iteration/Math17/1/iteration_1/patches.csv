bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(x.isInfinite())  {  if(x.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isInfinite())  {  if(x.isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite())    {    if(x.isInfinite())  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
2	[BUG]  [BUGGY]  if(x.isInfinite())  {  If(x.isInfinite())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isInfinite())  {  If(x.isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite())    {    If(x.isInfinite())  {	  	non-compiled	[CE]  ';'  expected	15	None	add
3	[BUG]  [BUGGY]  ((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  ((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);	      ((    x.nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  int[]  mant  =  x.mant.split( ", ",  nans);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  int[]  mant  =  x.mant.split( ", ",  nans);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.mant.split( ", ",  nans);	      int[]    mant    =    x.mant.split(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isInfinite()  ||  x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.isInfinite()  ||  x.isNaN())  {	  if(x.isInfinite())    {    	compilable	  [FE]  AssertionError  	16	1	replace
6	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isInfinite()  ||  x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()  ||  x.isNaN())  {	  if(x.isInfinite())    {    	compilable	  [FE]  AssertionError  	16	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.nans  ==  FINITE)  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.nans  ==  FINITE)  {	  if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	14	1	replace
8	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.nans  ==  FINITE)  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.nans  ==  FINITE)  {	  if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	14	1	replace
9	[BUG]  [BUGGY]  x  =  newInstance(this,  result);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  x  =  newInstance(this,  result);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(this,  result);	      x    =    newInstance(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  if(!isNaN())  {  if(!isNaN())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!isNaN())  {  if(!isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNaN())    {    if(!isNaN())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
11	[BUG]  [BUGGY]  if(!isNaN())  {  If(!isNaN())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!isNaN())  {  If(!isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNaN())    {    If(!isNaN())  {	  	non-compiled	[CE]  ';'  expected	5	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
13	[BUG]  [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	2	1	add
14	[BUG]  [BUGGY]      x.nans  =  QNAN;  ||  x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  ||  x.nans  ==  FINITE)  {  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	        x.nans    =    QNAN;    ||  x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
15	[BUG]  [BUGGY]      x.nans  =  QNAN;  ||  x.nans!=  FINITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  ||  x.nans!=  FINITE)  {  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	        x.nans    =    QNAN;    ||  x.nans!=  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
16	[BUG]  [BUGGY]  int[]  mant  =  x.mant,  x.nans.toIntArray();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  int[]  mant  =  x.mant,  x.nans.toIntArray();  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.mant,  x.nans.toIntArray();	      int[]    mant    =    x.mant.toIntArray();    	non-compiled	[CE]  ';'  expected	10	None	replace
17	[BUG]  [BUGGY]  x.nans  =  SNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  x.nans  =  SNAN;  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  SNAN;	      x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  x.nans  =  NAN;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  x.nans  =  NAN;  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  NAN;	      x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  ((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  null);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  ((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  null);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  null);	      ((    x.nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    null);    	non-compiled	[CE]  not  a  statement	1	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!isInfinite())  {	  if(!isNaN())    {    	compilable	  [FE]  AssertionError  	6	1	replace
21	[BUG]  [BUGGY]  if(!isInfinite())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isInfinite())  {	  if(!isNaN())    {    	compilable	  [FE]  AssertionError  	6	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!isNaN()  ||!x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!isNaN()  ||!x.isNaN())  {	  if(!isNaN())    {    	compilable	  [FE]  AssertionError  	6	1	replace
23	[BUG]  [BUGGY]  if(!isNaN()  ||!x.isNaN())  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!isNaN()  ||!x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNaN()  ||!x.isNaN())  {	  if(!isNaN())    {    	compilable	  [FE]  AssertionError  	6	1	replace
24	[BUG]  [BUGGY]  x  =  x.nans;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  x  =  x.nans;  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  x.nans;	      x    =    result.nans;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  x  =  newInstance(getNan());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  x  =  newInstance(getNan());  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(getNan());	      x    =    newInstance(getZero());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  int[]  mant  =  x.mant,  x.nans.toInt();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  int[]  mant  =  x.mant,  x.nans.toInt();  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.mant,  x.nans.toInt();	      int[]    mant    =    x.mant.toInt();    	non-compiled	[CE]  ';'  expected	12	None	replace
27	[BUG]  [BUGGY]  if(x.isNaN())  {  if(x.isNaN())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isNaN())  {  if(x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isNaN())    {    if(x.isNaN())  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
28	[BUG]  [BUGGY]  if(x.isNaN())  {  If(x.isNaN())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isNaN())  {  If(x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isNaN())    {    If(x.isNaN())  {	  	non-compiled	[CE]  ';'  expected	13	None	add
29	[BUG]  [BUGGY]  if(!isInFINITE)  {  [CE]  cannot  find  symbol  isInFINITE  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!isInFINITE)  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isInFINITE)  {	  if(!isNaN())    {    	non-compiled	[CE]  cannot  find  symbol  isInFINITE	6	None	replace
30	[BUG]  [BUGGY]  x  =  newInstance(getZero(),  nans);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  x  =  newInstance(getZero(),  nans);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(getZero(),  nans);	      x    =    newInstance(getZero());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!x.isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!x.isInfinite())  {	  if(x.isInfinite())    {    	compilable	  [FE]  AssertionError  	16	1	replace
32	[BUG]  [BUGGY]  if(!x.isInfinite())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!x.isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!x.isInfinite())  {	  if(x.isInfinite())    {    	compilable	  [FE]  AssertionError  	16	1	replace
33	[BUG]  [BUGGY]      x.nans  =  QNAN;  ((  QNAN)x.nans).setImmediateDigits(false);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  ((  QNAN)x.nans).setImmediateDigits(false);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	        x.nans    =    QNAN;    ((  QNAN)x.nans).setImmediateDigits(false);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
34	[BUG]  [BUGGY]      x.nans  =  QNAN;  ((  QNAN)x.nans).setImmediateDigits(true);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  ((  QNAN)x.nans).setImmediateDigits(true);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	        x.nans    =    QNAN;    ((  QNAN)x.nans).setImmediateDigits(true);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
35	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE  ||  x.nans!=  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  ((  x.nans  ==  FINITE  ||  x.nans!=  FINITE)?  this  :  x);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE  ||  x.nans!=  FINITE)?  this  :  x);	      ((    x.nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	4	None	replace
36	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE  ||  x.nans!=  FINITE)?  this  :  null);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  ((  x.nans  ==  FINITE  ||  x.nans!=  FINITE)?  this  :  null);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE  ||  x.nans!=  FINITE)?  this  :  null);	      ((    x.nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    null);    	non-compiled	[CE]  not  a  statement	1	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x!=  null  ||  x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x!=  null  ||  x.isNaN())  {	  if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	14	1	replace
38	[BUG]  [BUGGY]  if(x!=  null  ||  x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x!=  null  ||  x.isNaN())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=  null  ||  x.isNaN())  {	  if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	14	1	replace
39	[BUG]  [BUGGY]  x.nans  =  0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  x.nans  =  0;  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  0;	      x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans  ==  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans  ==  FINITE)?  this  :  x);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.nans  ==  FINITE)?  this  :  x);	      ((    x.nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	4	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isInfinite()  ||  x.isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.isInfinite()  ||  x.isInfinite())  {	  if(x.isInfinite())    {    	compilable	  [FE]  AssertionError  	16	1	replace
42	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isInfinite())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(x.isInfinite()  ||  x.isInfinite())  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()  ||  x.isInfinite())  {	  if(x.isInfinite())    {    	compilable	  [FE]  AssertionError  	16	1	replace
43	[BUG]  [BUGGY]      x.nans  =  QNAN;  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	        x.nans    =    QNAN;    ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;	  	non-compiled	[CE]  not  a  statement	2	None	add
44	[BUG]  [BUGGY]      x.nans  =  QNAN;  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]      x.nans  =  QNAN;  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	        x.nans    =    QNAN;    ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {	  	non-compiled	[CE]  not  a  statement	2	None	add
45	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans  ==  FINITE)?  this  :  null);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans  ==  FINITE)?  this  :  null);  [BUGGY]    if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.nans  ==  FINITE)?  this  :  null);	      ((    x.nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    null);    	non-compiled	[CE]  not  a  statement	1	None	replace
46	[BUG]  [BUGGY]  if(!bsign)  {  [CE]  cannot  find  symbol  bsign  [FE]    AssertionError    [CONTEXT]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {    [BUGGY]  if(!bsign)  {  [BUGGY]    return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!bsign)  {	  if(!isNaN())    {    	non-compiled	[CE]  cannot  find  symbol  bsign	6	None	replace
