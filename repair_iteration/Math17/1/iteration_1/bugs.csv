bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  null);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  null);  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  null);		non-compiled	[CE]  not  a  statement	2	None	add
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    x.nans  =  QNAN;  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	    x.nans  =  QNAN;		compilable	  [FE]  AssertionError  	2	1	add
3	[BUG]  [BUGGY]    x.nans  =  QNAN;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    x.nans  =  QNAN;  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    x.nans  =  QNAN;		compilable	  [FE]  AssertionError  	2	1	add
4	[BUG]  [BUGGY]    ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);		non-compiled	[CE]  not  a  statement	2	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]  if(!isNaN())  {  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!isNaN())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionError  	1	1	replace
6	[BUG]  [BUGGY]  if(!isNaN())  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]  if(!isNaN())  {  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNaN())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionError  	1	1	replace
7	[BUG]  [BUGGY]    x  =  newInstance(getZero());  [CE]  final  parameter  x  may  not  be  assigned  [FE]    AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    x  =  newInstance(getZero());  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    x  =  newInstance(getZero());		non-compiled	[CE]  final  parameter  x  may  not  be  assigned	2	None	add
8	[BUG]  [BUGGY]    x  =  result.nans;  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    x  =  result.nans;  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    x  =  result.nans;		non-compiled	[CE]  incompatible  types	2	None	add
9	[BUG]  [BUGGY]    x  =  newInstance(this);  [CE]  final  parameter  x  may  not  be  assigned  [FE]        AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    x  =  newInstance(this);  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    x  =  newInstance(this);		non-compiled	[CE]  final  parameter  x  may  not  be  assigned	2	None	add
10	[BUG]  [BUGGY]    int[]  mant  =  x.mant.toIntArray();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    int[]  mant  =  x.mant.toIntArray();  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    int[]  mant  =  x.mant.toIntArray();		non-compiled	[CE]  cannot  find  symbol	2	None	add
11	[BUG]  [BUGGY]    int[]  mant  =  x.mant.split( ", ");  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    int[]  mant  =  x.mant.split( ", ");  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    int[]  mant  =  x.mant.split( ", ");		non-compiled	[CE]  cannot  find  symbol	2	None	add
12	[BUG]  [BUGGY]    int[]  mant  =  x.mant.toInt();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]    int[]  mant  =  x.mant.toInt();  [BUGGY]  if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	    int[]  mant  =  x.mant.toInt();		non-compiled	[CE]  cannot  find  symbol	2	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]  if(x.isNaN())  {  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.isNaN())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionError  	1	1	replace
14	[BUG]  [BUGGY]  if(x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]  if(x.isNaN())  {  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isNaN())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionError  	1	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]  if(x.isInfinite())  {  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.isInfinite())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionError  	1	1	replace
16	[BUG]  [BUGGY]  if(x.isInfinite())  {  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {  [BUGGY]  if(x.isInfinite())  {  [BUGGY]  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionError  	1	1	replace
