bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  mant  =  x.nans,  x.mant.toIntArray();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  int[]  mant  =  x.nans,  x.mant.toIntArray();  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.nans,  x.mant.toIntArray();	  int[]    mant    =    x.mant,    x.nans.toIntArray();    	non-compiled	[CE]  ';'  expected	16	None	replace
2	[BUG]  [BUGGY]  int[]  mant  =  x.mant,  nans.toIntArray();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  int[]  mant  =  x.mant,  nans.toIntArray();  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.mant,  nans.toIntArray();	  int[]    mant    =    x.mant,    x.nans.toIntArray();    	non-compiled	[CE]  ';'  expected	16	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null  ||  x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x!=  null  ||  x.nans  ==  FINITE)  {	  if(x!=    null    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	38	1	replace
4	[BUG]  [BUGGY]  if(x!=  null  ||  x.nans  ==  FINITE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null  ||  x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=  null  ||  x.nans  ==  FINITE)  {	  if(x!=    null    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	38	1	replace
5	[BUG]  [BUGGY]  if(!isNaN()  ||!x.isNaN())  {  if(!isNaN()  ||!x.isNaN())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isNaN()  ||!x.isNaN())  {  if(!isNaN()  ||!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNaN()    ||!x.isNaN())    {    if(!isNaN()  ||!x.isNaN())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
6	[BUG]  [BUGGY]  if(!isNaN()  ||!x.isNaN())  {  If(!isNaN()  ||!x.isNaN())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isNaN()  ||!x.isNaN())  {  If(!isNaN()  ||!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNaN()    ||!x.isNaN())    {    If(!isNaN()  ||!x.isNaN())  {	  	non-compiled	[CE]  ';'  expected	22	None	add
7	[BUG]  [BUGGY]  if(!isInfinite())  {  if(!isInfinite())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isInfinite())  {  if(!isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isInfinite())    {    if(!isInfinite())  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
8	[BUG]  [BUGGY]  if(!isInfinite())  {  If(!isInfinite())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isInfinite())  {  If(!isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isInfinite())    {    If(!isInfinite())  {	  	non-compiled	[CE]  ';'  expected	20	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isNaN()  ||  x.isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.isNaN()  ||  x.isInfinite())  {	  if(x.isInfinite()    ||    x.isInfinite())    {    	compilable	  [FE]  AssertionError  	42	1	replace
10	[BUG]  [BUGGY]  if(x.isNaN()  ||  x.isInfinite())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isNaN()  ||  x.isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isNaN()  ||  x.isInfinite())  {	  if(x.isInfinite()    ||    x.isInfinite())    {    	compilable	  [FE]  AssertionError  	42	1	replace
11	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant  ==  FINITE)?  this  :  null);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant  ==  FINITE)?  this  :  null);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.mant  ==  FINITE)?  this  :  null);	  ((    x.nans    ==    FINITE)&&    x.nans    ==    FINITE)?    this    :    null);    	non-compiled	[CE]  not  a  statement	45	None	replace
12	[BUG]  [BUGGY]  ||  x.nans!=  FINITE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ||  x.nans!=  FINITE)  {  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	||  x.nans!=  FINITE)  {	          x.nans    =    QNAN;    ||    x.nans!=    FINITE)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isNaN())  {  if(x.isInfinite()  ||  x.isNaN())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.isNaN())  {  if(x.isInfinite()  ||  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()    ||    x.isNaN())    {    if(x.isInfinite()  ||  x.isNaN())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
14	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isNaN())  {  If(x.isInfinite()  ||  x.isNaN())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.isNaN())  {  If(x.isInfinite()  ||  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()    ||    x.isNaN())    {    If(x.isInfinite()  ||  x.isNaN())  {	  	non-compiled	[CE]  ';'  expected	5	None	add
15	[BUG]  [BUGGY]  x  =  newInstance(getZero(),  result);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  newInstance(getZero(),  result);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(getZero(),  result);	  x    =    newInstance(getZero(),    nans);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
16	[BUG]  [BUGGY]  x  =  newInstance(getZero(),  result.nans);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  newInstance(getZero(),  result.nans);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(getZero(),  result.nans);	  x    =    newInstance(getZero(),    nans);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
17	[BUG]  [BUGGY]  if(!x.isInfinite())  {  if(!x.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!x.isInfinite())  {  if(!x.isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!x.isInfinite())    {    if(!x.isInfinite())  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
18	[BUG]  [BUGGY]  if(!x.isInfinite())  {  If(!x.isInfinite())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!x.isInfinite())  {  If(!x.isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!x.isInfinite())    {    If(!x.isInfinite())  {	  	non-compiled	[CE]  ';'  expected	31	None	add
19	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isInfinite())  {  if(x.isInfinite()  ||  x.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.isInfinite())  {  if(x.isInfinite()  ||  x.isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()    ||    x.isInfinite())    {    if(x.isInfinite()  ||  x.isInfinite())  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
20	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isInfinite())  {  If(x.isInfinite()  ||  x.isInfinite())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.isInfinite())  {  If(x.isInfinite()  ||  x.isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()    ||    x.isInfinite())    {    If(x.isInfinite()  ||  x.isInfinite())  {	  	non-compiled	[CE]  ';'  expected	41	None	add
21	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  nans);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  nans);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  nans);	  ((    nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	3	None	replace
22	[BUG]  [BUGGY]  if(x!=  null  ||  x.isNaN())  {  if(x!=  null  ||  x.isNaN())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null  ||  x.isNaN())  {  if(x!=  null  ||  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=    null    ||    x.isNaN())    {    if(x!=  null  ||  x.isNaN())  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
23	[BUG]  [BUGGY]  if(x!=  null  ||  x.isNaN())  {  if(x  ==  null  ||  x.isNaN())  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null  ||  x.isNaN())  {  if(x  ==  null  ||  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=    null    ||    x.isNaN())    {    if(x  ==  null  ||  x.isNaN())  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
24	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {	          x.nans    =    QNAN;    ((    x.nans    ==    FINITE)&&    x.mant[mant.length-1]!=    0))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
25	[BUG]  [BUGGY]  ||  x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ||  x.nans  ==  FINITE)  {  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	||  x.nans  ==  FINITE)  {	          x.nans    =    QNAN;    ||    x.nans    ==    FINITE)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant  ==  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant  ==  FINITE)?  this  :  x);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.mant  ==  FINITE)?  this  :  x);	  ((    x.nans    ==    FINITE)&&    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	40	None	replace
27	[BUG]  [BUGGY]  x.nans  =  NAN_STRING;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x.nans  =  NAN_STRING;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  NAN_STRING;	  x.nans    =    NAN;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE)    {    	compilable	  [FE]  AssertionError  	8	1	replace
29	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.nans  ==  FINITE  ||  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE)    {    	compilable	  [FE]  AssertionError  	8	1	replace
30	[BUG]  [BUGGY]  int[]  mant  =  x.nans,  x.mant.toInt();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  int[]  mant  =  x.nans,  x.mant.toInt();  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.nans,  x.mant.toInt();	  int[]    mant    =    x.mant,    x.nans.toInt();    	non-compiled	[CE]  ';'  expected	26	None	replace
31	[BUG]  [BUGGY]  int[]  mant  =  x.mant,  nans.toInt();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  int[]  mant  =  x.mant,  nans.toInt();  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.mant,  nans.toInt();	  int[]    mant    =    x.mant,    x.nans.toInt();    	non-compiled	[CE]  ';'  expected	26	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.isInfinite()  ||  x.nans  ==  FINITE)  {	  if(x.isInfinite()    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	6	1	replace
33	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.nans  ==  FINITE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()  ||  x.nans  ==  FINITE)  {	  if(x.isInfinite()    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	6	1	replace
34	[BUG]  [BUGGY]  x  =  newInstance(this,  result.nans);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  newInstance(this,  result.nans);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(this,  result.nans);	  x    =    newInstance(this,    result);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  x  =  newInstance(this,  result.mant);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  newInstance(this,  result.mant);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(this,  result.mant);	  x    =    newInstance(this,    result);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isNaN()  &&!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!isNaN()  &&!x.isNaN())  {	  if(!isNaN()    ||!x.isNaN())    {    	compilable	  [FE]  AssertionError  	23	1	replace
37	[BUG]  [BUGGY]  if(!isNaN()  &&!x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isNaN()  &&!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNaN()  &&!x.isNaN())  {	  if(!isNaN()    ||!x.isNaN())    {    	compilable	  [FE]  AssertionError  	23	1	replace
38	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;	          x.nans    =    QNAN;    ((    x.nans    ==    FINITE)&&    x.mant[mant.length-1]!=    0))    {    return    this;    	non-compiled	[CE]  not  a  statement	43	None	replace
39	[BUG]  [BUGGY]  x.nans  =  NON;  x.nans  =  QNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x.nans  =  NON;  x.nans  =  QNAN;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  NON;  x.nans  =  QNAN;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!x.isNaN())  {	  if(!x.isInfinite())    {    	compilable	  [FE]  AssertionError  	32	1	replace
41	[BUG]  [BUGGY]  if(!x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!x.isNaN())  {	  if(!x.isInfinite())    {    	compilable	  [FE]  AssertionError  	32	1	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!x.isInfinite()  ||!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!x.isInfinite()  ||!x.isNaN())  {	  if(!x.isInfinite())    {    	compilable	  [FE]  AssertionError  	32	1	replace
43	[BUG]  [BUGGY]  if(!x.isInfinite()  ||!x.isNaN())  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!x.isInfinite()  ||!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!x.isInfinite()  ||!x.isNaN())  {	  if(!x.isInfinite())    {    	compilable	  [FE]  AssertionError  	32	1	replace
44	[BUG]  [BUGGY]  x.nans  =  1;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x.nans  =  1;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  1;	  x.nans    =    0;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans!=  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.nans!=  FINITE)  {	  if(x.isNaN())    {    if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	27	1	replace
46	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans!=  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.nans!=  FINITE)  {	  if(x.isNaN())    {    if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	27	1	replace
47	[BUG]  [BUGGY]  if(!isInfinite())  {  If(!isNaN())  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isInfinite())  {  If(!isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isInfinite())  {  If(!isNaN())  {	  if(!isNaN())    {    If(!isNaN())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
48	[BUG]  [BUGGY]  if(!inFINITE)  {  [CE]  cannot  find  symbol  inFINITE  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!inFINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!inFINITE)  {	  if(!isInFINITE)    {    	non-compiled	[CE]  cannot  find  symbol  inFINITE	29	None	replace
49	[BUG]  [BUGGY]  if(!nans)  {  [CE]  bad  operand  type  byte  for  unary  operator  '!'  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!nans)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!nans)  {	  if(!isInFINITE)    {    	non-compiled	[CE]  bad  operand  type  byte  for  unary  operator  '!'	29	None	replace
50	[BUG]  [BUGGY]  ((  QNAN)x.nans).setImmediateDigits(false);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  QNAN)x.nans).setImmediateDigits(false);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  QNAN)x.nans).setImmediateDigits(false);	          x.nans    =    QNAN;    ((    QNAN)x.nans).setImmediateDigits(false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
51	[BUG]  [BUGGY]  x  =  x.nans  ||  x.nans!=  FINITE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  x.nans  ||  x.nans!=  FINITE;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  x.nans  ||  x.nans!=  FINITE;	  x    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
52	[BUG]  [BUGGY]  If(x.isNaN())  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  If(x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	If(x.isNaN())  {	  if(x.isInfinite())    {    If(x.isInfinite())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
53	[BUG]  [BUGGY]  if(!rsign)  {  [CE]  cannot  find  symbol  rsign  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!rsign)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!rsign)  {	  if(!bsign)    {    	non-compiled	[CE]  cannot  find  symbol  rsign	46	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	12	1	add
55	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	12	1	add
56	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN);	  	non-compiled	[CE]  ';'  expected	12	None	add
57	[BUG]  [BUGGY]  ((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  null  :  nans);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  null  :  nans);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  nans  ==  FINITE  ||  x.nans  ==  FINITE)?  null  :  nans);	  ((    nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    null);    	non-compiled	[CE]  not  a  statement	19	None	replace
58	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.nans    ==    FINITE)    {    if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
59	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  if(x.nans!=  FINITE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans  ==  FINITE)  {  if(x.nans!=  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.nans    ==    FINITE)    {    if(x.nans!=  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
60	[BUG]  [BUGGY]  int[]  mant  =  x.mant.split( ",n ",  nans);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  int[]  mant  =  x.mant.split( ",n ",  nans);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.mant.split( ",n ",  nans);	  int[]    mant    =    x.mant.split(   ",   ",    nans);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  if(!isNan())  {  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isNan())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNan())  {	  if(!isNaN())    {    If(!isNaN())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(nans  ==  FINITE)  {	  if(!isNaN())    {    if(!isNaN())    {    	compilable	  [FE]  AssertionError  	10	1	replace
63	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(nans  ==  FINITE)  {	  if(!isNaN())    {    if(!isNaN())    {    	compilable	  [FE]  AssertionError  	10	1	replace
64	[BUG]  [BUGGY]  ((  x  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  nans);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  nans);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  nans);	  ((    nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	3	None	replace
65	[BUG]  [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  SNAN;  x.nans  =  SNAN;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
66	[BUG]  [BUGGY]  if(x!=  null)  {  If(x.isNaN())  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null)  {  If(x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=  null)  {  If(x.isNaN())  {	  if(x.isNaN())    {    If(x.isNaN())    {    	non-compiled	[CE]  ';'  expected	28	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans  ==  0)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x.nans  ==  0)  {	  if(x.isNaN())    {    If(x.isNaN())    {    	compilable	  [FE]  AssertionError  	28	1	replace
68	[BUG]  [BUGGY]  if(x.nans  ==  0)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans  ==  0)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.nans  ==  0)  {	  if(x.isNaN())    {    If(x.isNaN())    {    	compilable	  [FE]  AssertionError  	28	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x  ==  null  ||  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x  ==  null  ||  x.isNaN())  {	  if(x!=    null    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	38	1	replace
70	[BUG]  [BUGGY]  if(x  ==  null  ||  x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x  ==  null  ||  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x  ==  null  ||  x.isNaN())  {	  if(x!=    null    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	38	1	replace
71	[BUG]  [BUGGY]  if(x.isNaN())  {  If(x.isInfinite())  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isNaN())  {  If(x.isInfinite())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isNaN())  {  If(x.isInfinite())  {	  if(x.isInfinite())    {    If(x.isInfinite())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
72	[BUG]  [BUGGY]  if(x!=  null  ||  x.isNaN())  {  If(x!=  null  ||  x.isNaN())  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null  ||  x.isNaN())  {  If(x!=  null  ||  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=    null    ||    x.isNaN())    {    If(x!=  null  ||  x.isNaN())  {	  	non-compiled	[CE]  ';'  expected	37	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x!=  null)  {	  if(x.isNaN())    {    if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	27	1	replace
74	[BUG]  [BUGGY]  if(x!=  null)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=  null)  {	  if(x.isNaN())    {    if(x.isNaN())    {    	compilable	  [FE]  AssertionError  	27	1	replace
75	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  If(x.nans  ==  FINITE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.nans  ==  FINITE)  {  If(x.nans  ==  FINITE)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.nans    ==    FINITE)    {    If(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
76	[BUG]  [BUGGY]  x  =  newInstance(getZero(),  nans,  FINITE);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  newInstance(getZero(),  nans,  FINITE);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(getZero(),  nans,  FINITE);	  x    =    newInstance(getZero(),    nans);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
77	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nanans  =  QNAN;  [CE]  cannot  find  symbol  nanans  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nanans  =  QNAN;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nanans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  nanans	12	None	add
78	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isNan())  {  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.isNan())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()  ||  x.isNan())  {	  if(x.isInfinite()    ||    x.isNaN())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
79	[BUG]  [BUGGY]  if(!isNan()  ||!x.isNan())  {  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isNan()  ||!x.isNan())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isNan()  ||!x.isNan())  {	  if(!isNaN()    ||!x.isNaN())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
80	[BUG]  [BUGGY]  x.nans  =  0;  x.nans  =  0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x.nans  =  0;  x.nans  =  0;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  0;  x.nans  =  0;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
81	[BUG]  [BUGGY]  x  =  newInstance(getNan(),  this);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  newInstance(getNan(),  this);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  newInstance(getNan(),  this);	  x    =    newInstance(getNan());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
82	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans!=  FINITE)?  this  :  null);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans!=  FINITE)?  this  :  null);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.nans!=  FINITE)?  this  :  null);	  ((    x.nans    ==    FINITE    ||    x.nans!=    FINITE)?    this    :    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
83	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans!=  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.nans!=  FINITE)?  this  :  x);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.nans!=  FINITE)?  this  :  x);	  ((    x.nans    ==    FINITE    ||    x.nans!=    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	35	None	replace
84	[BUG]  [BUGGY]  x.nans  =  MAX_EXP;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x.nans  =  MAX_EXP;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  MAX_EXP;	  x.nans    =    SNAN;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
85	[BUG]  [BUGGY]  ((  x  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x  ==  FINITE  ||  x.nans  ==  FINITE)?  this  :  x);	  ((    nans    ==    FINITE    ||    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	3	None	replace
86	[BUG]  [BUGGY]  int[]  mant  =  x.mant,  x.nans.toByteArray();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  int[]  mant  =  x.mant,  x.nans.toByteArray();  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	int[]  mant  =  x.mant,  x.nans.toByteArray();	  int[]    mant    =    x.mant,    x.nans.toInt();    	non-compiled	[CE]  ';'  expected	26	None	replace
87	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant!=  FINITE)?  this  :  null);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant!=  FINITE)?  this  :  null);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.mant!=  FINITE)?  this  :  null);	  ((    x.nans    ==    FINITE)&&    x.nans    ==    FINITE)?    this    :    null);    	non-compiled	[CE]  not  a  statement	45	None	replace
88	[BUG]  [BUGGY]  ((  QNAN)x.nans).setImmediateDigits(true);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  QNAN)x.nans).setImmediateDigits(true);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  QNAN)x.nans).setImmediateDigits(true);	          x.nans    =    QNAN;    ((    QNAN)x.nans).setImmediateDigits(true);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
89	[BUG]  [BUGGY]  if(!isVarArgs()  ||!x.isVarArgs())  {  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isVarArgs()  ||!x.isVarArgs())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isVarArgs()  ||!x.isVarArgs())  {	  if(!isNaN()    ||!x.isNaN())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
90	[BUG]  [BUGGY]  if(x.isInfinite()  ||  x.isNano())  {  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x.isInfinite()  ||  x.isNano())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x.isInfinite()  ||  x.isNano())  {	  if(x.isInfinite()    ||    x.isNaN())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null  &&  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(x!=  null  &&  x.isNaN())  {	  if(x!=    null    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	38	1	replace
92	[BUG]  [BUGGY]  if(x!=  null  &&  x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(x!=  null  &&  x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(x!=  null  &&  x.isNaN())  {	  if(x!=    null    ||    x.isNaN())    {    	compilable	  [FE]  AssertionError  	38	1	replace
93	[BUG]  [BUGGY]  x.nans  =  0;  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x.nans  =  0;  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x.nans  =  0;  ((  x.nans  ==  FINITE)&&  x.mant[mant.length-1]!=  0))  {  return  this;	          x.nans    =    QNAN;    ((    x.nans    ==    FINITE)&&    x.mant[mant.length-1]!=    0))    {    return    this;    	non-compiled	[CE]  not  a  statement	43	None	replace
94	[BUG]  [BUGGY]  if(!sign)  {  [CE]  bad  operand  type  byte  for  unary  operator  '!'  [FE]        AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!sign)  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!sign)  {	  if(!bsign)    {    	non-compiled	[CE]  bad  operand  type  byte  for  unary  operator  '!'	46	None	replace
95	[BUG]  [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant!=  FINITE)?  this  :  x);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  ((  x.nans  ==  FINITE)&&  x.mant!=  FINITE)?  this  :  x);  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	((  x.nans  ==  FINITE)&&  x.mant!=  FINITE)?  this  :  x);	  ((    x.nans    ==    FINITE)&&    x.nans    ==    FINITE)?    this    :    x);    	non-compiled	[CE]  not  a  statement	40	None	replace
96	[BUG]  [BUGGY]  x  =  x.nans  ||  x.sign;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  x  =  x.nans  ||  x.sign;  [BUGGY]      if  (isNaN())  {  return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	x  =  x.nans  ||  x.sign;	  x    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isInfinite()  ||!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	if(!isInfinite()  ||!x.isNaN())  {	  if(!isInfinite())    {    	compilable	  [FE]  AssertionError  	21	1	replace
98	[BUG]  [BUGGY]  if(!isInfinite()  ||!x.isNaN())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  final  Dfp  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  }  Dfp  result  =  newInstance(getZero());  if  (nans  !=  FINITE  ||  x.nans  !=  FINITE)  {      [BUGGY]  if(!isInfinite()  ||!x.isNaN())  {  [BUGGY]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	if(!isInfinite()  ||!x.isNaN())  {	  if(!isInfinite())    {    	compilable	  [FE]  AssertionError  	21	1	replace
