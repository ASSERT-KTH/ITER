bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (isNaN()) { [FE] AssertionError testMultiply [CONTEXT] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { [BUGGY] if (isNaN()) { [BUGGY] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] field.setIEEEFlagsBits(DfpField.FLAG_INVALID); final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { [BUGGY] [BUGGY] if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1510	1510	1	add	
3	[BUG] [BUGGY] return this; [FE] AssertionError testMultiply [CONTEXT] final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { [BUGGY] return this; [BUGGY] } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] final Dfp result = newInstance(getZero()); result.nans = QNAN; return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result); } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { [BUGGY] [BUGGY] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1511	1511	1	add	
5	[BUG] [BUGGY] if (x.isNaN()) { [FE] AssertionError testMultiply [CONTEXT] } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } [BUGGY] if (x.isNaN()) { [BUGGY] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1514	1514	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] } Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } [BUGGY] [BUGGY] if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1514	1514	1	add	
7	[BUG] [BUGGY] return x; [FE] AssertionError testMultiply [CONTEXT] Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { [BUGGY] return x; [BUGGY] } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1515	1515	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] Dfp result = newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { [BUGGY] [BUGGY] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1515	1515	1	add	
9	[BUG] [BUGGY] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [FE] AssertionError testMultiply [CONTEXT]  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } [BUGGY] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [BUGGY] result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT]  if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } [BUGGY] [BUGGY] if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1518	1518	1	add	
11	[BUG] [BUGGY] result = newInstance(this); [FE] AssertionError testMultiply [CONTEXT] if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [BUGGY] result = newInstance(this); [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] if (nans != FINITE || x.nans != FINITE) { if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { [BUGGY] [BUGGY] result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1519	1519	1	add	
13	[BUG] [BUGGY] result.sign = (byte) (sign * x.sign); [FE] AssertionError testMultiply [CONTEXT] if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); [BUGGY] result.sign = (byte) (sign * x.sign); [BUGGY] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] if (isNaN()) { return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); [BUGGY] [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1520	1520	1	add	
15	[BUG] [BUGGY] return result; [FE] AssertionError testMultiply [CONTEXT] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [BUGGY] return result; [BUGGY] } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] return this; } if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); [BUGGY] [BUGGY] return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	
17	[BUG] [BUGGY] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [FE] AssertionError testMultiply [CONTEXT] if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [BUGGY] result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] if (x.isNaN()) { return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [BUGGY] [BUGGY] if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	
19	[BUG] [BUGGY] result = newInstance(x); [FE] AssertionError testMultiply [CONTEXT] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [BUGGY] result = newInstance(x); [BUGGY] result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1525	1525	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testMultiply [CONTEXT] return x; } if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) { [BUGGY] [BUGGY] result = newInstance(x); result.sign = (byte) (sign * x.sign); return result; } if (x.nans == INFINITE && nans == INFINITE) { result = newInstance(this); result.sign = (byte) (sign * x.sign); return result; }  [CLASS] Dfp [METHOD] multiply [RETURN_TYPE] Dfp  Dfp x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x DfpField field int[] mant product String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff aextradigit bextradigit decimalPos diff e excp exp exponent extra i j lostdigit md n offset p q r result rh rsize sciexp significantDigits x Dfp result x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1525	1525	1	add	
