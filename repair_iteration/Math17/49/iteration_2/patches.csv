bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  for(int  i  =  0;  i  <  result.mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	add	for(int  i  =  0;  i  <  result.mant.length;  i++)  {	  for(int    i    =    1;    i    <    result.mant.length;    i++)    {    	compilable	  [FE]  AssertionError  	17	1	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  result.mant.length;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  for(int  i  =  0;  i  <  result.mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	for(int  i  =  0;  i  <  result.mant.length;  i++)  {	  for(int    i    =    1;    i    <    result.mant.length;    i++)    {    	compilable	  [FE]  AssertionError  	17	1	replace
3	[BUG]  [BUGGY]  int  mant[]  =  field.getField(DfpField.FLAG_INVALID,  RADIX);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant[]  =  field.getField(DfpField.FLAG_INVALID,  RADIX);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant[]  =  field.getField(DfpField.FLAG_INVALID,  RADIX);	  int    mant[]    =    field.getField(DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  int  mant[]  =  field.getField(DfpField.FIELD_INVALID);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant[]  =  field.getField(DfpField.FIELD_INVALID);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant[]  =  field.getField(DfpField.FIELD_INVALID);	  int    mant[]    =    field.getField(DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  int  mant  =  Math.min(mant.length,  RADIX  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  Math.min(mant.length,  RADIX  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  Math.min(mant.length,  RADIX  +  1);	  int    mant    =    Math.min(mant.length,    RADIX);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.FLAG_INVALID,  RADIX);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.FLAG_INVALID,  RADIX);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.FLAG_INVALID,  RADIX);	  int    mant    =    field.getField(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.FLAG_INVALID,  x  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.FLAG_INVALID,  x  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.FLAG_INVALID,  x  +  1);	  int    mant    =    field.getField(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  Integer  r  =  result.mant[i]  *  x;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  Integer  r  =  result.mant[i]  *  x;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	Integer  r  =  result.mant[i]  *  x;	  Integer    r    =    result.mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
9	[BUG]  [BUGGY]  Integer  r  =  result.mant[i]  *  RADIX  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  Integer  r  =  result.mant[i]  *  RADIX  +  1;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	Integer  r  =  result.mant[i]  *  RADIX  +  1;	  Integer    r    =    result.mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
10	[BUG]  [BUGGY]  int  mant[]  =  field.getField(DfpField.FIELD_INVALID,  RADIX);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant[]  =  field.getField(DfpField.FIELD_INVALID,  RADIX);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant[]  =  field.getField(DfpField.FIELD_INVALID,  RADIX);	  int    mant[]    =    field.getField(DfpField.FIELD_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  int  mant[]  =  field.getField(DfpField.FIELD_INVALID,  x  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant[]  =  field.getField(DfpField.FIELD_INVALID,  x  +  1);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant[]  =  field.getField(DfpField.FIELD_INVALID,  x  +  1);	  int    mant[]    =    field.getField(DfpField.FIELD_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  int  mant  =  Math.min(mant.length,  x  +  1,  result.nans,  result.nans);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  Math.min(mant.length,  x  +  1,  result.nans,  result.nans);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  Math.min(mant.length,  x  +  1,  result.nans,  result.nans);	  int    mant    =    Math.min(mant.length,    x    +    1,    result.nans);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  int  mant  =  field.getItemCount(rh  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getItemCount(rh  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getItemCount(rh  -  1);	  int    mant    =    field.getItemCount(rh);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  int  mant  =  field.getItemCount(rh  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getItemCount(rh  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getItemCount(rh  +  1);	  int    mant    =    field.getItemCount(rh);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	for(int    i    =    1;    i    <    result.mant.length;    i++)    {    for(int  i  =  1;  i  <  result.mant.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
16	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  For(int  i  =  1;  i  <  result.mant.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  For(int  i  =  1;  i  <  result.mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	for(int    i    =    1;    i    <    result.mant.length;    i++)    {    For(int  i  =  1;  i  <  result.mant.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
17	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  int  i  =  1;  i  <  result.mant.length;  i++)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  int  i  =  1;  i  <  result.mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	for(int    i    =    1;    i    <    result.mant.length;    i++)    {    int  i  =  1;  i  <  result.mant.length;  i++)  {	  	non-compiled	[CE]  >  expected	16	None	add
18	[BUG]  [BUGGY]  int  rh  =  Math.min(result.nans,  mant.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  rh  =  Math.min(result.nans,  mant.length);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  rh  =  Math.min(result.nans,  mant.length);	  int    rh    =    Math.min(mant.length,    result.nans);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
19	[BUG]  [BUGGY]  int  rh  =  Math.min(mant.length,  result.nans,  RADIX);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  rh  =  Math.min(mant.length,  result.nans,  RADIX);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  rh  =  Math.min(mant.length,  result.nans,  RADIX);	  int    rh    =    Math.min(mant.length,    result.nans);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  Integer  mant  =  result.nans  -  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  Integer  mant  =  result.nans  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	Integer  mant  =  result.nans  -  2;	  Integer    mant    =    result.nans    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  mant.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  For(int  i  =  1;  i  <  mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	For(int  i  =  1;  i  <  mant.length;  i++)  {	  for(int    i    =    1;    i    <    mant.length;    i++)    {    For(int    i    =    1;    i    <    mant.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
22	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MAX_QUOTE,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MAX_QUOTE,  x);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MAX_QUOTE,  x);	  int    mant    =    field.getField(DfpField.MAX_QUOTE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
23	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MAX_QUOTE,  RADIX);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MAX_QUOTE,  RADIX);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MAX_QUOTE,  RADIX);	  int    mant    =    field.getField(DfpField.MAX_QUOTE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MIN_EXP,  RADIX);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MIN_EXP,  RADIX);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MIN_EXP,  RADIX);	  int    mant    =    field.getField(DfpField.MIN_EXP,    x);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
25	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MIN_EXP,  x  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MIN_EXP,  x  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MIN_EXP,  x  +  1);	  int    mant    =    field.getField(DfpField.MIN_EXP,    x);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
26	[BUG]  [BUGGY]  int  i  =  1;  i  <  mant.length;  i++)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  i  =  1;  i  <  mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  i  =  1;  i  <  mant.length;  i++)  {	  for(int    i    =    1;    i    <    mant.length;    i++)    {    int    i    =    1;    i    <    mant.length;    i++)    {    	non-compiled	[CE]  >  expected	13	None	replace
27	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MAX_SCALE,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MAX_SCALE,  x);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MAX_SCALE,  x);	  int    mant    =    field.getField(DfpField.MAX_SCALE);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
28	[BUG]  [BUGGY]  int  r  =  mant[i]  *  x;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  r  =  mant[i]  *  x;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  r  =  mant[i]  *  x;	  int    r    =    mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
29	[BUG]  [BUGGY]  int  r  =  field.mant[i]  *  RADIX;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  r  =  field.mant[i]  *  RADIX;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  r  =  field.mant[i]  *  RADIX;	  int    r    =    mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
30	[BUG]  [BUGGY]  final  int  i  =  1;  i  <  mant.length;  i++)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  final  int  i  =  1;  i  <  mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	final  int  i  =  1;  i  <  mant.length;  i++)  {	  for(int    i    =    1;    i    <    mant.length;    i++)    {    final    int    i    =    1;    i    <    mant.length;    i++)    {    	non-compiled	[CE]  >  expected	18	None	replace
31	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MAX_EXP,  RADIX  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MAX_EXP,  RADIX  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MAX_EXP,  RADIX  -  1);	  int    mant    =    field.getField(DfpField.MAX_EXP,    RADIX);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  int  rh  =  Math.min(result.nans,  result.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  rh  =  Math.min(result.nans,  result.length);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  rh  =  Math.min(result.nans,  result.length);	  int    rh    =    Math.min(mant.length,    result.nans);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
33	[BUG]  [BUGGY]  Integer  mant  =  result.nans  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  Integer  mant  =  result.nans  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	Integer  mant  =  result.nans  /  1;	  Integer    mant    =    result.nans    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  int  r  =  mant[i]  *  RADIX  +  rh;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  r  =  mant[i]  *  RADIX  +  rh;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  r  =  mant[i]  *  RADIX  +  rh;	  int    r    =    mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
35	[BUG]  [BUGGY]  Integer  r  =  result.mant[i]  *  RADIX  +  mant;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  Integer  r  =  result.mant[i]  *  RADIX  +  mant;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	Integer  r  =  result.mant[i]  *  RADIX  +  mant;	  Integer    r    =    result.mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
36	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MAX_QUOTE  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MAX_QUOTE  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MAX_QUOTE  +  1);	  int    mant    =    field.getField(DfpField.MAX_QUOTE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  final  int  i  =  1;  i  <  result.mant.length;  i++)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  for(int  i  =  1;  i  <  result.mant.length;  i++)  {  final  int  i  =  1;  i  <  result.mant.length;  i++)  {  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	for(int    i    =    1;    i    <    result.mant.length;    i++)    {    final  int  i  =  1;  i  <  result.mant.length;  i++)  {	  	non-compiled	[CE]  >  expected	16	None	add
38	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.MIN_EXP,  rh);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.MIN_EXP,  rh);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.MIN_EXP,  rh);	  int    mant    =    field.getField(DfpField.MIN_EXP,    x);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
39	[BUG]  [BUGGY]  int  mant  =  field.getField(DfpField.FLAG_INVALID,  rh);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  field.getField(DfpField.FLAG_INVALID,  rh);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  field.getField(DfpField.FLAG_INVALID,  rh);	  int    mant    =    field.getField(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  int  mant  =  Math.min(result.nans,  x  +  1,  result.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant  =  Math.min(result.nans,  x  +  1,  result.length);  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant  =  Math.min(result.nans,  x  +  1,  result.length);	  int    mant    =    Math.min(mant.length,    x    +    1,    result.nans);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  int  r  =  mant[i]  *  RADIX  +  x;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  r  =  mant[i]  *  RADIX  +  x;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  r  =  mant[i]  *  RADIX  +  x;	  int    r    =    mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
42	[BUG]  [BUGGY]  int  rh  =  Math.min(mant.length,  RADIX);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  rh  =  Math.min(mant.length,  RADIX);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  rh  =  Math.min(mant.length,  RADIX);	  int    rh    =    Math.min(mant.length,    result.nans);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  Integer  mant  =  field.nans  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  Integer  mant  =  field.nans  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  mant.length;  i++)  {  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	Integer  mant  =  field.nans  -  1;	  Integer    mant    =    result.nans    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
44	[BUG]  [BUGGY]  int  mant[]  =  field.getField(DfpField.FLAG_INVALID,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  int  mant[]  =  field.getField(DfpField.FLAG_INVALID,  x);  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	int  mant[]  =  field.getField(DfpField.FLAG_INVALID,  x);	  int    mant[]    =    field.getField(DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  Integer  r  =  mant[i]  *  RADIX;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;      [BUGGY]  Integer  r  =  mant[i]  *  RADIX;  [BUGGY]      final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1644	1644	1	replace	Integer  r  =  mant[i]  *  RADIX;	  Integer    r    =    result.mant[i]    *    RADIX;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
