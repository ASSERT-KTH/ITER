bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        if(x    <    0    ||    x    ==    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	12	1	add
2	[BUG]  [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x    <    0    ||    x    ==    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	12	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        if(x    <    0    ||    x    ==    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	12	1	add
4	[BUG]  [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x    <    0    ||    x    ==    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	12	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  newInstance(getZero());  result.nans  =  QNAN;  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	result  =  newInstance(getZero());  result.nans  =  QNAN;	      if(x    <    0    ||    x    ==    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    	compilable	  [FE]  AssertionError  	13	1	replace
6	[BUG]  [BUGGY]  result  =  newInstance(getZero());  result.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  newInstance(getZero());  result.nans  =  QNAN;  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  newInstance(getZero());  result.nans  =  QNAN;	      if(x    <    0    ||    x    ==    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    	compilable	  [FE]  AssertionError  	13	1	replace
7	[BUG]  [BUGGY]  result.nans  =  RADIX;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  RADIX;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result.nans  =  RADIX;	  result.nans    =    QNAN;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  SNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	result.nans  =  SNAN;	  result.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	2	1	replace
9	[BUG]  [BUGGY]  result.nans  =  SNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  SNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result.nans  =  SNAN;	  result.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	2	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	7	1	add
11	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	compilable	  [FE]  AssertionError  	7	1	add
12	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  newInstance(getZero()),  result);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  newInstance(getZero()),  result);	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	7	None	add
13	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);	  	non-compiled	[CE]  cannot  find  symbol  Result	7	None	add
14	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
15	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	8	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	9	1	add
17	[BUG]  [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	9	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	9	1	add
19	[BUG]  [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	9	1	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x!=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x!=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	9	1	add
21	[BUG]  [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x!=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x!=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x!=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	9	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	      if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	11	1	replace
23	[BUG]  [BUGGY]  if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	      if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	11	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      nans  =  QNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
25	[BUG]  [BUGGY]      nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      nans  =  QNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	4	1	add
26	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	6	None	replace
27	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	6	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	result.nans    =    QNAN;    result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	1	1	add
29	[BUG]  [BUGGY]  result.nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result.nans    =    QNAN;    result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	1	1	add
30	[BUG]  [BUGGY]  result.nans  =  QNAN;  Result.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  QNAN;  Result.nans  =  QNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result.nans    =    QNAN;    Result.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	result.nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	1	1	add
32	[BUG]  [BUGGY]  result.nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result.nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	1	1	add
33	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  NAN_STRING);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  NAN_STRING);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  NAN_STRING);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	6	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	4	1	add
35	[BUG]  [BUGGY]      if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	4	1	add
36	[BUG]  [BUGGY]      nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()));	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	4	None	add
37	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x),  result);	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	8	None	replace
38	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  x));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	8	None	replace
39	[BUG]  [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >>  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  if(x  <  0  ||  x  >>  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    if(x  <  0  ||  x  >>  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	9	None	add
40	[BUG]  [BUGGY]  if(x  <  0  ||  x  >  RADI)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [CE]  cannot  find  symbol  RADI  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0  ||  x  >  RADI)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	if(x  <  0  ||  x  >  RADI)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	      if(x    <    0    ||    x    ==    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    	non-compiled	[CE]  cannot  find  symbol  RADI	13	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	if(x  <  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	      if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	11	1	replace
42	[BUG]  [BUGGY]  if(x  <  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	if(x  <  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	      if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	11	1	replace
43	[BUG]  [BUGGY]  if(x  <  0  ||  x  ==  RADI)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [CE]  cannot  find  symbol  RADI  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0  ||  x  ==  RADI)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	if(x  <  0  ||  x  ==  RADI)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  }	      if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    }    	non-compiled	[CE]  cannot  find  symbol  RADI	10	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }	      	compilable	  [FE]  AssertionError  	5	1	replace
45	[BUG]  [BUGGY]  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }	      	compilable	  [FE]  AssertionError  	5	1	replace
46	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero(),  result);  }  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero(),  result);  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero(),  result);  }	  	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	7	None	add
47	[BUG]  [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero(),  result);  }  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]      AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero(),  result);  }  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()),    result);    if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero(),  result);  }	  	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	7	None	add
48	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  field));  [CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)  [FE]        AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  field));  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero(),  field));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField)	6	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	add	        if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }	  	compilable	  [FE]  AssertionError  	4	1	add
50	[BUG]  [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]      if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }  [BUGGY]    }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	        if(x  <  0  ||  x  ==  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  return  result;  }	  	compilable	  [FE]  AssertionError  	4	1	add
51	[BUG]  [BUGGY]  if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (nans  ==  INFINITE  &&  x  !=  0)  {  result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);    [BUGGY]  if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  [BUGGY]    return  result;  }  }  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1630	1630	1	replace	if(x  <  0  ||  x  >  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;	      if(x    <    0    ||    x    >=    RADIX)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    result.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
