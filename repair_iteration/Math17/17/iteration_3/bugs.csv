bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  If(nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  If(nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	If(nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    If(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
2	[BUG]  [BUGGY]  If(nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  If(nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	If(nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    If(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
3	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
4	[BUG]  [BUGGY]  result  =  newInstance(this);  result.nans  =  x.nans;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  newInstance(this);  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  newInstance(this);  result.nans  =  x.nans;	          result.nans    =    x.nans;    if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
5	[BUG]  [BUGGY]  nans  =  x.nans;  if(nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  nans;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  nans  =  x.nans;  if(nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	nans  =  x.nans;  if(nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  nans;  }	          result.nans    =    x.nans;    if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
6	[BUG]  [BUGGY]  result.nans  =  x.nans;  Result.nans  =  rsign;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  x.nans;  Result.nans  =  rsign;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  x.nans;  Result.nans  =  rsign;	          result.nans    =    x.nans;    Result.nans    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {  [CE]  array  required,  but  byte  found  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {	  if(nans    ==    FINITE    &&    x.nans[mant.length-1]!=    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	7	None	replace
8	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {  [CE]  array  required,  but  byte  found  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {	  if(nans    ==    FINITE    &&    x.nans[mant.length-1]    ==    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	38	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	42	1	add
10	[BUG]  [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;  nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	42	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	42	1	add
12	[BUG]  [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;  nans  =  x.nans;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        nans    =    x.nans;    nans  =  x.nans;  nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	42	1	add
13	[BUG]  [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  Result.nans  =  x.nans;  nans  =  x.nans;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    nans  =  x.nans;  Result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        nans    =    x.nans;    Result.nans  =  x.nans;  nans  =  x.nans;	  	non-compiled	[CE]  cannot  find  symbol  Result	42	None	add
14	[BUG]  [BUGGY]  x.nans  =  0;  x.nans  =  0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.nans  =  0;  x.nans  =  0;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  0;  x.nans  =  0;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
15	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	39	1	add
17	[BUG]  [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;  result.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        result.nans    =    x.nans;    result.nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	39	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	39	1	add
19	[BUG]  [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;  result.nans  =  x.nans;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        result.nans    =    x.nans;    nans  =  x.nans;  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	39	1	add
20	[BUG]  [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  Result.nans  =  x.nans;  result.nans  =  x.nans;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    result.nans  =  x.nans;  Result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        result.nans    =    x.nans;    Result.nans  =  x.nans;  result.nans  =  x.nans;	  	non-compiled	[CE]  cannot  find  symbol  Result	39	None	add
21	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  nans);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  nans);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    X,    x);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
22	[BUG]  [BUGGY]  x.sign  =(byte)(mant  *  DfpField.FLAG_INVALID);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(mant  *  DfpField.FLAG_INVALID);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(mant  *  DfpField.FLAG_INVALID);	  x.sign    =(byte)(rsign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
23	[BUG]  [BUGGY]  if(x.nans!=  null)  {  [CE]  incomparable  types:  byte  and  <null>  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans!=  null)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans!=  null)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	21	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans!=  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans!=  FINITE)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	21	1	replace
25	[BUG]  [BUGGY]  if(x.nans!=  FINITE)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans!=  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans!=  FINITE)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	21	1	replace
26	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  rsign);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  rsign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  rsign);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    rsign);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
27	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  x);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  x);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    rsign);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
28	[BUG]  [BUGGY]  If(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  If(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	If(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    If(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	25	1	replace
30	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	25	1	replace
31	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {  [CE]  array  required,  but  byte  found  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  nans[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	25	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  result.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        QNAN;        x.nans    =    QNAN;    result.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	77	1	add
33	[BUG]  [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  result.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  result.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        x.nans    =    QNAN;    result.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	77	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	77	1	add
35	[BUG]  [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	77	1	add
36	[BUG]  [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  Result.nans  =  QNAN;  x.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    x.nans  =  QNAN;  Result.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        x.nans    =    QNAN;    Result.nans  =  QNAN;  x.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	77	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	22	1	replace
38	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	22	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	22	1	replace
40	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	22	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	46	1	replace
42	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	46	1	replace
43	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  nans);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  nans);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    nans);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
45	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
46	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nt[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nt[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nt[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
47	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  null,  rsign);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  null,  rsign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  null,  rsign);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    rsign);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
48	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.nans);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.nans);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    rsign);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
49	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  null,  field);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  null,  field);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  null,  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    field);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  null,  x.nans);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  null,  x.nans);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  null,  x.nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    field);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    	compilable	  [FE]  AssertionError  	69	1	replace
52	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    	compilable	  [FE]  AssertionError  	69	1	replace
53	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
54	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans!=  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans!=  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans!=  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
55	[BUG]  [BUGGY]  nans  =  x.nans;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	nans  =  x.nans;	          result.nans    =    x.nans;    nans    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
56	[BUG]  [BUGGY]  result.nans  =  0;  nans  =  0;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  0;  nans  =  0;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  0;  nans  =  0;	          result.nans    =    x.nans;    nans    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
57	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
58	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    if(x.nans!=  FINITE  &&  x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
59	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  X,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  X,  null);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  X,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    X,    null);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  1  &&  x.nans  ==  1  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  1  &&  x.nans  ==  1  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	88	1	replace
61	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  1  &&  x.nans  ==  1  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  1  &&  x.nans  ==  1  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  1  &&  x.nans  ==  1  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	88	1	replace
62	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.    	non-compiled	[CE]  ')'  expected	66	None	replace
63	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.    	non-compiled	[CE]  ')'  expected	66	None	replace
64	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
65	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
66	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
67	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  null);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    null);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	67	1	replace
69	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	67	1	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	67	1	replace
71	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	67	1	replace
72	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  array  required,  but  byte  found  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	non-compiled	[CE]  array  required,  but  byte  found	45	None	replace
73	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  array  required,  but  byte  found  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	non-compiled	[CE]  array  required,  but  byte  found	45	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
75	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	28	1	add
77	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	28	1	add
78	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  ==  QNAN);  x.nans  =  QNAN;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  ==  QNAN);  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    (x.nans  ==  QNAN);  x.nans  =  QNAN;	  	non-compiled	[CE]  not  a  statement	28	None	add
79	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  ==  QNAN;  x.nans  =  QNAN);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  ==  QNAN;  x.nans  =  QNAN);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    (x.nans  ==  QNAN;  x.nans  =  QNAN);	  	non-compiled	[CE]  ')'  expected	28	None	add
80	[BUG]  [BUGGY]  x.nans  =  NAN_STRING;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.nans  =  NAN_STRING;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  NAN_STRING;	  x.nans    =    NAN;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
81	[BUG]  [BUGGY]  x.nans  =  1;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.nans  =  1;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  1;	  x.nans    =    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	74	1	replace
83	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	74	1	replace
84	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {  [CE]  array  required,  but  byte  found  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  array  required,  but  byte  found	74	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                x.sign        =(byte)(sign        *        x.sign);        x.sign    =(byte)(nans    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	34	1	add
86	[BUG]  [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.sign        =(byte)(sign        *        x.sign);        x.sign    =(byte)(nans    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	34	1	add
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                x.sign        =(byte)(sign        *        x.sign);        x.sign    =(byte)(nans    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	34	1	add
88	[BUG]  [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.sign        =(byte)(sign        *        x.sign);        x.sign    =(byte)(nans    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	34	1	add
89	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
90	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
91	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
92	[BUG]  [BUGGY]  if(rsign  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(rsign  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(rsign  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
93	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  0);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  0);	  result    =    dotrap(DfpField.FLAG_INVALID,    X,    0);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
94	[BUG]  [BUGGY]  x.sign  =(byte)(x.sign  *  rsign);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(x.sign  *  rsign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(x.sign  *  rsign);	  x.sign    =(byte)(rsign    *    x.sign);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  result.nans  =  0;  x.nans  =  0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  0;  x.nans  =  0;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  0;  x.nans  =  0;	          result.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
96	[BUG]  [BUGGY]  (x.nans  =  QNAN);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  (x.nans  =  QNAN);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	(x.nans  =  QNAN);	          x.nans    =    QNAN;    (x.nans    =    QNAN);    	non-compiled	[CE]  not  a  statement	31	None	replace
97	[BUG]  [BUGGY]  int[]  nans  =  x.sign.split( ",n ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  int[]  nans  =  x.sign.split( ",n ");  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	int[]  nans  =  x.sign.split( ",n ");	  int[]    nans    =    x.sign.split(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans!=    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	23	1	replace
99	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans!=    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	23	1	replace
100	[BUG]  [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  SNAN;  nans  =  SNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  SNAN;  nans  =  SNAN;	          result.nans    =    QNAN;    nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
101	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  )  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  )  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  )  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
102	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
103	[BUG]  [BUGGY]  if(nans  ==  INFINITE)  {  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  INFINITE)  {  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  INFINITE)  {  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  }	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
104	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.string[mant.length-1]  ==  0))  {  [CE]  cannot  find  symbol  string  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.string[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.string[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  cannot  find  symbol  string	72	None	replace
105	[BUG]  [BUGGY]  nans  =  DfpField.FLAG_INVALID;  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  nans  =  DfpField.FLAG_INVALID;  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	nans  =  DfpField.FLAG_INVALID;  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
106	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[    	non-compiled	[CE]  ']'  expected	65	None	replace
107	[BUG]  [BUGGY]  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(nans  *  DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(nans  *  DfpField.FLAG_INVALID);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(nans  *  DfpField.FLAG_INVALID);	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	79	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                x.sign        =(byte)(sign        *        x.sign);        x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	32	1	add
109	[BUG]  [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.sign        =(byte)(sign        *        x.sign);        x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	32	1	add
110	[BUG]  [BUGGY]  x.sign  =(byte)(rsign  *  sig);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(rsign  *  sig);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(rsign  *  sig);	  x.sign    =(byte)(sign    *    sig);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
111	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  [CE]  array  required,  but  byte  found  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    )    {    	non-compiled	[CE]  array  required,  but  byte  found	13	None	replace
112	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
113	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
114	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	91	1	add
116	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	91	1	add
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans!=  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result.nans  =  x.nans;  if(x.nans!=  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	91	1	add
118	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans!=  INFINITE)  {  result.nans  =  x.nans;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans!=  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result.nans  =  x.nans;  if(x.nans!=  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	91	1	add
119	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        QNAN;        nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	19	1	add
121	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	19	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        QNAN;        nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	19	1	add
123	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    nans  =  QNAN;  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	19	1	add
124	[BUG]  [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  Result.nans  =  QNAN;  nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    nans  =  QNAN;  Result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        nans    =    QNAN;    Result.nans  =  QNAN;  nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	19	None	add
125	[BUG]  [BUGGY]  x.nans  =  QNAN;  (x.nans  ==  SNAN);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.nans  =  QNAN;  (x.nans  ==  SNAN);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  QNAN;  (x.nans  ==  SNAN);	          x.nans    =    QNAN;    (x.nans    ==    QNAN);    	non-compiled	[CE]  not  a  statement	30	None	replace
126	[BUG]  [BUGGY]  (x.nans  ==  QNAN);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  (x.nans  ==  QNAN);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	(x.nans  ==  QNAN);	          x.nans    =    QNAN;    (x.nans    ==    QNAN);    	non-compiled	[CE]  not  a  statement	30	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    	compilable	  [FE]  AssertionError  	6	1	replace
128	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    	compilable	  [FE]  AssertionError  	6	1	replace
129	[BUG]  [BUGGY]  x.sign  =(byte)(sign  *  rsign);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(sign  *  rsign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(sign  *  rsign);	          x.sign    =(byte)(sign    *    x.sign);    x.sign    =(byte)(sign    *    x.sign);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	16	1	add
131	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    result.nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	16	1	add
132	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  Result.nans  =  QNAN;  result.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  Result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    Result.nans  =  QNAN;  result.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	16	None	add
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	16	1	add
134	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    nans  =  QNAN;  result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	16	1	add
135	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    field,    null);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
136	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  x,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  x,  null);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  x,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    field,    null);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                x.sign        =(byte)(sign        *        DfpField.FLAG_INVALID);        x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	14	1	add
138	[BUG]  [BUGGY]          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.sign        =(byte)(sign        *        DfpField.FLAG_INVALID);        x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	14	1	add
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	93	1	add
140	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	93	1	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  newInstance(this);  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result  =  newInstance(this);  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	93	1	add
142	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  newInstance(this);  result.nans  =  x.nans;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  newInstance(this);  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result  =  newInstance(this);  result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	93	1	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	93	1	add
144	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	93	1	add
145	[BUG]  [BUGGY]  result.nans  =  sig;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  sig;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  sig;	  result.nans    =    rsign;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
146	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {  [CE]  array  required,  but  byte  found  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  nans[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	12	None	replace
147	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
148	[BUG]  [BUGGY]  nans  =  QNAN;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	nans  =  QNAN;	          x.nans    =    QNAN;    (x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
149	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [CE]  cannot  find  symbol  nant  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  cannot  find  symbol  nant	47	None	replace
150	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [CE]  cannot  find  symbol  nant  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  cannot  find  symbol  nant	47	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(nans  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	12	1	replace
152	[BUG]  [BUGGY]  if(nans  ==  0)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(nans  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	12	1	replace
153	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
154	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
155	[BUG]  [BUGGY]  if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  else  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  else  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  else  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
156	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  field,  null);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  field,  null);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  field,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    field,    null);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
157	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  If((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  If((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    If((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  ';'  expected	89	None	add
158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
159	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
160	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
161	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
162	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[    	non-compiled	[CE]  ')'  expected	65	None	replace
163	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[    	non-compiled	[CE]  ')'  expected	65	None	replace
164	[BUG]  [BUGGY]  x.nans  =  NAN;  (x.nans  =  QNAN);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.nans  =  NAN;  (x.nans  =  QNAN);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  NAN;  (x.nans  =  QNAN);	          x.nans    =    QNAN;    (x.nans    =    QNAN);    	non-compiled	[CE]  not  a  statement	31	None	replace
165	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	45	1	replace
167	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	45	1	replace
168	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  array  required,  but  byte  found  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	non-compiled	[CE]  array  required,  but  byte  found	45	None	replace
169	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  x.mant.length*2]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  x.mant.length*2]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  x.mant.length*2]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    x.mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  ')'  expected	76	None	replace
170	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  rsign);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  rsign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  rsign);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    rsign);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
171	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    (x.nans  =  QNAN;  x.nans  =  QNAN);	  	non-compiled	[CE]  ')'  expected	28	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	91	1	add
173	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	91	1	add
174	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	91	None	add
175	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	91	1	add
176	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	91	1	add
177	[BUG]  [BUGGY]  result.nans  =  QNAN;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  QNAN;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  QNAN;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	          result.nans    =    x.nans;    if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
178	[BUG]  [BUGGY]  x.sign  =(byte)(nans  *  DfpField.FLAG_INVALID  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(nans  *  DfpField.FLAG_INVALID  +  1);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(nans  *  DfpField.FLAG_INVALID  +  1);	  x.sign    =(byte)(nans    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
179	[BUG]  [BUGGY]  x.nans  =  QNAN;  (x.nans  ==  0);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.nans  =  QNAN;  (x.nans  ==  0);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  QNAN;  (x.nans  ==  0);	          x.nans    =    QNAN;    (x.nans    ==    QNAN);    	non-compiled	[CE]  not  a  statement	30	None	replace
180	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.middle[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.middle[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.middle[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
181	[BUG]  [BUGGY]  If(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  If(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	If(nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    If(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
182	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.string[mant.length-1]  ==  0))  {  [CE]  cannot  find  symbol  string  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.string[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.string[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  cannot  find  symbol  string	88	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans!=    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	23	1	replace
184	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans!=    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	23	1	replace
185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans!=  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans!=  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans!=    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	23	1	replace
186	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans!=  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans!=  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans!=  FINITE)||(nans  ==  FINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans!=    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	23	1	replace
187	[BUG]  [BUGGY]  result.nans  =  SNAN;  x.nans  =  SNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  SNAN;  x.nans  =  SNAN;	          result.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
188	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans  ==  FINITE  &&  x.nans  ==  0)  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    	compilable	  [FE]  AssertionError  	69	1	replace
189	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  0)  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    	compilable	  [FE]  AssertionError  	69	1	replace
190	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.	  if(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
191	[BUG]  [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  SNAN;  x.nans  =  SNAN;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
192	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	47	1	replace
194	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	47	1	replace
195	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  ';'  expected	80	None	add
196	[BUG]  [BUGGY]  nans  =  x.nans;  Result.nans  =  x.nans;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  nans  =  x.nans;  Result.nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	nans  =  x.nans;  Result.nans  =  x.nans;	          result.nans    =    x.nans;    Result.nans    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
197	[BUG]  [BUGGY]  result.nans  =  QNAN;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  QNAN;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  QNAN;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	          result.nans    =    x.nans;    if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
198	[BUG]  [BUGGY]  result.nans  =  SNAN;  Result.nans  =  QNAN;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  SNAN;  Result.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  SNAN;  Result.nans  =  QNAN;	          result.nans    =    QNAN;    Result.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
199	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  field);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  field);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    field);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
200	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  null,  field);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  null,  field);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  null,  field);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    field);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
201	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  NAN_STRING  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  NAN_STRING  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  NAN_STRING  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
202	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  nans);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  nans);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    nans);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
203	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    result);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans  ==  0)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	22	1	replace
205	[BUG]  [BUGGY]  if(x.nans  ==  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  0)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	22	1	replace
206	[BUG]  [BUGGY]  if(x.nans  ==  null)  {  [CE]  incomparable  types:  byte  and  <null>  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  null)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  null)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	22	None	replace
207	[BUG]  [BUGGY]  if(sign!=  null)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(sign!=  null)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(sign!=  null)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
208	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.in);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.in);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.in);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    rsign);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
209	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.int);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.int);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  rsign,  null,  x.int);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    rsign);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
210	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  [CE]  array  required,  but  byte  found  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {	  if(nans    ==    FINITE    &&    x.nans[mant.length-1]!=    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	7	None	replace
211	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	93	None	add
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	93	1	add
213	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	93	1	add
214	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result  =  dotrap(DfpField.FLAG_INVALID,  x);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result  =  dotrap(DfpField.FLAG_INVALID,  x);	  	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	93	None	add
215	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {  [CE]  array  required,  but  byte  found  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {	  if(nans    ==    FINITE    &&    x.nans[mant.length-1]    ==    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	38	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  ||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  ||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	46	1	replace
217	[BUG]  [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  ||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  ||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if  ((  nans  ==  FINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  ||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	46	1	replace
218	[BUG]  [BUGGY]  result.nans  =  SNAN;  nans  =  x.nans;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  SNAN;  nans  =  x.nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  SNAN;  nans  =  x.nans;	          result.nans    =    x.nans;    nans    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
219	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  If(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  If(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    If(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
220	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
221	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans!=  0  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans!=  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans!=  0  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
222	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  {  0  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  {  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  {  0  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  ')'  expected	87	None	add
223	[BUG]  [BUGGY]  if(x.sign  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.sign  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.sign  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
224	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [CE]  cannot  find  symbol  nant  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  cannot  find  symbol  nant	47	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	47	1	replace
226	[BUG]  [BUGGY]  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	47	1	replace
227	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  x.mant.length  >  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  nans  ==  FINITE  &&  x.mant.length  >  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    x.mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	76	1	replace
228	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  x.mant.length  >  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  x.mant.length  >  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  x.mant.length  >  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    x.mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	76	1	replace
229	[BUG]  [BUGGY]  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  x.sign);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  x.sign);	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	79	None	replace
230	[BUG]  [BUGGY]  if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  x.sign);  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  x.sign);  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  x.sign);  }	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	79	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	93	1	add
232	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	93	1	add
233	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  if(x.nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0)  ||  (nans  ==  IN  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  if(x.nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0)  ||  (nans  ==  IN  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  if(x.nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0)  ||  (nans  ==  IN	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
234	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  if(x.nans  ==  INFINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  if(x.nans  ==  INFINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  if(x.nans  ==  INFINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
235	[BUG]  [BUGGY]  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.    	non-compiled	[CE]  ')'  expected	66	None	replace
236	[BUG]  [BUGGY]  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if((  nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.    	non-compiled	[CE]  ')'  expected	66	None	replace
237	[BUG]  [BUGGY]  If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	If(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    If(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
238	[BUG]  [BUGGY]  If(x.nans  ==  FINITE  &&  x.sign.length  >  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  If(x.nans  ==  FINITE  &&  x.sign.length  >  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	If(x.nans  ==  FINITE  &&  x.sign.length  >  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    If(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans  ==  FINITE)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	21	1	replace
240	[BUG]  [BUGGY]  if(x.nans  ==  FINITE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE)  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	21	1	replace
241	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	88	1	replace
242	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    0    &&    x.nans    ==    0    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	88	1	replace
243	[BUG]  [BUGGY]  result.nans  =  SNAN;  nans  =  nans;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  SNAN;  nans  =  nans;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  SNAN;  nans  =  nans;	          result.nans    =    QNAN;    nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
244	[BUG]  [BUGGY]  If(x.nans  ==  FINITE  &&  x.sign[mant.length-1]  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  If(x.nans  ==  FINITE  &&  x.sign[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	If(x.nans  ==  FINITE  &&  x.sign[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    If(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
245	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
246	[BUG]  [BUGGY]  x.sign  =(byte)(code  *  x.sign);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  x.sign  =(byte)(code  *  x.sign);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(code  *  x.sign);	  x.sign    =(byte)(sig    *    x.sign);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	72	1	replace
248	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	72	1	replace
249	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
250	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  0  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  0  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  0  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
251	[BUG]  [BUGGY]  if(x.sign  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.sign  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.sign  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
252	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  x.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    x.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	91	1	add
254	[BUG]  [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  x.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  x.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        x.nans;        if(x.nans    ==    INFINITE)    {    result.nans    =    x.nans;    }    x.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	91	1	add
255	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result.nans  =  QNAN;  result.nans  =  QNAN;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	                result.nans        =        QNAN;        result.nans    =    QNAN;    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result.nans  =  QNAN;  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	16	1	add
256	[BUG]  [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result.nans  =  QNAN;  result.nans  =  QNAN;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          result.nans    =    QNAN;    result.nans  =  QNAN;  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result.nans  =  QNAN;  result.nans  =  QNAN;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                result.nans        =        QNAN;        result.nans    =    QNAN;    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result.nans  =  QNAN;  result.nans  =  QNAN;  }	  	compilable	  [FE]  AssertionError  	16	1	add
257	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  nans);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  nans);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    nans);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
258	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.sign  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  x.sign  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
259	[BUG]  [BUGGY]  if((  x.sign  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.sign  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  x.sign  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
260	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
261	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if((    x.nans    ==    FINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	90	1	replace
262	[BUG]  [BUGGY]  if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(sign!=  DfpField.FLAG_INVALID)  {  x.sign  =(byte)sign  *  DfpField.FLAG_INVALID;  }	          x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
263	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  mant);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  mant);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  mant);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    null,    rsign);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
264	[BUG]  [BUGGY]  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	          result.nans    =    x.nans;    if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
265	[BUG]  [BUGGY]  result  =  newInstance(this);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  newInstance(this);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  newInstance(this);	          result.nans    =    x.nans;    if(x.nans    ==    INFINITE)    {    result    =    newInstance(this);    result.nans    =    x.nans;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
266	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  (x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    (x.nans  =  QNAN;  x.nans  =  QNAN;	  	non-compiled	[CE]  ')'  expected	28	None	add
267	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant!=  0)  {  [CE]  incomparable  types:  int[]  and  int  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant!=  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.mant!=  0)  {	  if(x.nans    ==    FINITE    &&    x.nans    ==    FINITE)    {    	non-compiled	[CE]  incomparable  types:  int[]  and  int	69	None	replace
268	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  mant,  null);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  mant,  null);  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  mant,  null);	  result    =    dotrap(DfpField.FLAG_INVALID,    x,    field,    null);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
269	[BUG]  [BUGGY]  result.nans  =  0;  Result.nans  =  0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  result.nans  =  0;  Result.nans  =  0;  [BUGGY]      if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  0;  Result.nans  =  0;	          result.nans    =    QNAN;    Result.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
270	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.sign[mant.length-1]  ==  0)  {  [CE]  array  required,  but  byte  found  [FE]    AssertionError    [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if(x.nans  ==  FINITE  &&  x.sign[mant.length-1]  ==  0)  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.sign[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	81	None	replace
271	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  array  required,  but  byte  found  [FE]        AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	non-compiled	[CE]  array  required,  but  byte  found	45	None	replace
272	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  array  required,  but  byte  found  [FE]          AssertionError      [CONTEXT]      result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }      [BUGGY]  if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans[mant.length-1]    ==    0))    {    	non-compiled	[CE]  array  required,  but  byte  found	45	None	replace
