bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  0);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  0);	      result    =    dotrap(DfpField.FLAG_INVALID,    x,    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);	      result    =    dotrap(DfpField.FLAG_INVALID,    x,    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  x.nans  =  SNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  SNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  SNAN;	      x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	19	1	replace
6	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	19	1	replace
7	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  [CE]  array  required,  but  byte  found  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	19	None	replace
8	[BUG]  [BUGGY]  x.sign  =(byte)(rsign  *  x.sign);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.sign  =(byte)(rsign  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(rsign  *  x.sign);	      x.sign    =(byte)(sign    *    x.sign);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  x.sign  =(byte)(nans  *  x.sign);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.sign  =(byte)(nans  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(nans  *  x.sign);	      x.sign    =(byte)(sign    *    x.sign);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  x.nans  =  sig;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  sig;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  sig;	      x.nans    =    rsign;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  x.nans  =  nans;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  nans;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  nans;	      x.nans    =    rsign;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
13	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  )  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  )  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  )  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	24	1	add
15	[BUG]  [BUGGY]      x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	24	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        result.nans    =    QNAN;    result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	6	1	add
17	[BUG]  [BUGGY]      result.nans  =  QNAN;  result.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  QNAN;  result.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    QNAN;    result.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	6	1	add
18	[BUG]  [BUGGY]      result.nans  =  QNAN;  Result.nans  =  QNAN;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  QNAN;  Result.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    QNAN;    Result.nans  =  QNAN;	  	non-compiled	[CE]  cannot  find  symbol  Result	6	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        result.nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	6	1	add
20	[BUG]  [BUGGY]      result.nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  QNAN;  nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	6	1	add
21	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
22	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
23	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans!=  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
24	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
25	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
26	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  field,  null);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  field,  null);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  field,  null);	      result    =    dotrap(DfpField.FLAG_INVALID,    x,    null);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  field);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  field);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  field);	      result    =    dotrap(DfpField.FLAG_INVALID,    x,    null);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	22	1	add
29	[BUG]  [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	22	1	add
30	[BUG]  [BUGGY]      x.nans  =  QNAN;  (x.nans  ==  QNAN);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  QNAN;  (x.nans  ==  QNAN);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.nans    =    QNAN;    (x.nans  ==  QNAN);	  	non-compiled	[CE]  not  a  statement	22	None	add
31	[BUG]  [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.nans    =    QNAN;    (x.nans  =  QNAN);	  	non-compiled	[CE]  not  a  statement	22	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	20	1	add
33	[BUG]  [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sign  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	20	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	20	1	add
35	[BUG]  [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(nans  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	20	1	add
36	[BUG]  [BUGGY]  x.sign  =(byte)(rsign  *  DfpField.FLAG_INVALID);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.sign  =(byte)(rsign  *  DfpField.FLAG_INVALID);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(rsign  *  DfpField.FLAG_INVALID);	      x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
37	[BUG]  [BUGGY]  x.sign  =(byte)(nans  *  DfpField.FLAG_INVALID);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.sign  =(byte)(nans  *  DfpField.FLAG_INVALID);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(nans  *  DfpField.FLAG_INVALID);	      x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
38	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {  [CE]  array  required,  but  byte  found  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    	non-compiled	[CE]  array  required,  but  byte  found	17	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        result.nans    =    x.nans;    result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	8	1	add
40	[BUG]  [BUGGY]      result.nans  =  x.nans;  result.nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  result.nans  =  x.nans;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    x.nans;    result.nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	8	1	add
41	[BUG]  [BUGGY]      result.nans  =  x.nans;  Result.nans  =  x.nans;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  Result.nans  =  x.nans;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    x.nans;    Result.nans  =  x.nans;	  	non-compiled	[CE]  cannot  find  symbol  Result	8	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        result.nans    =    x.nans;    nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	8	1	add
43	[BUG]  [BUGGY]      result.nans  =  x.nans;  nans  =  x.nans;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  nans  =  x.nans;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    x.nans;    nans  =  x.nans;	  	compilable	  [FE]  AssertionError  	8	1	add
44	[BUG]  [BUGGY]  result.nans  =  rsign;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result.nans  =  rsign;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  rsign;	      result.nans    =    x.nans;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
46	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
47	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
48	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  rsign);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  rsign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  rsign);	      result    =    dotrap(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  result);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  result);  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  result);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  result.nans  =  SNAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result.nans  =  SNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  SNAN;	      result.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  result.nans  =  0;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result.nans  =  0;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result.nans  =  0;	      result.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]      x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);	  	non-compiled	[CE]  ')'  expected	24	None	add
54	[BUG]  [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sig  *  x.sign);  [CE]  cannot  find  symbol  sig  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  x.sign);  x.sign  =(byte)(sig  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.sign    =(byte)(sign    *    x.sign);    x.sign  =(byte)(sig  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol  sig	20	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	19	1	replace
56	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	19	1	replace
57	[BUG]  [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.nans    =    QNAN;    (x.nans  =  QNAN;	  	non-compiled	[CE]  ')'  expected	22	None	add
58	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  rsign);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  rsign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  null,  rsign);	      result    =    dotrap(DfpField.FLAG_INVALID,    x,    null);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  If(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  If(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    mant[mant.length-1]!=    0)    {    If(x.nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
60	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  x.sign  =(byte)(sig  *  x.sign);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.sign  =(byte)(sig  *  x.sign);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(sig  *  x.sign);	      x.sign    =(byte)(sign    *    x.sign);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  x.sign  =(byte)(sign  *  sig);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.sign  =(byte)(sign  *  sig);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.sign  =(byte)(sign  *  sig);	      x.sign    =(byte)(sign    *    x.sign);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
64	[BUG]  [BUGGY]  x.nans  =  NAN;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  NAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  NAN;	      x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
65	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
66	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.	  	non-compiled	[CE]  <identifier>  expected	3	None	add
67	[BUG]  [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    if  ((  nans  ==  INFINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	12	1	replace
69	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	12	1	replace
70	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  If(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  If(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    If(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	2	1	replace
72	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	2	1	replace
73	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  x);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  x);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  x);	      result    =    dotrap(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  {  if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    if(x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
75	[BUG]  [BUGGY]  x.nans  =  sign;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  sign;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  sign;	      x.nans    =    rsign;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  x.mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if((  nans  ==  FINITE  &&  x.mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  x.mant.length-1]  ==  0)||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        result.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	6	1	add
78	[BUG]  [BUGGY]      result.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	6	1	add
79	[BUG]  [BUGGY]      x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  DfpField.FLAG_INVALID);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.sign  =(byte)(sign  *  DfpField.FLAG_INVALID);  (byte)(sign  *  DfpField.FLAG_INVALID);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        x.sign    =(byte)(sign    *    DfpField.FLAG_INVALID);    (byte)(sign  *  DfpField.FLAG_INVALID);	  	non-compiled	[CE]  not  a  statement	24	None	add
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    	compilable	  [FE]  AssertionError  	17	1	replace
81	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)    {    	compilable	  [FE]  AssertionError  	17	1	replace
82	[BUG]  [BUGGY]  x.nans  =  0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  0;  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	x.nans  =  0;	      x.nans    =    QNAN;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
83	[BUG]  [BUGGY]  int[]  nans  =  x.sign.split( ", ");  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  int[]  nans  =  x.sign.split( ", ");  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	int[]  nans  =  x.sign.split( ", ");	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);	      result    =    dotrap(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
85	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	      result    =    dotrap(DfpField.FLAG_INVALID,    x,    null);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  null);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  null);  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  null);	      result    =    dotrap(DfpField.FLAG_INVALID,    x,    null);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	2	1	replace
88	[BUG]  [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  0  &&  x.nans  ==  0  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	2	1	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	2	1	replace
90	[BUG]  [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if((  x.nans  ==  FINITE  &&  nans  ==  FINITE)||(nans  ==  INFINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if    ((    nans    ==    INFINITE    &&    nans    ==    FINITE)||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	compilable	  [FE]  AssertionError  	2	1	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	8	1	add
92	[BUG]  [BUGGY]      result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	8	1	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	add	        result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	8	1	add
94	[BUG]  [BUGGY]      result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result.nans  =  x.nans;  if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }  [BUGGY]    if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||      (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	        result.nans    =    x.nans;    if(x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.nans  =  x.nans;  }	  	compilable	  [FE]  AssertionError  	8	1	add
95	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1536	1537	1	replace	if(x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0)||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
