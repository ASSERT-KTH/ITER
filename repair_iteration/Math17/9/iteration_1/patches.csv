bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	1	1	add
2	[BUG]  [BUGGY]      result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	1	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(x);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
4	[BUG]  [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(x);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(x);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
6	[BUG]  [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(x);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
7	[BUG]  [BUGGY]  if  (nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if  (nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if  (nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if    (nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    if  (nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
8	[BUG]  [BUGGY]  x.nans  =  0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  0;  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	x.nans  =  0;	      x.nans    =    nans;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;	      if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(nans  ==  FINITE  &&  mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	      if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	11	1	add
12	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	11	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	11	1	add
14	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	compilable	  [FE]  AssertionError  	11	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.sign!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	if  (x.sign!=  0)  {	  if    (x.sign    ==    0)    {    	compilable	  [FE]  AssertionError  	17	1	replace
16	[BUG]  [BUGGY]  if  (x.sign!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.sign!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if  (x.sign!=  0)  {	  if    (x.sign    ==    0)    {    	compilable	  [FE]  AssertionError  	17	1	replace
17	[BUG]  [BUGGY]  if  (x.sign  ==  0)  {  if  (x.sign  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.sign  ==  0)  {  if  (x.sign  ==  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if    (x.sign    ==    0)    {    if  (x.sign  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
18	[BUG]  [BUGGY]  if  (x.sign  ==  0)  {  if  (x.sign!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.sign  ==  0)  {  if  (x.sign!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if    (x.sign    ==    0)    {    if  (x.sign!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
19	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  newInstance(x.nans);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	result  =  newInstance(x.nans);	      result    =    newInstance(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
21	[BUG]  [BUGGY]  if(x.sign!=  null  ||  nans)  {  [CE]  incomparable  types:  byte  and  <null>  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.sign!=  null  ||  nans)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(x.sign!=  null  ||  nans)  {	  if(x.sign!=    null)    {    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	15	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
23	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
25	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	13	1	add
26	[BUG]  [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	      if(x.nans    ==    INFINITE    &&    mant    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (nans  ==  FINITE  &&  nans  ==  INFINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	if  (nans  ==  FINITE  &&  nans  ==  INFINITE  &&  x.mant[mant.length-1]!=  0)  {	  if    (nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	8	1	replace
28	[BUG]  [BUGGY]  if  (nans  ==  FINITE  &&  nans  ==  INFINITE  &&  x.mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (nans  ==  FINITE  &&  nans  ==  INFINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if  (nans  ==  FINITE  &&  nans  ==  INFINITE  &&  x.mant[mant.length-1]!=  0)  {	  if    (nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	8	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  nans;  x.nans  =  nans;  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        x.nans    =    nans;    x.nans  =  nans;	  	compilable	  [FE]  AssertionError  	5	1	add
30	[BUG]  [BUGGY]      x.nans  =  nans;  x.nans  =  nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  nans;  x.nans  =  nans;  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        x.nans    =    nans;    x.nans  =  nans;	  	compilable	  [FE]  AssertionError  	5	1	add
31	[BUG]  [BUGGY]      x.nans  =  nans;  x.nans  =  nan;  [CE]  cannot  find  symbol  nan  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  nans;  x.nans  =  nan;  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        x.nans    =    nans;    x.nans  =  nan;	  	non-compiled	[CE]  cannot  find  symbol  nan	5	None	add
32	[BUG]  [BUGGY]      x.nans  =  nans;  (x.nans  =  nans);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  nans;  (x.nans  =  nans);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        x.nans    =    nans;    (x.nans  =  nans);	  	non-compiled	[CE]  not  a  statement	5	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	3	1	add
34	[BUG]  [BUGGY]      result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	3	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(this);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	3	1	add
36	[BUG]  [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(this);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	3	1	add
37	[BUG]  [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(this);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
38	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	      if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	      if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  ';'  expected	13	None	add
41	[BUG]  [BUGGY]  if(x.sign  ==  null)  {  [CE]  incomparable  types:  byte  and  <null>  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.sign  ==  null)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(x.sign  ==  null)  {	  if(x.sign!=    null)    {    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	15	None	replace
42	[BUG]  [BUGGY]  if  (x.sign  ==  0)  {  If  (x.sign  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.sign  ==  0)  {  If  (x.sign  ==  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if    (x.sign    ==    0)    {    If  (x.sign  ==  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	if  (nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if    (nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	8	1	replace
44	[BUG]  [BUGGY]  if  (nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if  (nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if    (nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	8	1	replace
45	[BUG]  [BUGGY]  result  =  newInstance(this,  x);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  result  =  newInstance(this,  x);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	result  =  newInstance(this,  x);	      result    =    newInstance(x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.signed  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  cannot  find  symbol  signed  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.signed  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.signed  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  cannot  find  symbol  signed	11	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(x);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
48	[BUG]  [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(x);    if(x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.sign  ==  nans  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	if  (x.sign  ==  nans  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	10	1	replace
50	[BUG]  [BUGGY]  if  (x.sign  ==  nans  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if  (x.sign  ==  nans  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if  (x.sign  ==  nans  &&  nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	compilable	  [FE]  AssertionError  	10	1	replace
51	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(nans  ==  FINITE  &&  x.nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	      if(x.nans    ==    INFINITE    &&    mant    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
52	[BUG]  [BUGGY]  if(mant!=  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(mant!=  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(mant!=  null)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	      if(x.nans    ==    INFINITE    &&    mant    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
53	[BUG]  [BUGGY]      x.nans  =  nans;  ((  QNAN)nans).setNans(  x.nans);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  nans;  ((  QNAN)nans).setNans(  x.nans);  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        x.nans    =    nans;    ((  QNAN)nans).setNans(  x.nans);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
54	[BUG]  [BUGGY]      x.nans  =  nans;  int  nans  =  nans;  [CE]  variable  nans  might  not  have  been  initialized  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      x.nans  =  nans;  int  nans  =  nans;  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        x.nans    =    nans;    int  nans  =  nans;	  	non-compiled	[CE]  variable  nans  might  not  have  been  initialized	5	None	add
55	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(nans  ==  FINITE  &&  mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	      if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(nans  ==  FINITE  &&  mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	      if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	      if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	3	1	add
59	[BUG]  [BUGGY]      result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	3	1	add
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	3	1	add
61	[BUG]  [BUGGY]      result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	3	1	add
62	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  If(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  If(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    return    result;    }    If(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  return  result;  }	  	non-compiled	[CE]  ';'  expected	11	None	add
63	[BUG]  [BUGGY]  x.nans  =  sign;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  x.nans  =  sign;  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	x.nans  =  sign;	      x.nans    =    nans;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  if(x.sign!=  null  &&  x.mant.length  >  0)  {  [CE]  incomparable  types:  byte  and  <null>  [FE]        AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.sign!=  null  &&  x.mant.length  >  0)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(x.sign!=  null  &&  x.mant.length  >  0)  {	  if(x.sign!=    null)    {    	non-compiled	[CE]  incomparable  types:  byte  and  <null>	15	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
66	[BUG]  [BUGGY]      result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(x);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	1	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	add	        result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	1	1	add
68	[BUG]  [BUGGY]      result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]      result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]    if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	        result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	1	1	add
69	[BUG]  [BUGGY]  if(x.sign  ==  nan)  {  [CE]  cannot  find  symbol  nan  [FE]    AssertionError    [CONTEXT]    if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }    [BUGGY]  if(x.sign  ==  nan)  {  [BUGGY]    result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1524	1524	1	replace	if(x.sign  ==  nan)  {	  if    (x.nans    ==    INFINITE    &&    nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  nan	10	None	replace
