bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }	          result.sign    =(byte)(nans    *    x.sign);    if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result.sign    =(byte)(nans    *    x.sign);    }    	compilable	  [FE]  AssertionError  	92	1	replace
2	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }	          result.sign    =(byte)(nans    *    x.sign);    if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result.sign    =(byte)(nans    *    x.sign);    }    	compilable	  [FE]  AssertionError  	92	1	replace
3	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  mant);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  mant);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(x.sign  *  mant);	  result.sign    =(byte)(mant    *    x.sign);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	76	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(nans  *  x.nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =(byte)(nans  *  x.nans);	  result.sign    =(byte)(x.nans    *    nans);    	compilable	  [FE]  AssertionError  	32	1	replace
5	[BUG]  [BUGGY]  result.sign  =(byte)(nans  *  x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(nans  *  x.nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(nans  *  x.nans);	  result.sign    =(byte)(x.nans    *    nans);    	compilable	  [FE]  AssertionError  	32	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  result.sign    =    x.sign;    if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    	compilable	  [FE]  AssertionError  	18	1	replace
7	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  result.sign    =    x.sign;    if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    	compilable	  [FE]  AssertionError  	18	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  nans;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =  nans;	  result.sign    =    sig;    	compilable	  [FE]  AssertionError  	5	1	replace
9	[BUG]  [BUGGY]  result.sign  =  nans;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  nans;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  nans;	  result.sign    =    sig;    	compilable	  [FE]  AssertionError  	5	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	15	1	add
11	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	15	1	add
12	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
13	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  return  result;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  return  result;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	26	1	add
15	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	26	1	add
16	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.	  	non-compiled	[CE]  <identifier>  expected	26	None	add
17	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	26	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	39	1	add
19	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	39	1	add
20	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
21	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN())    {    result    =    newInstance(this);    }    if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
22	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN())    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
23	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  return  result;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN())    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  return  result;  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  result.sign  =  x.sign;  result.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        result.sign    =    x.sign;    result.sign  =  x.sign;  result.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	13	1	add
25	[BUG]  [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  result.sign  =  x.sign;  result.sign  =  x.sign;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  result.sign  =  x.sign;  result.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        result.sign    =    x.sign;    result.sign  =  x.sign;  result.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	13	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(nans  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        result.sign    =    x.sign;    if(nans  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
27	[BUG]  [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(nans  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(nans  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        result.sign    =    x.sign;    if(nans  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
28	[BUG]  [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  Result.sign  =  x.sign;  result.sign  =  x.sign;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  Result.sign  =  x.sign;  result.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        result.sign    =    x.sign;    Result.sign  =  x.sign;  result.sign  =  x.sign;	  	non-compiled	[CE]  cannot  find  symbol  Result	13	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	x.sign  =  x.sign;	  result.sign    =    x.sign;    x.sign    =    x.sign;    	compilable	  [FE]  AssertionError  	66	1	replace
30	[BUG]  [BUGGY]  x.sign  =  x.sign;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	x.sign  =  x.sign;	  result.sign    =    x.sign;    x.sign    =    x.sign;    	compilable	  [FE]  AssertionError  	66	1	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.isNaN())  {  result.sign  =  x.sign;  }  if(x.isNaN())  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(x.isNaN())    {    result.sign    =    x.sign;    }    if(x.isNaN())  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	74	1	add
32	[BUG]  [BUGGY]          if(x.isNaN())  {  result.sign  =  x.sign;  }  if(x.isNaN())  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.isNaN())  {  result.sign  =  x.sign;  }  if(x.isNaN())  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.isNaN())    {    result.sign    =    x.sign;    }    if(x.isNaN())  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	74	1	add
33	[BUG]  [BUGGY]          if(x.isNaN())  {  result.sign  =  x.sign;  }  If(x.isNaN())  {  result.sign  =  x.sign;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.isNaN())  {  result.sign  =  x.sign;  }  If(x.isNaN())  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.isNaN())    {    result.sign    =    x.sign;    }    If(x.isNaN())  {  result.sign  =  x.sign;  }	  	non-compiled	[CE]  ';'  expected	74	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  result.sign  =(byte)(sign  *  x.sign  +  1);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(sign    *    x.sign    +    1);    result.sign  =(byte)(sign  *  x.sign  +  1);	  	compilable	  [FE]  AssertionError  	62	1	add
35	[BUG]  [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  result.sign  =(byte)(sign  *  x.sign  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  result.sign  =(byte)(sign  *  x.sign  +  1);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(sign    *    x.sign    +    1);    result.sign  =(byte)(sign  *  x.sign  +  1);	  	compilable	  [FE]  AssertionError  	62	1	add
36	[BUG]  [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(sign    *    x.sign    +    1);    if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }	  	non-compiled	[CE]  ')'  expected	62	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(sign    *    x.sign    +    1);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }	  	compilable	  [FE]  AssertionError  	62	1	add
38	[BUG]  [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(sign    *    x.sign    +    1);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }	  	compilable	  [FE]  AssertionError  	62	1	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);	          result.sign    =(byte)(nans    *    x.sign);    result.sign    =(byte)(nans    *    x.sign);    	compilable	  [FE]  AssertionError  	34	1	replace
40	[BUG]  [BUGGY]  nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);	          result.sign    =(byte)(nans    *    x.sign);    result.sign    =(byte)(nans    *    x.sign);    	compilable	  [FE]  AssertionError  	34	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	28	1	add
42	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	28	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	28	1	add
44	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	28	1	add
45	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.	  	non-compiled	[CE]  <identifier>  expected	28	None	add
46	[BUG]  [BUGGY]  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
47	[BUG]  [BUGGY]  result.sign  =  newInstance(this);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  newInstance(this);	  result    =    newInstance(x.sign);    	non-compiled	[CE]  incompatible  types	86	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	19	1	add
49	[BUG]  [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	19	1	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
51	[BUG]  [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
53	[BUG]  [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    if(x.nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  result.sign  =(byte)(x.sign  *  nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.sign    *    nans);    result.sign  =(byte)(x.sign  *  nans);	  	compilable	  [FE]  AssertionError  	43	1	add
55	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  result.sign  =(byte)(x.sign  *  nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  result.sign  =(byte)(x.sign  *  nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.sign    *    nans);    result.sign  =(byte)(x.sign  *  nans);	  	compilable	  [FE]  AssertionError  	43	1	add
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign!=  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.sign    *    nans);    if(x.sign!=  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
57	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign!=  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign!=  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.sign    *    nans);    if(x.sign!=  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.sign    *    nans);    if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
59	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.sign    *    nans);    if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  result.sign  =(byte)(x.nans  *  INFINITE);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    INFINITE);    result.sign  =(byte)(x.nans  *  INFINITE);	  	compilable	  [FE]  AssertionError  	59	1	add
61	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  result.sign  =(byte)(x.nans  *  INFINITE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  result.sign  =(byte)(x.nans  *  INFINITE);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    INFINITE);    result.sign  =(byte)(x.nans  *  INFINITE);	  	compilable	  [FE]  AssertionError  	59	1	add
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    INFINITE);    if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }	  	compilable	  [FE]  AssertionError  	59	1	add
63	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    INFINITE);    if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }	  	compilable	  [FE]  AssertionError  	59	1	add
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans!=  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    INFINITE);    if(x.nans!=  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }	  	compilable	  [FE]  AssertionError  	59	1	add
65	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans!=  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans!=  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    INFINITE);    if(x.nans!=  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }	  	compilable	  [FE]  AssertionError  	59	1	add
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	91	1	add
67	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	91	1	add
68	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	45	1	add
70	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	45	1	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
72	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
74	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        if(x.isNaN()    ||    x.isNaN())    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	83	1	add
76	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN()    ||    x.isNaN())    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	83	1	add
77	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN()    ||    x.isNaN())    {    result    =    newInstance(this);    }    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
78	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  return  result;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN()    ||    x.isNaN())    {    result    =    newInstance(this);    }    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  return  result;  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    else    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	35	1	add
80	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    else    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	35	1	add
81	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    else    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x	  	non-compiled	[CE]  ')'  expected	35	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  FINITE);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =(byte)(x.nans  *  FINITE);	  result.sign    =(byte)(x.nans    *    INFINITE);    	compilable	  [FE]  AssertionError  	60	1	replace
83	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  FINITE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  FINITE);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(x.nans  *  FINITE);	  result.sign    =(byte)(x.nans    *    INFINITE);    	compilable	  [FE]  AssertionError  	60	1	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign!=    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	79	1	add
85	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign!=    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	79	1	add
86	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign!=    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
87	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  sig);  [CE]  cannot  find  symbol  sig  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  sig);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(x.sign  *  sig);	  result.sign    =(byte)(x.sign    *    nans);    	non-compiled	[CE]  cannot  find  symbol  sig	44	None	replace
88	[BUG]  [BUGGY]  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	nans  ==  FINITE  &&  mant[mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  not  a  statement	61	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x.sign);    result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	85	1	add
90	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.sign);  result  =  newInstance(x.sign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.sign);    result  =  newInstance(x.sign);	  	compilable	  [FE]  AssertionError  	85	1	add
91	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.sign);    if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  else  {  result  =  newInstance(x.sign);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	85	None	add
92	[BUG]  [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.sign);  if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.sign);    if(x.sign!=  null)  {  result  =  newInstance(x.sign);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	85	None	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  result.sign  =(byte)(x.sign  *  x.sign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign    =(byte)(x.sign    *    x.sign);    result.sign  =(byte)(x.sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	6	1	add
94	[BUG]  [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  result.sign  =(byte)(x.sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  result.sign  =(byte)(x.sign  *  x.sign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign    =(byte)(x.sign    *    x.sign);    result.sign  =(byte)(x.sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	6	1	add
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign    =(byte)(x.sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	6	1	add
96	[BUG]  [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign    =(byte)(x.sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	6	1	add
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign    =(byte)(x.sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	6	1	add
98	[BUG]  [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign    =(byte)(x.sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	6	1	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	37	1	add
100	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	37	1	add
101	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
102	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  rsign);  [CE]  cannot  find  symbol  rsign  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  rsign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(x.sign  *  rsign);	          result.sign    =(byte)(x.sign    *    x.sign);    	non-compiled	[CE]  cannot  find  symbol  rsign	7	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	22	1	add
104	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	22	1	add
105	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	22	None	add
106	[BUG]  [BUGGY]  Result  <  NEG_INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  Result  <  NEG_INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	Result  <  NEG_INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  >  expected	53	None	replace
107	[BUG]  [BUGGY]  Result.sign  =  x.sign;  [CE]  cannot  find  symbol  Result  [FE]          AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  Result.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	Result.sign  =  x.sign;	  result.sign    =    x.sign;    Result.sign    =    x.sign;    	non-compiled	[CE]  cannot  find  symbol  Result	67	None	replace
108	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE    &&    nans    ==    FINITE)    {    result    =    newInstance(this);    }    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        if(nans    ==    FINITE    &&    nans    ==    FINITE)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	55	1	add
110	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE    &&    nans    ==    FINITE)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	55	1	add
111	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE    &&    nans    ==    FINITE)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	3	1	add
113	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	3	1	add
114	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    Result  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	52	1	add
116	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	52	1	add
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	52	1	add
118	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	52	1	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	89	1	add
120	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	89	1	add
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	89	1	add
122	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	89	1	add
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	89	1	add
124	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	89	1	add
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	1	1	add
126	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	compilable	  [FE]  AssertionError  	1	1	add
127	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    Result  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	77	1	add
129	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	77	1	add
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	77	1	add
131	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	77	1	add
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	50	1	add
133	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	50	1	add
134	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	87	1	add
136	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	87	1	add
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	87	1	add
138	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	87	1	add
139	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	72	1	add
141	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	72	1	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	72	1	add
143	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	72	1	add
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =(byte)(x.nans  *  sign);	  result.sign    =(byte)(x.nans    *    sig);    	compilable	  [FE]  AssertionError  	30	1	replace
145	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  sign);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(x.nans  *  sign);	  result.sign    =(byte)(x.nans    *    sig);    	compilable	  [FE]  AssertionError  	30	1	replace
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	17	1	add
147	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	17	1	add
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	17	1	add
149	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	17	1	add
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	17	1	add
151	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	17	1	add
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	48	1	add
153	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	48	1	add
154	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	33	1	add
156	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	33	1	add
157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	33	1	add
158	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	33	1	add
159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	33	1	add
160	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    nans  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);	  	compilable	  [FE]  AssertionError  	33	1	add
161	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  result.sign  =(byte)(x.nans  *  nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    nans);    result.sign  =(byte)(x.nans  *  nans);	  	compilable	  [FE]  AssertionError  	31	1	add
162	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  result.sign  =(byte)(x.nans  *  nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  result.sign  =(byte)(x.nans  *  nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    nans);    result.sign  =(byte)(x.nans  *  nans);	  	compilable	  [FE]  AssertionError  	31	1	add
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    nans);    if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
164	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result.sign  =(byte)(x.nans  *  nans);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    nans);    if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    nans);    if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
166	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    nans);    if(x.nans  ==  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
167	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	8	1	add
168	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	8	1	add
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	8	1	add
170	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(this);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	8	1	add
171	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  Result  result  =  newInstance(this);  result  =  newInstance(this);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  Result  result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(this);    Result  result  =  newInstance(this);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
172	[BUG]  [BUGGY]  result.sign  =(byte)(mant  *  x.sign  +  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(mant  *  x.sign  +  1);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(mant  *  x.sign  +  1);	  result.sign    =(byte)(sign    *    x.sign    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
173	[BUG]  [BUGGY]  result.sign  =  newInstance(x.sign);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  newInstance(x.sign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  newInstance(x.sign);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  incompatible  types	21	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
175	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
177	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	10	1	add
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	10	1	add
179	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(x);    result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	10	1	add
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	70	1	add
181	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  result  =  newInstance(x.nans);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.nans);    result  =  newInstance(x.nans);	  	compilable	  [FE]  AssertionError  	70	1	add
182	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	70	1	add
183	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	70	1	add
184	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	70	1	add
185	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.nans);  }	  	compilable	  [FE]  AssertionError  	70	1	add
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  result.sign    =    x.sign;    if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    	compilable	  [FE]  AssertionError  	90	1	replace
187	[BUG]  [BUGGY]  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  result.sign    =    x.sign;    if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    	compilable	  [FE]  AssertionError  	90	1	replace
188	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	41	1	add
189	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	41	1	add
190	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	41	1	add
191	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	41	1	add
192	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  result.sign  =  x.sign;  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        x.sign    =    x.sign;    result.sign  =  x.sign;  x.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	65	1	add
193	[BUG]  [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  result.sign  =  x.sign;  x.sign  =  x.sign;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  result.sign  =  x.sign;  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        x.sign    =    x.sign;    result.sign  =  x.sign;  x.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	65	1	add
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  x.sign  =  x.sign;  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        x.sign    =    x.sign;    x.sign  =  x.sign;  x.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	65	1	add
195	[BUG]  [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  x.sign  =  x.sign;  x.sign  =  x.sign;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  x.sign  =  x.sign;  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        x.sign    =    x.sign;    x.sign  =  x.sign;  x.sign  =  x.sign;	  	compilable	  [FE]  AssertionError  	65	1	add
196	[BUG]  [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  Result.sign  =  x.sign;  x.sign  =  x.sign;  [CE]  cannot  find  symbol  Result  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  Result.sign  =  x.sign;  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        x.sign    =    x.sign;    Result.sign  =  x.sign;  x.sign  =  x.sign;	  	non-compiled	[CE]  cannot  find  symbol  Result	65	None	add
197	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	24	1	add
198	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	24	1	add
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	24	1	add
200	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	24	1	add
201	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	24	None	add
202	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(nans  *  x.sign);  }	          result.sign    =(byte)(nans    *    x.sign);    if(nans    ==    FINITE    &&    x.mant.length-1]!=    0)    {    result.sign    =(byte)(nans    *    x.sign);    }    	non-compiled	[CE]  ')'  expected	93	None	replace
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	57	1	add
204	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	57	1	add
205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	57	1	add
206	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(x);  }  else  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	57	1	add
207	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
208	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  result	  	non-compiled	[CE]  not  a  statement	52	None	add
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	33	1	add
210	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  result.sign  =(byte)(nans  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	33	1	add
211	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign	  	non-compiled	[CE]  ')'  expected	22	None	add
212	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result	  	non-compiled	[CE]  not  a  statement	50	None	add
213	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  x.infinite);  [CE]  cannot  find  symbol  infinite  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  x.infinite);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(x.sign  *  x.infinite);	  result.sign    =(byte)(x.nans    *    INFINITE);    	non-compiled	[CE]  cannot  find  symbol  infinite	60	None	replace
214	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  Result  =  newInstance(this);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  Result  =  newInstance(this);  result  =  newInstance(x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(x);    Result  =  newInstance(this);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	10	None	add
215	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	64	1	replace
217	[BUG]  [BUGGY]  if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  SNAN  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	64	1	replace
218	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE    &&    nans    ==    FINITE)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
219	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  SNAN;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =  SNAN;	  result.sign    =    sig;    	compilable	  [FE]  AssertionError  	5	1	replace
220	[BUG]  [BUGGY]  result.sign  =  SNAN;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  SNAN;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  SNAN;	  result.sign    =    sig;    	compilable	  [FE]  AssertionError  	5	1	replace
221	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	42	1	replace
222	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	42	1	replace
223	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
224	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result  =  x.sign;  if(x.sign  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	non-compiled	[CE]  incompatible  types	87	None	add
225	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    result  =  x.sign;  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
226	[BUG]  [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  Result.sign  =(byte)(sign  *  x.sign  +  1);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  Result.sign  =(byte)(sign  *  x.sign  +  1);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(sign    *    x.sign    +    1);    Result.sign  =(byte)(sign  *  x.sign  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Result	62	None	add
227	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.sign    *    nans);    if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
228	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.sign  *  nans);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.sign    *    nans);    if(x.sign  ==  nans)  {  result.sign  =(byte)(x.sign  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
229	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  Result  =  newInstance(this);  result  =  newInstance(this);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  Result  =  newInstance(this);  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(this);    Result  =  newInstance(this);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  Result	8	None	add
230	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }	          result.sign    =(byte)(sign    *    x.sign);    if(nans    ==    FINITE    &&    x.mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
231	[BUG]  [BUGGY]  result.sign  =(byte)(sig  *  x.sign);  [CE]  cannot  find  symbol  sig  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sig  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(sig  *  x.sign);	          result.sign    =(byte)(sign    *    x.sign);    if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    	non-compiled	[CE]  cannot  find  symbol  sig	78	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  2);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =(byte)(sign  *  x.sign  +  2);	  result.sign    =(byte)(sign    *    x.sign    +    1);    	compilable	  [FE]  AssertionError  	63	1	replace
233	[BUG]  [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  2);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(sign  *  x.sign  +  2);	  result.sign    =(byte)(sign    *    x.sign    +    1);    	compilable	  [FE]  AssertionError  	63	1	replace
234	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	57	1	add
235	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	57	1	add
236	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
237	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
238	[BUG]  [BUGGY]  result.sign  =(byte)(rsign  *  x.sign);  [CE]  cannot  find  symbol  rsign  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(rsign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(rsign  *  x.sign);	          result.sign    =(byte)(nans    *    x.sign);    if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    	non-compiled	[CE]  cannot  find  symbol  rsign	38	None	replace
239	[BUG]  [BUGGY]  result.sign  =  sig;  x.sign  =  x.sign;  [CE]  cannot  find  symbol  sig  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  sig;  x.sign  =  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  sig;  x.sign  =  x.sign;	  result.sign    =    x.sign;    x.sign    =    x.sign;    	non-compiled	[CE]  cannot  find  symbol  sig	66	None	replace
240	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	48	None	add
241	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	24	None	add
242	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(this);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign	  	non-compiled	[CE]  ')'  expected	24	None	add
243	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
244	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  INFINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
245	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  If(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  ';'  expected	72	None	add
246	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    Result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol  Result	3	None	add
247	[BUG]  [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  y.sign);  [CE]  cannot  find  symbol  y  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  y.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(x);  result.sign  =  (byte)(sign  *  y.sign);	  	non-compiled	[CE]  cannot  find  symbol  y	3	None	add
248	[BUG]  [BUGGY]  nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
249	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  FINITE  &&  x.mant.length-1]!=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
250	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	70	None	add
251	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [CE]  incomparable  types:  byte  and  <null>  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  null)  {  result  =  newInstance(x.nans);  }  else  {  result  =  newInstance(x.nans);  }	  	non-compiled	[CE]  incomparable  types:  byte  and  <null>	70	None	add
252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	53	1	replace
253	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	53	1	replace
254	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    else    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
255	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    Result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
256	[BUG]  [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.signed  =  (byte)(sign  *  x.sign);  [CE]  cannot  find  symbol  signed  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  result  =  newInstance(this);  result.signed  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    result  =  newInstance(this);  result.signed  =  (byte)(sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol  signed	1	None	add
257	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN())    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
258	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
259	[BUG]  [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
260	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  SNAN)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    if(x.nans  ==  SNAN)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
261	[BUG]  [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  SNAN)  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.nans  ==  SNAN)  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    if(x.nans  ==  SNAN)  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
262	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result.sign    =(byte)(nans    *    x.sign);    }    if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  result.sign  =(byte)(nans  *  x.sign);  }	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
263	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x	  	non-compiled	[CE]  ')'  expected	28	None	add
264	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign	  	non-compiled	[CE]  ')'  expected	28	None	add
265	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    result  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	non-compiled	[CE]  incompatible  types	17	None	add
266	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  result  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    result  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	non-compiled	[CE]  incompatible  types	89	None	add
267	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans!=  nans)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    nans);    if(x.nans!=  nans)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
268	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans!=  nans)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.nans  *  nans);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans!=  nans)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    nans);    if(x.nans!=  nans)  {  result.sign  =(byte)(x.nans  *  nans);  }  else  {  result  =  newInstance(this);  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }	          result.sign    =(byte)(sign    *    x.sign);    if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	49	1	replace
270	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }	          result.sign    =(byte)(sign    *    x.sign);    if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	49	1	replace
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  x.nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =(byte)(x.sign  *  x.nans);	  result.sign    =(byte)(x.nans    *    nans);    	compilable	  [FE]  AssertionError  	32	1	replace
272	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  x.nans);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(x.sign  *  x.nans);	  result.sign    =(byte)(x.nans    *    nans);    	compilable	  [FE]  AssertionError  	32	1	replace
273	[BUG]  [BUGGY]  result  =  newInstance(this,  x);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this,  x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result  =  newInstance(this,  x);	  result    =    newInstance(x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	20	None	replace
274	[BUG]  [BUGGY]  result  =  newInstance(this,  x);  result.sign  =  (byte)(sign  *  x.sign);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(this,  x);  result.sign  =  (byte)(sign  *  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result  =  newInstance(this,  x);  result.sign  =  (byte)(sign  *  x.sign);	  result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	4	None	replace
275	[BUG]  [BUGGY]  result.sign  =  newInstance(x,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]          AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  newInstance(x,  rsign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  newInstance(x,  rsign);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  cannot  find  symbol  rsign	21	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign!=  nans)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        result.sign    =    x.sign;    if(x.sign!=  nans)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
277	[BUG]  [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign!=  nans)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign!=  nans)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        result.sign    =    x.sign;    if(x.sign!=  nans)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign  ==  0)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign    =(byte)(x.sign    *    x.sign);    if(x.sign  ==  0)  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	6	1	add
279	[BUG]  [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign  ==  0)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  if(x.sign  ==  0)  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign    =(byte)(x.sign    *    x.sign);    if(x.sign  ==  0)  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	6	1	add
280	[BUG]  [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  Result.sign  =(byte)(x.sign  *  x.sign);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign  =(byte)(x.sign  *  x.sign);  Result.sign  =(byte)(x.sign  *  x.sign);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign    =(byte)(x.sign    *    x.sign);    Result.sign  =(byte)(x.sign  *  x.sign);	  	non-compiled	[CE]  cannot  find  symbol  Result	6	None	add
281	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  Result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [CE]  cannot  find  symbol  Result  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  Result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN()    ||    x.isNaN())    {    result    =    newInstance(this);    }    Result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  cannot  find  symbol  Result	83	None	add
282	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
283	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(x.nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(x.nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(x.nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign	  	non-compiled	[CE]  ')'  expected	26	None	add
284	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign    ==    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  }	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(x.nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	73	1	replace
286	[BUG]  [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(x.nans  ==  FINITE  &&  x.mant.length  >  0)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  if(nans    ==    FINITE    &&    x.mant.length    >    0)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	73	1	replace
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
288	[BUG]  [BUGGY]  result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
290	[BUG]  [BUGGY]  result  =  newInstance(x);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	19	1	add
291	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans!=  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans!=    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans!=  FINITE)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
292	[BUG]  [BUGGY]  result.sign  =  newInstance(this,  x);  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]          AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  newInstance(this,  x);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  newInstance(this,  x);	  result.sign    =    newInstance(x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	21	None	replace
293	[BUG]  [BUGGY]  result.sign  =  x;  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =  x;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =  x;	  result.sign    =    sig;    	non-compiled	[CE]  incompatible  types	5	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(sign    *    x.sign    +    1);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }	  	compilable	  [FE]  AssertionError  	62	1	add
295	[BUG]  [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(sign    *    x.sign    +    1);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }	  	compilable	  [FE]  AssertionError  	62	1	add
296	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(sign    *    x.sign    +    1);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }	  	compilable	  [FE]  AssertionError  	62	1	add
297	[BUG]  [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  *  x.sign  +  1);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(sign    *    x.sign    +    1);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign  +  1);  }	  	compilable	  [FE]  AssertionError  	62	1	add
298	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN()    ||    x.isNaN())    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(x.isNaN()  ||  x.isNaN())  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
299	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	70	1	add
300	[BUG]  [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result  =  newInstance(x.nans);  if(x.nans!=  FINITE)  {  result  =  newInstance(x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result    =    newInstance(x.nans);    if(x.nans!=  FINITE)  {  result  =  newInstance(x.sign);  }	  	compilable	  [FE]  AssertionError  	70	1	add
301	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	          result.sign    =(byte)(sign    *    x.sign);    if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	78	1	replace
302	[BUG]  [BUGGY]  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(x.sign  ==  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	          result.sign    =(byte)(sign    *    x.sign);    if(x.sign    ==    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	78	1	replace
303	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }	          result.sign    =(byte)(nans    *    x.sign);    if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    else    {    result.sign    =(byte)(nans    *    x.sign);    }    	compilable	  [FE]  AssertionError  	36	1	replace
304	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }	          result.sign    =(byte)(nans    *    x.sign);    if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    else    {    result.sign    =(byte)(nans    *    x.sign);    }    	compilable	  [FE]  AssertionError  	36	1	replace
305	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  /  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  =(byte)(sign  /  x.sign);	          result.sign    =(byte)(sign    *    x.sign);    result.sign    =(byte)(sign    *    x.sign);    	compilable	  [FE]  AssertionError  	46	1	replace
306	[BUG]  [BUGGY]  result.sign  =(byte)(sign  /  x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(sign  /  x.sign);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  =(byte)(sign  /  x.sign);	          result.sign    =(byte)(sign    *    x.sign);    result.sign    =(byte)(sign    *    x.sign);    	compilable	  [FE]  AssertionError  	46	1	replace
307	[BUG]  [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(nans    *    x.sign);    if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign);  }  result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(nans        *        x.sign);        if(nans    ==    FINITE)    {    result.sign    =(byte)(nans    *    x.sign);    }    else    {    result.sign    =(byte)(nans    *    x.sign);    }    result.sign  =(byte)(nans  *  x.sign);  if(nans  ==  FINITE)  {  result.sign  =(byte)(nans  *  x.sign);  }  else  {  result.sign  =(byte)(nans  *  x.sign	  	non-compiled	[CE]  ')'  expected	35	None	add
308	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.sign    *    nans);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
309	[BUG]  [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  nans);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.sign  *  nans);  if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.sign    *    nans);    if(x.sign  ==  FINITE)  {  result.sign  =(byte)(x.sign  *  nans);  }	  	compilable	  [FE]  AssertionError  	43	1	add
310	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	          result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	80	1	replace
311	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  }	          result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=    FINITE)    {    result.sign    =(byte)(sign    *    x.sign);    }    	compilable	  [FE]  AssertionError  	80	1	replace
312	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result.sign    =    x.sign;    }    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
313	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  x.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        x.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  x.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	65	1	add
314	[BUG]  [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  x.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    x.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  x.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        x.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  x.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	65	1	add
315	[BUG]  [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(nans  ==  FINITE  &&  x.mant.length  >  0)  {  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	          if(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    If(x.nans    ==    FINITE)    {    result    =    newInstance(this);    result.sign    =    (byte)(sign    *    x.sign);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
316	[BUG]  [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                if(nans        ==        FINITE)        {        result        =        newInstance(x);        result.sign        =        (byte)(sign        *        x.sign);        }        if(nans    ==    FINITE)    {    result    =    newInstance(x);    result.sign    =    (byte)(sign    *    x.sign);    }    if(nans  ==  FINITE)  {  result  =  newInstance(x);  result.sign  =  (byte)(sign  *  x.sign);  }  if(nans  ==  FINITE)  {  result  =  newInstance(x);	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
317	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  if(x.isNaN())  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  if(x.isNaN())  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE)    {    result    =    newInstance(this);    }    else    {    result    =    newInstance(this);    }    if(x.isNaN())  {  result  =  newInstance(this);  if(nans  ==  FINITE)  {  result  =  newInstance(this);  }  else  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
318	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans!=  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    nans);    if(x.nans!=  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
319	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans!=  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  nans);  if(x.nans!=  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    nans);    if(x.nans!=  FINITE)  {  result.sign  =(byte)(x.nans  *  nans);  }	  	compilable	  [FE]  AssertionError  	31	1	add
320	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
321	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
322	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  else  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  else  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
323	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  else  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    result.sign  =(byte)(sign  *  x.sign);  if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  else  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        result.sign    =(byte)(sign    *    x.sign);    if(x.sign!=  FINITE)  {  result.sign  =(byte)(sign  *  x.sign);  result.sign  =(byte)(sign  *  x.sign);  }  else  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	45	1	add
324	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  -=  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign  -=  x.sign;	  result.sign    =    x.sign;    result.sign    =    x.sign;    	compilable	  [FE]  AssertionError  	14	1	replace
325	[BUG]  [BUGGY]  result.sign  -=  x.sign;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  -=  x.sign;  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign  -=  x.sign;	  result.sign    =    x.sign;    result.sign    =    x.sign;    	compilable	  [FE]  AssertionError  	14	1	replace
326	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  else  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign    =(byte)(x.nans    *    INFINITE);    if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  else  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	59	1	add
327	[BUG]  [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  else  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign  =(byte)(x.nans  *  INFINITE);  if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  else  {  result.sign  =(byte)(x.sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign    =(byte)(x.nans    *    INFINITE);    if(x.nans  ==  INFINITE)  {  result.sign  =(byte)(x.nans  *  INFINITE);  }  else  {  result.sign  =(byte)(x.sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	59	1	add
328	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
329	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
330	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(this);    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
331	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(this);  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(this);    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
333	[BUG]  [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
334	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
335	[BUG]  [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    result.sign  =  x.sign;  if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        result.sign    =    x.sign;    if(x.sign  ==  FINITE)  {  result.sign  =  x.sign;  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	13	1	add
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	15	1	add
337	[BUG]  [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result.sign    =    x.sign;    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result.sign        =        x.sign;        if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  x.sign;  }	  	compilable	  [FE]  AssertionError  	15	1	add
338	[BUG]  [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  }  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(nans    ==    FINITE    &&    nans    ==    FINITE)    {    result    =    newInstance(this);    }    result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);  if(nans  ==  FINITE  &&  nans  ==  FINITE)  {  result  =  newInstance(this);	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
339	[BUG]  [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    if(x.isNaN())  {  result  =  newInstance(this);  }  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        if(x.isNaN())    {    result    =    newInstance(this);    }    if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  if(x.isNaN())  {  result  =  newInstance(this);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
340	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  result.sign    =    x.sign;    if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    	compilable	  [FE]  AssertionError  	16	1	replace
341	[BUG]  [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	if(x.sign!=  FINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)(sign  *  x.sign);  }	  result.sign    =    x.sign;    if(x.sign!=    FINITE)    {    result    =    newInstance(this);    result.sign    =    x.sign;    }    	compilable	  [FE]  AssertionError  	16	1	replace
342	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	                result.sign        =(byte)(sign        *        x.sign);        if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	48	1	add
343	[BUG]  [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]          result.sign    =(byte)(sign    *    x.sign);    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }  [BUGGY]      return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	                result.sign        =(byte)(sign        *        x.sign);        if(nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0)    {    result.sign    =(byte)(sign    *    x.sign);    }    if(nans  ==  FINITE  &&  x.mant[mant.length-1]!=  0)  {  result.sign  =(byte)(sign  *  x.sign);  }	  	compilable	  [FE]  AssertionError  	48	1	add
344	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	10	1	add
345	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(x);    if(x.isNaN())  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	10	1	add
346	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	add	result        =        newInstance(this);        result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	10	1	add
347	[BUG]  [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      return  this;  }  if  (x.isNaN())  {  return  x;  }  if  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  !=  0)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);      [BUGGY]  result    =    newInstance(this);    result  =  newInstance(x);  if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(x);  }  [BUGGY]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  !=  0)  {  result  =  newInstance(x);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1521	1521	1	replace	result        =        newInstance(this);        result    =    newInstance(x);    if(x.nans  ==  FINITE)  {  result  =  newInstance(this);  result  =  newInstance(x);  }	  	compilable	  [FE]  AssertionError  	10	1	add
