bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  nans);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  nans);	  field.setIEEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	5	None	replace
2	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  x.nans);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]            AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  x.nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  x.nans);	  field.setIEEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	5	None	replace
3	[BUG]  [BUGGY]  ||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  ||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||(nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	      ||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {	      ||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]!=    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.FLAG_INVALID,  nans);  [CE]  cannot  find  symbol  FLAG_INVALID  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x.FLAG_INVALID,  nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.FLAG_INVALID,  nans);	  field.setIEEEFlagsBits(x.FLAG_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INVALID	6	None	replace
6	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	4	None	replace
7	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  rsign);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  rsign);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    nans);    	non-compiled	[CE]  cannot  find  symbol  rsign	4	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	14	1	add
9	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	14	1	add
10	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	14	None	add
11	[BUG]  [BUGGY]  ||  nans  ==  FINITE)  {  result  =  newInstance(this);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  ||  nans  ==  FINITE)  {  result  =  newInstance(this);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  nans  ==  FINITE)  {  result  =  newInstance(this);	      ||    x.nans    ==    FINITE)    {    result    =    newInstance(this);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	12	1	add
13	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	12	1	add
14	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	12	None	add
15	[BUG]  [BUGGY]  ||  nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  ||  nans  ==  FINITE)  {  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  nans  ==  FINITE)  {	      ||    x.nans    ==    FINITE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  AssertionError  	17	1	replace
17	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  AssertionError  	17	1	replace
18	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  FINITE);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  FINITE);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  FINITE);	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	17	None	replace
19	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.in,  nans);  [CE]  cannot  find  symbol  in  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x.in,  nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.in,  nans);	  field.setIEEEFlagsBits(x.in);    	non-compiled	[CE]  cannot  find  symbol  in	7	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	8	1	add
21	[BUG]  [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        x.nans    =    QNAN;    x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	8	1	add
22	[BUG]  [BUGGY]      x.nans  =  QNAN;  ||  x.nans  ==  QNAN;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      x.nans  =  QNAN;  ||  x.nans  ==  QNAN;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        x.nans    =    QNAN;    ||  x.nans  ==  QNAN;	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
23	[BUG]  [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      x.nans  =  QNAN;  (x.nans  =  QNAN);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        x.nans    =    QNAN;    (x.nans  =  QNAN);	  	non-compiled	[CE]  not  a  statement	8	None	add
24	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  rsign);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  rsign);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  cannot  find  symbol  rsign	18	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	16	1	add
26	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	16	1	add
27	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	16	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  x.nans  =  0;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	x.nans  =  0;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	9	1	replace
29	[BUG]  [BUGGY]  x.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  x.nans  =  0;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans  =  0;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	9	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  x.nans  =  SNAN;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	x.nans  =  SNAN;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	9	1	replace
31	[BUG]  [BUGGY]  x.nans  =  SNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  x.nans  =  SNAN;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans  =  SNAN;	      x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	9	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  newInstance(getZero());  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	result  =  newInstance(getZero());	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	13	1	replace
33	[BUG]  [BUGGY]  result  =  newInstance(getZero());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  newInstance(getZero());  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  newInstance(getZero());	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	13	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  nans  =  QNAN;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	nans  =  QNAN;	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	13	1	replace
35	[BUG]  [BUGGY]  nans  =  QNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  nans  =  QNAN;  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	nans  =  QNAN;	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	13	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	compilable	  [FE]  AssertionError  	15	1	replace
37	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	compilable	  [FE]  AssertionError  	15	1	replace
38	[BUG]  [BUGGY]  ||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  ||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  ||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  ||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||(nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {	      ||(nans    ==    INFINITE    &&    x.nans    ==    FINITE    &&    x.mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	18	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	13	1	replace
42	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	13	1	replace
43	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x);	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	13	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x.nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	field.setIEEEFlagsBits(x.nans);	  field.setIEEEFlagsBits(x.in);    	compilable	  [FE]  AssertionError  	7	1	replace
45	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.nans);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x.nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.nans);	  field.setIEEEFlagsBits(x.in);    	compilable	  [FE]  AssertionError  	7	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x.sign);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	field.setIEEEFlagsBits(x.sign);	  field.setIEEEFlagsBits(x.FLAG_INVALID);    	compilable	  [FE]  AssertionError  	6	1	replace
47	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.sign);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x.sign);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.sign);	  field.setIEEEFlagsBits(x.FLAG_INVALID);    	compilable	  [FE]  AssertionError  	6	1	replace
48	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  0);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  0);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  0);	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	15	None	replace
49	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	4	None	replace
50	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID);  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID);	      if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	17	None	replace
51	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  x);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  x);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  x);	  field.setIEEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	5	None	replace
52	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  mant,  x);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  mant,  x);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  mant,  x);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	18	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	16	1	add
54	[BUG]  [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]      if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	16	1	add
55	[BUG]  [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]          AssertionError    [CONTEXT]    }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {    [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID);  [BUGGY]    result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEFlagsBits(DfpField.FIELD_INVALID);	  field.setIEEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	5	None	replace
