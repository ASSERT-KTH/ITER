bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);	  ||    nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  0;  x.nans  =  0;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	x.nans  =  0;  x.nans  =  0;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	21	1	replace
3	[BUG]  [BUGGY]  x.nans  =  0;  x.nans  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  0;  x.nans  =  0;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans  =  0;  x.nans  =  0;	          x.nans    =    QNAN;    x.nans    =    QNAN;    	compilable	  [FE]  AssertionError  	21	1	replace
4	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE);	  if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	17	None	replace
5	[BUG]  [BUGGY]  x.nans  =  NAN;  [CE]  cannot  find  symbol  NAN  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  NAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans  =  NAN;	  x.nans    =    SNAN;    	non-compiled	[CE]  cannot  find  symbol  NAN	31	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	14	1	replace
7	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    	compilable	  [FE]  AssertionError  	14	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	x.nans    =    SNAN;    x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	30	1	add
9	[BUG]  [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  SNAN;  x.nans  =  SNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans    =    SNAN;    x.nans  =  SNAN;	  	compilable	  [FE]  AssertionError  	30	1	add
10	[BUG]  [BUGGY]  x.nans  =  SNAN;  ||  x.nans  ==  SNAN;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  SNAN;  ||  x.nans  ==  SNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans    =    SNAN;    ||  x.nans  ==  SNAN;	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
11	[BUG]  [BUGGY]  x.nans  =  SNAN;  (x.nans  =  SNAN);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  SNAN;  (x.nans  =  SNAN);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans    =    SNAN;    (x.nans  =  SNAN);	  	non-compiled	[CE]  not  a  statement	30	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	25	1	add
13	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	25	1	add
14	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	25	None	add
15	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  nans);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x,  nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  nans);	  field.setIEEEFlagsBits(x.in,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	19	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	12	1	add
17	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	12	1	add
18	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	12	None	add
19	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  mant);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  mant);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  mant);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    mant,    x);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	52	None	replace
20	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  mant,  x,  nans);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  mant,  x,  nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  mant,  x,  nans);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    mant,    x);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	52	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	result    =    newInstance(getZero());    result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	32	1	add
22	[BUG]  [BUGGY]  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(getZero());  result  =  newInstance(getZero());  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result    =    newInstance(getZero());    result  =  newInstance(getZero());	  	compilable	  [FE]  AssertionError  	32	1	add
23	[BUG]  [BUGGY]  result  =  newInstance(getZero());  Result  =  newInstance(getZero());  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(getZero());  Result  =  newInstance(getZero());  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result    =    newInstance(getZero());    Result  =  newInstance(getZero());	  	non-compiled	[CE]  cannot  find  symbol  Result	32	None	add
24	[BUG]  [BUGGY]  ||(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||(nans  ==  FINITE  &&  mant[mant.length-1]  ==  0))  {	  ||(nans    ==    FINITE    &&    x.nans    ==    FINITE    &&    mant[mant.length-1]    ==    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  sig);  [CE]  cannot  find  symbol  sig  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  sig);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  sig);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    nans,    rsign);    	non-compiled	[CE]  cannot  find  symbol  sig	7	None	replace
26	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  mant);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  mant);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  mant);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    nans,    rsign);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	7	None	replace
27	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  MULTIPLY_TRAP);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  MULTIPLY_TRAP);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    FINITE);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	18	None	replace
28	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  FINITE,  x,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  FINITE,  x,  MULTIPLY_TRAP);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  FINITE,  x,  MULTIPLY_TRAP);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    FINITE);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	18	None	replace
29	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.sign,  nans);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.sign,  nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.sign,  nans);	  field.setIEEEFlagsBits(x.sign);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	47	None	replace
30	[BUG]  [BUGGY]  ||  x.nans  ==  QNAN;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||  x.nans  ==  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  x.nans  ==  QNAN;	          x.nans    =    QNAN;    ||    x.nans    ==    QNAN;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
31	[BUG]  [BUGGY]  ||  x.nans  ==  INFINITE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||  x.nans  ==  INFINITE;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  x.nans  ==  INFINITE;	          x.nans    =    QNAN;    ||    x.nans    ==    QNAN;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	53	1	add
33	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	53	1	add
34	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	53	None	add
35	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.nans,  nans);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.nans,  nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.nans,  nans);	  field.setIEEEFlagsBits(x.FLAG_INVALID,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	5	None	replace
36	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans,  rsign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans,  rsign);	  field.setIEEEFlagsBits(x,    DfpField.FLAG_INVALID,    nans);    	non-compiled	[CE]  cannot  find  symbol  rsign	49	None	replace
38	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  mant,  nans);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  mant,  nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  mant,  nans);	  field.setIEEEFlagsBits(x,    DfpField.FLAG_INVALID,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	49	None	replace
39	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans  ==  FINITE)  {  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
40	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans  ==  FINITE)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	34	1	add
42	[BUG]  [BUGGY]  nans  =  QNAN;  nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  QNAN;  nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	nans    =    QNAN;    nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	34	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  QNAN;  int  nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	nans    =    QNAN;    int  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	34	1	add
44	[BUG]  [BUGGY]  nans  =  QNAN;  int  nans  =  QNAN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  QNAN;  int  nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	nans    =    QNAN;    int  nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	34	1	add
45	[BUG]  [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID,  x.nans);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID,  x.nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEFlagsBits(DfpField.FIELD_INVALID,  x.nans);	  field.setIEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	55	None	replace
46	[BUG]  [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID,  nans);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]                AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID,  nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEFlagsBits(DfpField.FIELD_INVALID,  nans);	  field.setIEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	55	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	36	1	add
48	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	36	1	add
49	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  If(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  If(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    If(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	non-compiled	[CE]  ';'  expected	36	None	add
50	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  rsign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  rsign);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x,    nans);    	non-compiled	[CE]  cannot  find  symbol  rsign	6	None	replace
51	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  x);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  x);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  x);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	6	None	replace
52	[BUG]  [BUGGY]  ||  nans  ==  FINITE)  {  result  =  newInstance(x);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||  nans  ==  FINITE)  {  result  =  newInstance(x);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  nans  ==  FINITE)  {  result  =  newInstance(x);	  ||    nans    ==    FINITE)    {    result    =    newInstance(this);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
54	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
55	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  rsign);  [CE]  cannot  find  symbol  rsign  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  rsign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  rsign);	  field.setIEEEFlagsBits(x,    DfpField.FLAG_INVALID);    	non-compiled	[CE]  cannot  find  symbol  rsign	40	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.sign);  field.setIEEEFlagsBits(x.sign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	field.setIEEEFlagsBits(x.sign);    field.setIEEEFlagsBits(x.sign);	  	compilable	  [FE]  AssertionError  	46	1	add
57	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.sign);  field.setIEEEFlagsBits(x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.sign);  field.setIEEEFlagsBits(x.sign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.sign);    field.setIEEEFlagsBits(x.sign);	  	compilable	  [FE]  AssertionError  	46	1	add
58	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.sign);  Field.setIEEEFlagsBits(x.sign);  [CE]  cannot  find  symbol  Field  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.sign);  Field.setIEEEFlagsBits(x.sign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.sign);    Field.setIEEEFlagsBits(x.sign);	  	non-compiled	[CE]  cannot  find  symbol  Field	46	None	add
59	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  mant,  x,  result);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	42	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  1;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	x.nans  =  1;	  x.nans    =    0;    	compilable	  [FE]  AssertionError  	29	1	replace
61	[BUG]  [BUGGY]  x.nans  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  1;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans  =  1;	  x.nans    =    0;    	compilable	  [FE]  AssertionError  	29	1	replace
62	[BUG]  [BUGGY]  (x.nans  =  QNAN);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  (x.nans  =  QNAN);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	(x.nans  =  QNAN);	          x.nans    =    QNAN;    (x.nans    =    QNAN);    	non-compiled	[CE]  not  a  statement	23	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(this);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	result  =  newInstance(this);	  result    =    newInstance(getZero());    	compilable	  [FE]  AssertionError  	33	1	replace
64	[BUG]  [BUGGY]  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(this);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  newInstance(this);	  result    =    newInstance(getZero());    	compilable	  [FE]  AssertionError  	33	1	replace
65	[BUG]  [BUGGY]  result  =  newInstance(this,  getZero());  [CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(this,  getZero());  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  newInstance(this,  getZero());	  result    =    newInstance(getZero());    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,Dfp)	33	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        newInstance(this);        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
67	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        newInstance(this);        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
68	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        newInstance(this);        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	8	None	add
69	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  sig);  [CE]  cannot  find  symbol  sig  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  sig);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  sig);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x,    rsign);    	non-compiled	[CE]  cannot  find  symbol  sig	24	None	replace
70	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  0);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  0);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  0);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    0);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	48	None	replace
71	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  nans,  0);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  nans,  0);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  FINITE,  nans,  0);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    0);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	48	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	20	1	add
73	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    x.nans  =  QNAN;  x.nans  =  QNAN;	  	compilable	  [FE]  AssertionError  	20	1	add
74	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
75	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans  =  QNAN;  x.nans  =  QNAN;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans  =  QNAN;  x.nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans  =  QNAN;  x.nans  =  QNAN;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.nans);  field.setIEEEFlagsBits(x.nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	field.setIEEEFlagsBits(x.nans);    field.setIEEEFlagsBits(x.nans);	  	compilable	  [FE]  AssertionError  	44	1	add
77	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.nans);  field.setIEEEFlagsBits(x.nans);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.nans);  field.setIEEEFlagsBits(x.nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.nans);    field.setIEEEFlagsBits(x.nans);	  	compilable	  [FE]  AssertionError  	44	1	add
78	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.nans);  Field.setIEEEFlagsBits(x.nans);  [CE]  cannot  find  symbol  Field  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.nans);  Field.setIEEEFlagsBits(x.nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.nans);    Field.setIEEEFlagsBits(x.nans);	  	non-compiled	[CE]  cannot  find  symbol  Field	44	None	add
79	[BUG]  [BUGGY]  ||  nans  ==  INFINITE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||  nans  ==  INFINITE)  {  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  nans  ==  INFINITE)  {	  ||    nans    ==    FINITE)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	16	1	add
81	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	compilable	  [FE]  AssertionError  	16	1	add
82	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  If(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  If(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    If(nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	non-compiled	[CE]  ';'  expected	16	None	add
83	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x);	  result    =    dotrap(DfpField.FLAG_INVALID);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	50	None	replace
84	[BUG]  [BUGGY]  result  =  dotrap(x,  DfpField.FLAG_INVALID);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(x,  DfpField.FLAG_INVALID);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(x,  DfpField.FLAG_INVALID);	  result    =    dotrap(DfpField.FLAG_INVALID);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	50	None	replace
85	[BUG]  [BUGGY]  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||(nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  if(nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	41	1	add
87	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	compilable	  [FE]  AssertionError  	41	1	add
88	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    Result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	non-compiled	[CE]  cannot  find  symbol  Result	41	None	add
89	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);  [CE]  cannot  find  symbol  MULTIPly_TRAP  [FE]        AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPly_TRAP,  x,  result);	  	non-compiled	[CE]  cannot  find  symbol  MULTIPly_TRAP	41	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  x.nans;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	nans  =  x.nans;	  nans    =    QNAN;    	compilable	  [FE]  AssertionError  	35	1	replace
91	[BUG]  [BUGGY]  nans  =  x.nans;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  x.nans;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	nans  =  x.nans;	  nans    =    QNAN;    	compilable	  [FE]  AssertionError  	35	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  0;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	nans  =  0;	  nans    =    QNAN;    	compilable	  [FE]  AssertionError  	35	1	replace
93	[BUG]  [BUGGY]  nans  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  0;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	nans  =  0;	  nans    =    QNAN;    	compilable	  [FE]  AssertionError  	35	1	replace
94	[BUG]  [BUGGY]  x.nans  =  0;  ||  x.nans  =  0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  0;  ||  x.nans  =  0;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans    =    0;    ||  x.nans  =  0;	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
95	[BUG]  [BUGGY]  x.nans  =  0;  (x.nans  =  0;  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  0;  (x.nans  =  0;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans    =    0;    (x.nans  =  0;	  	non-compiled	[CE]  ')'  expected	28	None	add
96	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  SNAN);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  SNAN);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  SNAN);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    nans,    rsign);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	7	None	replace
97	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  INFINITE);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  INFINITE);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  nans,  INFINITE);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    nans,    rsign);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	7	None	replace
98	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        newInstance(this);        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	8	None	add
99	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
100	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits	  	non-compiled	[CE]  ';'  expected	12	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  SNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	nans  =  SNAN;	  nans    =    QNAN;    	compilable	  [FE]  AssertionError  	35	1	replace
102	[BUG]  [BUGGY]  nans  =  SNAN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  SNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	nans  =  SNAN;	  nans    =    QNAN;    	compilable	  [FE]  AssertionError  	35	1	replace
103	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans,  FINITE);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans,  FINITE);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  nans,  FINITE);	  field.setIEEEFlagsBits(x,    DfpField.FLAG_INVALID,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	49	None	replace
104	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  FINITE,  DfpField.FLAG_INVALID);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x,  FINITE,  DfpField.FLAG_INVALID);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  FINITE,  DfpField.FLAG_INVALID);	  field.setIEEEFlagsBits(x,    DfpField.FLAG_INVALID);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	40	None	replace
105	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  SNAN);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  SNAN);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  SNAN);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x,    rsign);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	24	None	replace
106	[BUG]  [BUGGY]  nans  =  QNAN;  (nans  ==  QNAN);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  nans  =  QNAN;  (nans  ==  QNAN);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	nans    =    QNAN;    (nans  ==  QNAN);	  	non-compiled	[CE]  not  a  statement	34	None	add
107	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  MULTIPLY_TRAP);  [CE]  cannot  find  symbol  X  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  X,  MULTIPLY_TRAP);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  X,  MULTIPLY_TRAP);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x);    	non-compiled	[CE]  cannot  find  symbol  X	43	None	replace
108	[BUG]  [BUGGY]  x.nans  =  QNAN;  ||  x.nans  ==  SNAN;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  QNAN;  ||  x.nans  ==  SNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans  =  QNAN;  ||  x.nans  ==  SNAN;	          x.nans    =    QNAN;    ||    x.nans    ==    QNAN;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
109	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FL  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FL  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FL	  	non-compiled	[CE]  ')'  expected	25	None	add
110	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG	  	non-compiled	[CE]  ')'  expected	25	None	add
111	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  INFINITE);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  INFINITE);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  INFINITE);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	6	None	replace
112	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  incomparable  types:  Dfp  and  byte  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	  	non-compiled	[CE]  incomparable  types:  Dfp  and  byte	53	None	add
113	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  unreachable  statement	10	None	replace
114	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||  x.nans  ==  QNAN;  x.nans  =  QNAN;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||  x.nans  ==  QNAN;  x.nans  =  QNAN;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    ||  x.nans  ==  QNAN;  x.nans  =  QNAN;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
115	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  NullPointerException  	27	1	replace
116	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [FE]  NullPointerException  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  null);	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	compilable	  [FE]  NullPointerException  	27	1	replace
117	[BUG]  [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans  ==  FINITE)  {  field.setIEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans  ==  FINITE)  {  field.setIEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
118	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  nans);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  nans);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    0);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	48	None	replace
119	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  0);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  0);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  0);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    0);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	48	None	replace
120	[BUG]  [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID,  x);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEFlagsBits(DfpField.FIELD_INVALID,  x);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEFlagsBits(DfpField.FIELD_INVALID,  x);	  field.setIEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	55	None	replace
121	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [CE]  final  parameter  x  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x,    result);    x  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);	  	non-compiled	[CE]  final  parameter  x  may  not  be  assigned	41	None	add
122	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.sig);  [CE]  cannot  find  symbol  sig  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.sig);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.sig);	  field.setIEEEFlagsBits(x.sign);    	non-compiled	[CE]  cannot  find  symbol  sig	47	None	replace
123	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    	non-compiled	[CE]  unreachable  statement	27	None	replace
124	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  mant);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  mant);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FIELD_INVALID,  mant);	  field.setIEEEFlagsBits(DfpField.FIELD_INVALID,    x);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	51	None	replace
125	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
126	[BUG]  [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          x.nans    =    QNAN;    x.nans  =  QNAN;  ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                x.nans        =        QNAN;        x.nans    =    QNAN;    ||  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
127	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  sign);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  sign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x,  nans,  sign);	  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,    x,    nans);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	6	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	if(nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	compilable	  [FE]  AssertionError  	10	1	replace
129	[BUG]  [BUGGY]  if(nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	compilable	  [FE]  AssertionError  	10	1	replace
130	[BUG]  [BUGGY]  ||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  ||    nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
131	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(Df  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(Df  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        result        =        newInstance(getZero());        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(getZero());    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(Df	  	non-compiled	[CE]  ')'  expected	12	None	add
132	[BUG]  [BUGGY]  if(getZero()!=  null)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  if(getZero()!=  null)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	if(getZero()!=  null)  {  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
133	[BUG]  [BUGGY]  x.nans  =  0;  (x.nans  =  0);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  x.nans  =  0;  (x.nans  =  0);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	x.nans    =    0;    (x.nans  =  0);	  	non-compiled	[CE]  not  a  statement	28	None	add
134	[BUG]  [BUGGY]  ||  x.nans  ==  0;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  ||  x.nans  ==  0;  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	||  x.nans  ==  0;	          x.nans    =    QNAN;    ||    x.nans    ==    QNAN;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlags(x.sign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	field.setIEEEFlags(x.sign);	  field.setIEEEFlagsBits(x.sign);    	compilable	  [FE]  AssertionError  	47	1	replace
136	[BUG]  [BUGGY]  field.setIEEEFlags(x.sign);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlags(x.sign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlags(x.sign);	  field.setIEEEFlagsBits(x.sign);    	compilable	  [FE]  AssertionError  	47	1	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	32	1	add
138	[BUG]  [BUGGY]  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  newInstance(getZero());  if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result    =    newInstance(getZero());    if(getZero()!=  null)  {  result  =  newInstance(getZero());  }  else  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  }	  	compilable	  [FE]  AssertionError  	32	1	add
139	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.FLAG_INVALID,  SNAN);  [CE]  cannot  find  symbol  FLAG_INVALID  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.FLAG_INVALID,  SNAN);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.FLAG_INVALID,  SNAN);	  field.setIEEEFlagsBits(x.FLAG_INVALID,    nans);    	non-compiled	[CE]  cannot  find  symbol  FLAG_INVALID	5	None	replace
140	[BUG]  [BUGGY]  field.setIEFlagsBits(DfpField.FIELD_INVALID);  [CE]  cannot  find  symbol  FIELD_INVALID  [FE]              AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEFlagsBits(DfpField.FIELD_INVALID);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEFlagsBits(DfpField.FIELD_INVALID);	  field.setIEEFlagsBits(DfpField.FIELD_INVALID);    	non-compiled	[CE]  cannot  find  symbol  FIELD_INVALID	55	None	replace
141	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  nans);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  nans);  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  nans);	  result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    x);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	43	None	replace
142	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG	  	non-compiled	[CE]  ')'  expected	53	None	add
143	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FL  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FL  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        result;        }        if(x.nans!=    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    result;    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  result;  }  if(x.nans!=  FINITE)  {  field.setIEEEFlagsBits(DfpField.FL	  	non-compiled	[CE]  ')'  expected	53	None	add
144	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.sign);  FieldUtils.setIEEEFlagsBits(x.sign);  [CE]  cannot  find  symbol  FieldUtils  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.sign);  FieldUtils.setIEEEFlagsBits(x.sign);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.sign);    FieldUtils.setIEEEFlagsBits(x.sign);	  	non-compiled	[CE]  cannot  find  symbol  FieldUtils	46	None	add
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x!=  null)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	add	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        newInstance(this);        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x!=  null)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
146	[BUG]  [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x!=  null)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]          if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x.nans  ==  FINITE)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  if(x!=  null)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	                if(x.nans        ==        FINITE)        {        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);        return        newInstance(this);        }        if(x.nans    ==    FINITE)    {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    return    newInstance(this);    }    if(x!=  null)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  return  newInstance(this);  }	  	compilable	  [FE]  AssertionError  	8	1	add
147	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x.nans);  FieldUtils.setIEEEFlagsBits(x.nans);  [CE]  cannot  find  symbol  FieldUtils  [FE]    AssertionError    [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x.nans);  FieldUtils.setIEEEFlagsBits(x.nans);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x.nans);    FieldUtils.setIEEEFlagsBits(x.nans);	  	non-compiled	[CE]  cannot  find  symbol  FieldUtils	44	None	add
148	[BUG]  [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  mant);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (x.nans  ==  INFINITE  &&  nans  ==  INFINITE)  {  result  =  newInstance(this);  result.sign  =  (byte)  (sign  *  x.sign);  return  result;  }  if  (  (x.nans  ==  INFINITE  &&  nans  ==  FINITE  &&  mant[mant.length-1]  ==  0)  ||  (nans  ==  INFINITE  &&  x.nans  ==  FINITE  &&  x.mant[mant.length-1]  ==  0)  )  {      [BUGGY]  field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  mant);  [BUGGY]      result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  x,  result);  return  result;  }  }  int[]  product  =  new  int[mant.length*2];//  Big  enough  to  hold  even  the  largest  result  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [CLASS]  Dfp  [METHOD]  multiply  [RETURN_TYPE]  Dfp  Dfp  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  x  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1538	1538	1	replace	field.setIEEEFlagsBits(x,  DfpField.FLAG_INVALID,  mant);	  field.setIEEEFlagsBits(x,    DfpField.FLAG_INVALID);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	40	None	replace
