bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  rh;  final  int  r  =  mant[i]  *  RADIX  +  rh;  [CE]  variable  r  is  already  defined  in  method  multiplyFast(int)  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  rh;  final  int  r  =  mant[i]  *  RADIX  +  rh;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final    int    r    =    mant[i]    *    RADIX    +    rh;    final  int  r  =  mant[i]  *  RADIX  +  rh;	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  multiplyFast(int)	3	None	add
2	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  rh;  Final  int  r  =  mant[i]  *  RADIX  +  rh;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  rh;  Final  int  r  =  mant[i]  *  RADIX  +  rh;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final    int    r    =    mant[i]    *    RADIX    +    rh;    Final  int  r  =  mant[i]  *  RADIX  +  rh;	  	non-compiled	[CE]  not  a  statement	3	None	add
3	[BUG]  [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.abs(rh);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.abs(rh);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	((  RADIX)mant[i]).nans  =  Math.abs(rh);	      ((    RADIX)mant[i]).nans    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
4	[BUG]  [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.abs(x,  rh);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.abs(x,  rh);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	((  RADIX)mant[i]).nans  =  Math.abs(x,  rh);	      ((    RADIX)mant[i]).nans    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
5	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  final  int  r  =  mant[i]  *  RADIX  +  x;  [CE]  variable  r  is  already  defined  in  method  multiplyFast(int)  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  final  int  r  =  mant[i]  *  RADIX  +  x;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final    int    r    =    mant[i]    *    RADIX    +    x;    final  int  r  =  mant[i]  *  RADIX  +  x;	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  multiplyFast(int)	1	None	add
6	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  Final  int  r  =  mant[i]  *  RADIX  +  x;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  Final  int  r  =  mant[i]  *  RADIX  +  x;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final    int    r    =    mant[i]    *    RADIX    +    x;    Final  int  r  =  mant[i]  *  RADIX  +  x;	  	non-compiled	[CE]  not  a  statement	1	None	add
7	[BUG]  [BUGGY]  int  x  =  Math.min(mant.length,  i  +  1);  [CE]  variable  x  is  already  defined  in  method  multiplyFast(int)  [FE]        AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  int  x  =  Math.min(mant.length,  i  +  1);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	int  x  =  Math.min(mant.length,  i  +  1);	      int    x    =    Math.min(mant.length,    i);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  multiplyFast(int)	6	None	replace
8	[BUG]  [BUGGY]  int  x  =  Math.min(mant.length,  i  *  RADIX);  [CE]  variable  x  is  already  defined  in  method  multiplyFast(int)  [FE]          AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  int  x  =  Math.min(mant.length,  i  *  RADIX);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	int  x  =  Math.min(mant.length,  i  *  RADIX);	      int    x    =    Math.min(mant.length,    i);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  multiplyFast(int)	6	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  1;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	final  int  r  =  mant[i]  *  RADIX  +  1;	  final    int    r    =    mant[i]    *    RADIX    +    x;    	compilable	  [FE]  AssertionError  	2	2	replace
10	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  1;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final  int  r  =  mant[i]  *  RADIX  +  1;	  final    int    r    =    mant[i]    *    RADIX    +    x;    	compilable	  [FE]  AssertionError  	2	2	replace
11	[BUG]  [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.min(result.nans,  x);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.min(result.nans,  x);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	((  RADIX)mant[i]).nans  =  Math.min(result.nans,  x);	      ((    RADIX)mant[i]).nans    =    Math.min(result.nans,    i);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
12	[BUG]  [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.min(result.nans,  rh);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.min(result.nans,  rh);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	((  RADIX)mant[i]).nans  =  Math.min(result.nans,  rh);	      ((    RADIX)mant[i]).nans    =    Math.min(result.nans,    i);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]  ((  RADIX)mant[i]).setIsVisible(true,  x);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  ((  RADIX)mant[i]).setIsVisible(true,  x);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	((  RADIX)mant[i]).setIsVisible(true,  x);	      ((    RADIX)mant[i]).setIsVisible(true);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
14	[BUG]  [BUGGY]  ((  RADIX)mant[i]).nans  =  1;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  ((  RADIX)mant[i]).nans  =  1;  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	((  RADIX)mant[i]).nans  =  1;	      ((    RADIX)mant[i]).nans    =    0;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
15	[BUG]  [BUGGY]  DfpField  field  =(DfpField)mant[i];  [CE]  inconvertible  types  [FE]            AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  DfpField  field  =(DfpField)mant[i];  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	DfpField  field  =(DfpField)mant[i];	      	non-compiled	[CE]  inconvertible  types	5	None	replace
16	[BUG]  [BUGGY]  DfpField  field  =(DfpField)mant[i].getField(i);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  DfpField  field  =(DfpField)mant[i].getField(i);  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	DfpField  field  =(DfpField)mant[i].getField(i);	      	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  2;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	final  int  r  =  mant[i]  *  RADIX  +  2;	  final    int    r    =    mant[i]    *    RADIX    +    x;    	compilable	  [FE]  AssertionError  	2	2	replace
18	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  2;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final  int  r  =  mant[i]  *  RADIX  +  2;	  final    int    r    =    mant[i]    *    RADIX    +    x;    	compilable	  [FE]  AssertionError  	2	2	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  int  r  =  mant[i];  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	int  r  =  mant[i];	      	compilable	  [FE]  AssertionError  	5	2	replace
20	[BUG]  [BUGGY]  int  r  =  mant[i];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  int  r  =  mant[i];  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	int  r  =  mant[i];	      	compilable	  [FE]  AssertionError  	5	2	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  /  RADIX  +  x;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	final  int  r  =  mant[i]  /  RADIX  +  x;	  final    int    r    =    mant[i]    *    RADIX    +    x;    	compilable	  [FE]  AssertionError  	2	2	replace
22	[BUG]  [BUGGY]  final  int  r  =  mant[i]  /  RADIX  +  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  /  RADIX  +  x;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final  int  r  =  mant[i]  /  RADIX  +  x;	  final    int    r    =    mant[i]    *    RADIX    +    x;    	compilable	  [FE]  AssertionError  	2	2	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  /  RADIX  +  rh;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	final  int  r  =  mant[i]  /  RADIX  +  rh;	  final    int    r    =    mant[i]    *    RADIX    +    rh;    	compilable	  [FE]  AssertionError  	4	2	replace
24	[BUG]  [BUGGY]  final  int  r  =  mant[i]  /  RADIX  +  rh;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  final  int  r  =  mant[i]  /  RADIX  +  rh;  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final  int  r  =  mant[i]  /  RADIX  +  rh;	  final    int    r    =    mant[i]    *    RADIX    +    rh;    	compilable	  [FE]  AssertionError  	4	2	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  Integer  r  =  mant[i];  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	Integer  r  =  mant[i];	      	compilable	  [FE]  AssertionError  	5	2	replace
26	[BUG]  [BUGGY]  Integer  r  =  mant[i];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  Integer  r  =  mant[i];  [BUGGY]    rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	Integer  r  =  mant[i];	      	compilable	  [FE]  AssertionError  	5	2	replace
27	[BUG]  [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.min(Math.min(result.nans,  x);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {    [BUGGY]  ((  RADIX)mant[i]).nans  =  Math.min(Math.min(result.nans,  x);  [BUGGY]    final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	((  RADIX)mant[i]).nans  =  Math.min(Math.min(result.nans,  x);	      ((    RADIX)mant[i]).nans    =    Math.min(result.nans,    i);    	non-compiled	[CE]  ')'  expected	10	None	replace
