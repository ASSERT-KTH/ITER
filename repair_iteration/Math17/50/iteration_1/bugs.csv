bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  [BUGGY]  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	final  int  r  =  mant[i]  *  RADIX  +  x;	final  int  r  =  mant[i]  *  x  +  rh;  	compilable	  [FE]  AssertionError  	99	2	replace
2	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  x;  [BUGGY]  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final  int  r  =  mant[i]  *  RADIX  +  x;	final  int  r  =  mant[i]  *  x  +  rh;  	compilable	  [FE]  AssertionError  	99	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  rh;  [BUGGY]  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	add	final  int  r  =  mant[i]  *  RADIX  +  rh;	final  int  r  =  mant[i]  *  x  +  rh;  	compilable	  [FE]  AssertionError  	99	2	replace
4	[BUG]  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  rh;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]  final  int  r  =  mant[i]  *  RADIX  +  rh;  [BUGGY]  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	final  int  r  =  mant[i]  *  RADIX  +  rh;	final  int  r  =  mant[i]  *  x  +  rh;  	compilable	  [FE]  AssertionError  	99	2	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  r  [FE]        AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    [BUGGY]  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	  	final  int  r  =  mant[i]  *  x  +  rh;  	non-compiled	[CE]  cannot  find  symbol  r	99	None	replace
6	[BUG]  [BUGGY]    int  x  =  Math.min(mant.length,  i);  [CE]  variable  x  is  already  defined  in  method  multiplyFast(int)  [FE]    AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    int  x  =  Math.min(mant.length,  i);  [BUGGY]  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	    int  x  =  Math.min(mant.length,  i);		non-compiled	[CE]  variable  x  is  already  defined  in  method  multiplyFast(int)	100	None	add
7	[BUG]  [BUGGY]    ((  RADIX)mant[i]).nans  =  0;  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    ((  RADIX)mant[i]).nans  =  0;  [BUGGY]  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	    ((  RADIX)mant[i]).nans  =  0;		non-compiled	[CE]  cannot  find  symbol	100	None	add
8	[BUG]  [BUGGY]    ((  RADIX)mant[i]).nans  =  Math.abs(x);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    ((  RADIX)mant[i]).nans  =  Math.abs(x);  [BUGGY]  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	    ((  RADIX)mant[i]).nans  =  Math.abs(x);		non-compiled	[CE]  cannot  find  symbol	100	None	add
9	[BUG]  [BUGGY]    ((  RADIX)mant[i]).nans  =  Math.min(result.length,  i);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    ((  RADIX)mant[i]).nans  =  Math.min(result.length,  i);  [BUGGY]  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	    ((  RADIX)mant[i]).nans  =  Math.min(result.length,  i);		non-compiled	[CE]  cannot  find  symbol	100	None	add
10	[BUG]  [BUGGY]    ((  RADIX)mant[i]).nans  =  Math.min(result.nans,  i);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    ((  RADIX)mant[i]).nans  =  Math.min(result.nans,  i);  [BUGGY]  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	    ((  RADIX)mant[i]).nans  =  Math.min(result.nans,  i);		non-compiled	[CE]  cannot  find  symbol	100	None	add
11	[BUG]  [BUGGY]    ((  RADIX)mant[i]).setIsVisible(false);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    ((  RADIX)mant[i]).setIsVisible(false);  [BUGGY]  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	    ((  RADIX)mant[i]).setIsVisible(false);		non-compiled	[CE]  cannot  find  symbol	100	None	add
12	[BUG]  [BUGGY]    ((  RADIX)mant[i]).setIsVisible(true);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  if  (x  <  0  ||  x  >=  RADIX)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  result,  result);  return  result;  }  int  rh  =  0;  for  (int  i  =  0;  i  <  mant.length;  i++)  {  [BUGGY]    ((  RADIX)mant[i]).setIsVisible(true);  [BUGGY]  final  int  r  =  mant[i]  *  x  +  rh;  rh  =  r  /  RADIX;  result.mant[i]  =  r  -  rh  *  RADIX;  }  int  lostdigit  =  0;  if  (rh  !=  0)  {  lostdigit  =  result.mant[0];  result.shiftRight();  result.mant[mant.length-1]  =  rh;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	0.7071067811865475	1645	1645	1	replace	    ((  RADIX)mant[i]).setIsVisible(true);		non-compiled	[CE]  cannot  find  symbol	100	None	add
