bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  x);	      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(this);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	12	None	replace
2	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  field,  MULTIPLY_TRAP,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	7	None	replace
3	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  MULTIPLY_TRAP,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	7	None	replace
4	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  x  +  1);  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]            AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  x  +  1);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  x  +  1);	      result    =    dotrap(DfpField.FLAG_FACTOR,    x);    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	3	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	13	1	add
6	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	13	1	add
7	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  [CE]  cannot  find  symbol  Field  [FE]      AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Field	13	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	13	1	add
9	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	13	1	add
10	[BUG]  [BUGGY]  Field.setIEEEFlagsBits(DfpField.INFINITE,  x);  [CE]  cannot  find  symbol  INFINITE  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  Field.setIEEEFlagsBits(DfpField.INFINITE,  x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	Field.setIEEEFlagsBits(DfpField.INFINITE,  x);	      Field.setIEEEFlagsBits(DfpField.INFINITE);    	non-compiled	[CE]  cannot  find  symbol  INFINITE	2	None	replace
11	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  x,  newInstance(getZero()));  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  x,  newInstance(getZero()));  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  x,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_FACTOR,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	8	None	replace
12	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  newInstance(x));  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]            AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  newInstance(x));  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  newInstance(x));	      result    =    dotrap(DfpField.FLAG_FACTOR,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	8	None	replace
13	[BUG]  [BUGGY]  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x);  [CE]  cannot  find  symbol  Field  [FE]        AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	Field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x);	      Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  cannot  find  symbol  Field	1	None	replace
14	[BUG]  [BUGGY]  result  =  newInstance(this,  x,  field);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int,DfpField)  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(this,  x,  field);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  newInstance(this,  x,  field);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int,DfpField)	6	None	replace
15	[BUG]  [BUGGY]  result  =  newInstance(this,  field,  x);  [CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField,int)  [FE]            AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(this,  field,  x);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  newInstance(this,  field,  x);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,DfpField,int)	6	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
17	[BUG]  [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(x);  result  =  newInstance(x);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result    =    newInstance(x);    result  =  newInstance(x);	  	compilable	  [FE]  AssertionError  	4	1	add
18	[BUG]  [BUGGY]  result  =  newInstance(x);  Result  =  newInstance(x);  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(x);  Result  =  newInstance(x);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result    =    newInstance(x);    Result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  Result	4	None	add
19	[BUG]  [BUGGY]  result  =  newInstance(x);  Result  result  =  newInstance(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(x);  Result  result  =  newInstance(x);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result    =    newInstance(x);    Result  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(this);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	11	1	add
21	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(this);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	11	1	add
22	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [CE]  cannot  find  symbol  Field  [FE]      AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(this);    Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  Field	11	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(getZero());  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	result  =  newInstance(getZero());	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	5	1	replace
24	[BUG]  [BUGGY]  result  =  newInstance(getZero());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(getZero());  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  newInstance(getZero());	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	5	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	9	1	add
26	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	compilable	  [FE]  AssertionError  	9	1	add
27	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  cannot  find  symbol  Field  [FE]      AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    Field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	non-compiled	[CE]  cannot  find  symbol  Field	9	None	add
28	[BUG]  [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x);  [CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	field.setIEEEFlagsBits(DfpField.FLAG_INVALID,  x);	      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  method  setIEEEFlagsBits  in  class  DfpField  cannot  be  applied  to  given  types;	10	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(x  -  1);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	result  =  newInstance(x  -  1);	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	5	1	replace
30	[BUG]  [BUGGY]  result  =  newInstance(x  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(x  -  1);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  newInstance(x  -  1);	  result    =    newInstance(x);    	compilable	  [FE]  AssertionError  	5	1	replace
31	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [CE]  cannot  find  symbol  FieldUtils  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(this);    FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);	  	non-compiled	[CE]  cannot  find  symbol  FieldUtils	11	None	add
32	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP);  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP);	      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(this);    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	12	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	add	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	9	1	add
34	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(this);	  	compilable	  [FE]  AssertionError  	9	1	add
35	[BUG]  [BUGGY]  result  =  newInstance(this,  x,  NAN_STRING);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int,String)  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(this,  x,  NAN_STRING);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  newInstance(this,  x,  NAN_STRING);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int,String)	6	None	replace
36	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  [CE]  cannot  find  symbol  FieldUtils  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result    =    newInstance(x);    FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(x);	  	non-compiled	[CE]  cannot  find  symbol  FieldUtils	13	None	add
37	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP);  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]            AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP);	      result    =    dotrap(DfpField.FLAG_FACTOR,    x);    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	3	None	replace
38	[BUG]  [BUGGY]  field.setIsNaN()?  DfpField.FLAG_INVALID  :  DfpField.FLAG_INVALID;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  field.setIsNaN()?  DfpField.FLAG_INVALID  :  DfpField.FLAG_INVALID;  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	field.setIsNaN()?  DfpField.FLAG_INVALID  :  DfpField.FLAG_INVALID;	      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    	non-compiled	[CE]  not  a  statement	10	None	replace
39	[BUG]  [BUGGY]  result  =  newInstance(this,  x  +  1);  [CE]  no  suitable  method  found  for  newInstance(Dfp,int)  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(this,  x  +  1);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  newInstance(this,  x  +  1);	  result    =    newInstance(this,    x);    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(Dfp,int)	6	None	replace
40	[BUG]  [BUGGY]  result  =  newInstance(x);  x  =  newInstance(x);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  newInstance(x);  x  =  newInstance(x);  [BUGGY]    return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result    =    newInstance(x);    x  =  newInstance(x);	  	non-compiled	[CE]  incompatible  types	4	None	add
41	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [CE]  cannot  find  symbol  FLAG_FACTOR  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x));  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_FACTOR,  MULTIPLY_TRAP,  newInstance(getZero(),  x));	      result    =    dotrap(DfpField.FLAG_FACTOR,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  cannot  find  symbol  FLAG_FACTOR	8	None	replace
42	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()));  [CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()));  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  x,  newInstance(getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  method  dotrap  in  class  Dfp  cannot  be  applied  to  given  types;	7	None	replace
43	[BUG]  [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x,  getZero()));  [CE]  no  suitable  method  found  for  newInstance(int,Dfp)  [FE]          AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x,  getZero()));  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(x,  getZero()));	      result    =    dotrap(DfpField.FLAG_INVALID,    MULTIPLY_TRAP,    newInstance(getZero()));    	non-compiled	[CE]  no  suitable  method  found  for  newInstance(int,Dfp)	7	None	replace
44	[BUG]  [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [CE]  cannot  find  symbol  FieldUtils  [FE]    AssertionError    [CONTEXT]    private  Dfp  multiplyFast(final  int  x)  {  Dfp  result  =  newInstance(this);  if  (nans  !=  FINITE)  {  if  (isNaN())  {  return  this;  }  if  (nans  ==  INFINITE  &&  x  !=  0)  {    [BUGGY]      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);  [BUGGY]    result  =  newInstance(this);  return  result;  }  if  (nans  ==  INFINITE  &&  x  ==  0)  {  field.setIEEEFlagsBits(DfpField.FLAG_INVALID);  result  =  newInstance(getZero());  result.nans  =  QNAN;  result  =  dotrap(DfpField.FLAG_INVALID,  MULTIPLY_TRAP,  newInstance(getZero()),  result);  return  result;  }  [CLASS]  Dfp  [METHOD]  multiplyFast  [RETURN_TYPE]  Dfp  final  int  x  [VARIABLES]  boolean  byte  FINITE  INFINITE  QNAN  SNAN  asign  bsign  code  nans  rsign  sig  sign  x  DfpField  field  int[]  mant  product  String  ADD_TRAP  ALIGN_TRAP  DIVIDE_TRAP  GREATER_THAN_TRAP  LESS_THAN_TRAP  MULTIPLY_TRAP  NAN_STRING  NEG_INFINITY_STRING  NEW_INSTANCE_TRAP  NEXT_AFTER_TRAP  POS_INFINITY_STRING  SQRT_TRAP  TRUNC_TRAP  fpdecimal  fpexp  s  int  ERR_SCALE  MAX_EXP  MIN_EXP  RADIX  adiff  aextradigit  bextradigit  decimalPos  diff  e  excp  exp  exponent  extra  i  j  lostdigit  md  n  offset  p  q  r  result  rh  rsize  sciexp  significantDigits  x  Dfp  result  	projects/Math17/src/main/java/org/apache/commons/math3/dfp/Dfp.java	1.0	1621	1621	1	replace	        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    FieldUtils.setIEEEFlagsBits(DfpField.FLAG_INVALID);	  	non-compiled	[CE]  cannot  find  symbol  FieldUtils	9	None	add
