bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
25	[BUG] [BUGGY] dMin= -0.0; [FE] AssertionFailedError [CONTEXT] if ((dMin <= 0) || (deflatedEnd < end)) { if (flipIfWarranted(deflatedEnd, 1)) { dMin2 = Math.min(dMin2, work[l - 1]); work[l - 1] = Math.min(work[l - 1], Math.min(work[3 + pingPong], work[7 + pingPong])); work[l - 2 * pingPong] = Math.min(work[l - 2 * pingPong], Math.min(work[6 + pingPong], work[6 + pingPong])); qMax= Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong])); [BUGGY] dMin= -0.0; [BUGGY] } } if ((dMin < 0) || (MathUtils.SAFE_MIN * qMax < Math.min(work[l - 1], Math.min(work[l - 9], dMin2 + work[l - 2 * pingPong])))) {  computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);  [CLASS] EigenDecompositionImpl Solver [METHOD] goodStep [RETURN_TYPE] int  final int start final int end [VARIABLES] boolean deflating loop double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 absDCurrent absDPrevious alpha b b2 beta c d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eps g invIJ lambda largestRoot lower lowerSpectra max mij minPivot mji offDiagMax offDiagMin oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns deflatedEnd end fourI i i0 index j k l lowerStart m maxIter n n0 nColB oneFourthCount pingPong rows split start tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1063	1063	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if ((dMin <= 0) || (deflatedEnd < end)) { if (flipIfWarranted(deflatedEnd, 1)) { dMin2 = Math.min(dMin2, work[l - 1]); work[l - 1] = Math.min(work[l - 1], Math.min(work[3 + pingPong], work[7 + pingPong])); work[l - 2 * pingPong] = Math.min(work[l - 2 * pingPong], Math.min(work[6 + pingPong], work[6 + pingPong])); qMax= Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong])); [BUGGY] [BUGGY] dMin= -0.0; } } if ((dMin < 0) || (MathUtils.SAFE_MIN * qMax < Math.min(work[l - 1], Math.min(work[l - 9], dMin2 + work[l - 2 * pingPong])))) {  computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);  [CLASS] EigenDecompositionImpl Solver [METHOD] goodStep [RETURN_TYPE] int  final int start final int end [VARIABLES] boolean deflating loop double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 absDCurrent absDPrevious alpha b b2 beta c d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eps g invIJ lambda largestRoot lower lowerSpectra max mij minPivot mji offDiagMax offDiagMin oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns deflatedEnd end fourI i i0 index j k l lowerStart m maxIter n n0 nColB oneFourthCount pingPong rows split start tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1063	1063	1	add	
