bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  dMin1  =  Math.min(dMin1,  work[l  -  2]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin1  =  Math.min(dMin1,  work[l  -  2]);  [BUGGY]      dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin1  =  Math.min(dMin1,  work[l  -  2]);	  dMin1    =    Math.min(dMin1,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  1);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  1);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    1);    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  +  3);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  +  3);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  +  3);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    1);    	non-compiled	[CE]  ';'  expected	10	None	replace
4	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  2);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    3);    	non-compiled	[CE]  ';'  expected	33	None	replace
5	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  3  +  4);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  3  +  4);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  3  +  4);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    3);    	non-compiled	[CE]  ';'  expected	33	None	replace
6	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  *  pingPong]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  *  pingPong]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[3  *  pingPong]);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[4  +  pingPong]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[4  +  pingPong]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[4  +  pingPong]);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	12	None	replace
8	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]  *  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1]    +    2);    	non-compiled	[CE]  ';'  expected	6	None	replace
9	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  3);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  3);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]  *  3);	  dMin2    =    Math.min(dMin2,    work[l    -    1]    +    3);    	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[6  +  pingPong]));	  dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	30	None	replace
11	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[5  +  pingPong]));	  dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	30	None	replace
12	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[4  +  pingPong]));	  dMin2    =    Math.min(work[l    -    1],    Math.min(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	30	None	replace
13	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  start,  end);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  start,  end);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  start,  end);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd,    end);    	non-compiled	[CE]  ';'  expected	8	None	replace
14	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end,  deflatedEnd);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end,  deflatedEnd);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  end,  deflatedEnd);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd,    end);    	non-compiled	[CE]  ';'  expected	8	None	replace
15	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd,  4);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd,  4);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd,  4);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd,    end);    	non-compiled	[CE]  ';'  expected	8	None	replace
16	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd,  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd,  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd,  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd,    end);    	non-compiled	[CE]  ';'  expected	8	None	replace
17	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  4);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  4);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  4);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    4);    	non-compiled	[CE]  ';'  expected	24	None	replace
18	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  *  4);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  *  4);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  *  4);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    4);    	non-compiled	[CE]  ';'  expected	24	None	replace
19	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  start);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  start);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  start);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    end);    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  4  +  2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  4  +  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]  *  4  +  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1]    *    4);    	non-compiled	[CE]  ';'  expected	5	None	replace
21	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  +  pingPong]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  work[3  +  pingPong]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.max(work[l  -  1],  work[3  +  pingPong]);	  dMin2    =    Math.max(work[l    -    1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
22	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1]  +  dMin);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.max(work[l  -  1]  +  dMin);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.max(work[l  -  1]  +  dMin);	  dMin2    =    Math.max(work[l    -    1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
23	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  4);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  4);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  4);	  dMin2    =    Math.min(work[l    -    1],    deflatedEnd);    	non-compiled	[CE]  ';'  expected	25	None	replace
24	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  2);	  dMin2    =    Math.min(work[l    -    1],    deflatedEnd);    	non-compiled	[CE]  ';'  expected	25	None	replace
25	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  1);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  deflatedEnd  +  1);	  dMin2    =    Math.min(work[l    -    1],    deflatedEnd);    	non-compiled	[CE]  ';'  expected	25	None	replace
26	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd,  end);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  deflatedEnd,  end);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  deflatedEnd,  end);	  dMin2    =    Math.min(work[l    -    1],    deflatedEnd);    	non-compiled	[CE]  ';'  expected	25	None	replace
27	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  4  *  deflatedEnd);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  4  *  deflatedEnd);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  4  *  deflatedEnd);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    4);    	non-compiled	[CE]  ';'  expected	23	None	replace
28	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  4]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  4]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  4]);	  dMin2    =    Math.min(dMin2,    work[l    -    3]);    	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  end  +  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    2);    	non-compiled	[CE]  ';'  expected	11	None	replace
30	[BUG]  [BUGGY]  dMin  =  Math.min(dMin1,  work[l  -  2]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin  =  Math.min(dMin1,  work[l  -  2]);  [BUGGY]      dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin  =  Math.min(dMin1,  work[l  -  2]);	  dMin    =    Math.min(dMin1,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	16	None	replace
31	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  4]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  4]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[3  +  4]);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pong]);    	non-compiled	[CE]  ';'  expected	14	None	replace
32	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  imagEigenvalues]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  imagEigenvalues]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[3  +  imagEigenvalues]);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pong]);    	non-compiled	[CE]  ';'  expected	14	None	replace
33	[BUG]  [BUGGY]  dMin1  =  Math.min(dMin1,  work[l  -  1]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin1  =  Math.min(dMin1,  work[l  -  1]));  [BUGGY]      dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin1  =  Math.min(dMin1,  work[l  -  1]));	  dMin1    =    Math.max(dMin1,    work[l    -    1]));    	non-compiled	[CE]  ';'  expected	26	None	replace
34	[BUG]  [BUGGY]  dMin1  =  Math.max(dMin1,  work[l  -  1]),  deflatedEnd);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin1  =  Math.max(dMin1,  work[l  -  1]),  deflatedEnd);  [BUGGY]      dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin1  =  Math.max(dMin1,  work[l  -  1]),  deflatedEnd);	  dMin1    =    Math.max(dMin1,    work[l    -    1]));    	non-compiled	[CE]  ';'  expected	26	None	replace
35	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	  dMin2    =    Math.min(work[l    -    1],    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
36	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[5  +  pingPong]));	  dMin2    =    Math.min(work[l    -    1],    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
37	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  Math.max(work[3  +  pingPong],  work[4  +  pingPong]));	  dMin2    =    Math.min(work[l    -    1],    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
38	[BUG]  [BUGGY]  dMin  =  Math.max(dMin1,  work[l  -  2]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin  =  Math.max(dMin1,  work[l  -  2]);  [BUGGY]      dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin  =  Math.max(dMin1,  work[l  -  2]);	  dMin    =    Math.max(dMin1,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	20	None	replace
39	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN]);	  dMin2    =    Math.min(dMin2,    work[l    -    2    *    dN));    	non-compiled	[CE]  ';'  expected	4	None	replace
40	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN1);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN1);	  dMin2    =    Math.min(dMin2,    work[l    -    2    *    dN));    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN1));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN1));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN1));	  dMin2    =    Math.min(dMin2,    work[l    -    2    *    dN));    	non-compiled	[CE]  ';'  expected	4	None	replace
42	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[3]);	  dMin2    =    Math.min(work[l    -    1],    work[0]);    	non-compiled	[CE]  ';'  expected	13	None	replace
43	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[1]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[1]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[1]);	  dMin2    =    Math.min(work[l    -    1],    work[0]);    	non-compiled	[CE]  ';'  expected	13	None	replace
44	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[7]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[7]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[7]);	  dMin2    =    Math.min(work[l    -    1],    work[0]);    	non-compiled	[CE]  ';'  expected	13	None	replace
45	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[4]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[4]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[4]);	  dMin2    =    Math.min(work[l    -    1],    work[0]);    	non-compiled	[CE]  ';'  expected	13	None	replace
46	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[l  -  2]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[l  -  2]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[l  -  2]);	  dMin2    =    Math.min(work[l    -    1],    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	28	None	replace
47	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[l  -  3]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[l  -  3]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[l  -  3]);	  dMin2    =    Math.min(work[l    -    1],    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	28	None	replace
48	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[l  -  4]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[l  -  4]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[l  -  4]);	  dMin2    =    Math.min(work[l    -    1],    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	28	None	replace
49	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  8);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  8);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  8);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    3);    	non-compiled	[CE]  ';'  expected	33	None	replace
50	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  8);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1]  *  8);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1]  *  8);	  dMin2    =    Math.min(dMin2,    work[l    -    1]    *    4);    	non-compiled	[CE]  ';'  expected	5	None	replace
51	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  work[7  +  pingPong]);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	12	None	replace
52	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  deflatedEnd);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  deflatedEnd);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  deflatedEnd);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	12	None	replace
53	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  qMax);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  qMax);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  qMax);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    end);    	non-compiled	[CE]  ';'  expected	9	None	replace
54	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1]  *  dMin);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.max(work[l  -  1]  *  dMin);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.max(work[l  -  1]  *  dMin);	  dMin2    =    Math.max(work[l    -    1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
55	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  *  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  *  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  *  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    2);    	non-compiled	[CE]  ';'  expected	11	None	replace
56	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[5]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[5]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[5]);	  dMin2    =    Math.min(work[l    -    1],    work[0]);    	non-compiled	[CE]  ';'  expected	13	None	replace
57	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  end);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  end);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  end);	  dMin2    =    Math.min(work[l    -    1],    deflatedEnd);    	non-compiled	[CE]  ';'  expected	25	None	replace
58	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  0);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  0);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  0);	  dMin2    =    Math.min(work[l    -    1],    deflatedEnd);    	non-compiled	[CE]  ';'  expected	25	None	replace
59	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1  *  dN));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1  *  dN));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1  *  dN));	  dMin2    =    Math.min(dMin2,    work[l    -    2    *    dN));    	non-compiled	[CE]  ';'  expected	4	None	replace
60	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN)-1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN)-1);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  2  *  dN)-1);	  dMin2    =    Math.min(dMin2,    work[l    -    2    *    dN));    	non-compiled	[CE]  ';'  expected	4	None	replace
61	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  -  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  -  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  -  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    2);    	non-compiled	[CE]  ';'  expected	11	None	replace
62	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  -  1);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin2,  work[l  -  1],  deflatedEnd  -  1);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    deflatedEnd    +    2);    	non-compiled	[CE]  ';'  expected	11	None	replace
63	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1,  work[l  -  1]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1,  work[l  -  1]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1,  work[l  -  1]);	  dMin2    =    Math.min(work[l    -    1],    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	28	None	replace
64	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  3]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  3]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin1,  work[l  -  3]);	  dMin2    =    Math.min(dMin2,    work[l    -    3]);    	non-compiled	[CE]  ';'  expected	3	None	replace
65	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin,  Math.min(work[l  -  1]));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.max(dMin,  Math.min(work[l  -  1]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.max(dMin,  Math.min(work[l  -  1]));	  dMin2    =    Math.max(work[l    -    1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
66	[BUG]  [BUGGY]  dMin2  =  Math.max(dMin,  Math.min(work[l  -  1]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.max(dMin,  Math.min(work[l  -  1]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.max(dMin,  Math.min(work[l  -  1]);	  dMin2    =    Math.max(work[l    -    1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
67	[BUG]  [BUGGY]  dMin1  =  Math.min(dMin1,  block[l  -  1]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin1  =  Math.min(dMin1,  block[l  -  1]);  [BUGGY]      dMin2  =  Math.min(dMin2,  work[l  -  1]);  work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin1  =  Math.min(dMin1,  block[l  -  1]);	  dMin1    =    Math.min(dMin1,    work[l    -    1]);    	non-compiled	[CE]  ';'  expected	1	None	replace
68	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1]  *  4);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1]  *  4);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin1,  work[l  -  1]  *  4);	  dMin2    =    Math.min(dMin2,    work[l    -    1]    *    4);    	non-compiled	[CE]  ';'  expected	5	None	replace
69	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[1  +  pingPong]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[1  +  pingPong]);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[1  +  pingPong]);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pong]);    	non-compiled	[CE]  ';'  expected	14	None	replace
70	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1],  0);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1],  0);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin1,  work[l  -  1],  0);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    0);    	non-compiled	[CE]  ';'  expected	22	None	replace
71	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  3);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  3);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  3);	  dMin2    =    Math.min(work[l    -    1],    deflatedEnd);    	non-compiled	[CE]  ';'  expected	25	None	replace
72	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1],  4);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1],  4);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin1,  work[l  -  1],  4);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    4);    	non-compiled	[CE]  ';'  expected	23	None	replace
73	[BUG]  [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.max(work[l  -  1],  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.max(work[l  -  1],  Math.max(work[3  +  pingPong],  work[6  +  pingPong]));	  dMin2    =    Math.min(work[l    -    1],    Math.max(work[3    +    pingPong],    work[7    +    pingPong]));    	non-compiled	[CE]  ';'  expected	32	None	replace
74	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1]  +  2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1]  +  2);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin1,  work[l  -  1]  +  2);	  dMin2    =    Math.min(dMin2,    work[l    -    1]    +    2);    	non-compiled	[CE]  ';'  expected	6	None	replace
75	[BUG]  [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1],  3);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(dMin1,  work[l  -  1],  3);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(dMin1,  work[l  -  1],  3);	  dMin2    =    Math.min(dMin2,    work[l    -    1],    3);    	non-compiled	[CE]  ';'  expected	33	None	replace
76	[BUG]  [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  qMax);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  final  int  l  =  4  *  deflatedEnd  +  pingPong  -  1;  if  ((dMin  <=  0)  ||  (deflatedEnd  <  end))  {  if  (flipIfWarranted(deflatedEnd,  1))  {      [BUGGY]  dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  qMax);  [BUGGY]      work[l  -  1]  =  Math.min(work[l  -  1],  Math.min(work[3  +  pingPong],  work[7  +  pingPong]));  work[l  -  2  *  pingPong]  =  Math.min(work[l  -  2  *  pingPong],  Math.min(work[6  +  pingPong],  work[6  +  pingPong]));  qMax=  Math.max(qMax,  Math.max(work[3  +  pingPong],  work[7  +  pingPong]));  dMin=  -0.0;  }  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  goodStep  [RETURN_TYPE]  int  final  int  start  final  int  end  [VARIABLES]  boolean  deflating  loop  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1055	1055	1	replace	dMin2  =  Math.min(work[l  -  1],  work[3  +  pingPong],  qMax);	  dMin2    =    Math.min(work[l    -    1],    work[3    +    pingPong]);    	non-compiled	[CE]  ';'  expected	12	None	replace
