bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  work[i]  =  0.0;  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]  work[i]  =  0.0;  [BUGGY]  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  0.0;	work[i]  =  -0.0;  	non-compiled	[CE]  ';'  expected	9	None	replace
2	[BUG]  [BUGGY]  work[i]  =  -1;  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]  work[i]  =  -1;  [BUGGY]  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  -1;	work[i]  =  -0.0;  	non-compiled	[CE]  ';'  expected	9	None	replace
3	[BUG]  [BUGGY]  work[i]  =  -1.0;  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]  work[i]  =  -1.0;  [BUGGY]  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  -1.0;	work[i]  =  -0.0;  	non-compiled	[CE]  ';'  expected	9	None	replace
4	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    [BUGGY]  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	  	work[i]  =  -0.0;  	non-compiled	[CE]  ';'  expected	9	None	replace
5	[BUG]  [BUGGY]    d  *=  work[i]  /(work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    d  *=  work[i]  /(work[i  +  2]);  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    d  *=  work[i]  /(work[i  +  2]);		non-compiled	[CE]  ';'  expected	10	None	add
6	[BUG]  [BUGGY]    d  *=  work[i]  /(work[i  +  1]);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    d  *=  work[i]  /(work[i  +  1]);  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    d  *=  work[i]  /(work[i  +  1]);		non-compiled	[CE]  ';'  expected	10	None	add
7	[BUG]  [BUGGY]    d  *=  work[i]  /(work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    d  *=  work[i]  /(work[i  +  3]);  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    d  *=  work[i]  /(work[i  +  3]);		non-compiled	[CE]  ';'  expected	10	None	add
8	[BUG]  [BUGGY]    d  =  work[i  +  2];  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    d  =  work[i  +  2];  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    d  =  work[i  +  2];		non-compiled	[CE]  ';'  expected	10	None	add
9	[BUG]  [BUGGY]    work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2);  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2);		non-compiled	[CE]  ';'  expected	10	None	add
10	[BUG]  [BUGGY]    d  =  work[i  +  2]  *(work[i  +  2]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    d  =  work[i  +  2]  *(work[i  +  2]  *  TOLERANCE_2);  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    d  =  work[i  +  2]  *(work[i  +  2]  *  TOLERANCE_2);		non-compiled	[CE]  ';'  expected	10	None	add
11	[BUG]  [BUGGY]    work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2  -  1);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2  -  1);  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2  -  1);		non-compiled	[CE]  ';'  expected	10	None	add
12	[BUG]  [BUGGY]  work[i]  =  1.0;  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]  work[i]  =  1.0;  [BUGGY]  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  1.0;	work[i]  =  -0.0;  	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]    d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));		non-compiled	[CE]  ';'  expected	10	None	add
14	[BUG]  [BUGGY]    d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  [BUGGY]    d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]  work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	    d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));		non-compiled	[CE]  ';'  expected	10	None	add
