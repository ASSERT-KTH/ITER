bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  d  -  1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  d  -  1);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  2]  *  d  -  1);	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
2	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  /  TOLERANCE_2  -  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  /  TOLERANCE_2  -  1);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  2]  /  TOLERANCE_2  -  1);	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
3	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  1]  *  TOLERANCE_2  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  1]  *  TOLERANCE_2  -  1);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  1]  *  TOLERANCE_2  -  1);	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2  *  d);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2  *  d);	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  1])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  1])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  1]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  1])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MAthUtils.SAFE_MIN    *    work[i    +    2])&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	14	None	replace
6	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  3])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  3])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  3])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MAthUtils.SAFE_MIN    *    work[i    +    2])&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	14	None	replace
7	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  0  *  d));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  0  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  0  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MAthUtils.SAFE_MIN    *    work[i    +    2])&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	14	None	replace
8	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  3  *  d));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  3  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  3  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MAthUtils.SAFE_MIN    *    work[i    +    2])&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	14	None	replace
9	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  3])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  3])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  3])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MathUtils.SAFE_MIN    *    work[i    +    2])&&    (MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	13	None	replace
10	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  1])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  1])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  1]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  1])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MathUtils.SAFE_MIN    *    work[i    +    2])&&    (MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  =  3  *  d));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  =  3  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  =  3  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MathUtils.SAFE_MIN    *    work[i    +    2])&&    (MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	13	None	replace
12	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  =  0  *  d));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  =  0  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  =  0  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MathUtils.SAFE_MIN    *    work[i    +    2])&&    (MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	13	None	replace
13	[BUG]  [BUGGY]  work[i]  =  0;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  0;  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  0;	  work[i]    =    -1;    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  work[i]  =  1;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  1;  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  1;	  work[i]    =    -1;    	non-compiled	[CE]  ';'  expected	2	None	replace
15	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  4]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  *=  work[i]  /(work[i  +  4]);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  *=  work[i]  /(work[i  +  4]);	      d    *=    work[i]    /(work[i    +    1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  d);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  d);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  2]  *  d);	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	9	None	replace
17	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  2]  /  TOLERANCE_2);	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  1]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  1]  *  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  1]  *  TOLERANCE_2);	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	9	None	replace
19	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  d;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  d;  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  2]  *  d;	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  d)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  d)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  d)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      	non-compiled	[CE]  ';'  expected	4	None	replace
21	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  n)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  n)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  n)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      	non-compiled	[CE]  ';'  expected	4	None	replace
22	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  d)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  d)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  d)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {	      	non-compiled	[CE]  ';'  expected	4	None	replace
23	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  n)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  n)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  n)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d))  {	      	non-compiled	[CE]  ';'  expected	4	None	replace
24	[BUG]  [BUGGY]  d  =  work[i  +  1]  *(work[i  +  2]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  1]  *(work[i  +  2]  *  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  1]  *(work[i  +  2]  *  TOLERANCE_2);	      d    =    work[i    +    2]    *(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  d  =  work[j  +  2]  *(work[i  +  2]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[j  +  2]  *(work[i  +  2]  *  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[j  +  2]  *(work[i  +  2]  *  TOLERANCE_2);	      d    =    work[i    +    2]    *(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  d  =  work[i  +  2]  *(work[j  +  2]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *(work[j  +  2]  *  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *(work[j  +  2]  *  TOLERANCE_2);	      d    =    work[i    +    2]    *(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	10	None	replace
27	[BUG]  [BUGGY]  work[i]  =  2.0;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  2.0;  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  2.0;	  work[i]    =    1.0;    	non-compiled	[CE]  ';'  expected	12	None	replace
28	[BUG]  [BUGGY]  d  *=  work[i]  /(work[j  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  *=  work[i]  /(work[j  +  2]);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  *=  work[i]  /(work[j  +  2]);	      d    *=    work[i]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	5	None	replace
29	[BUG]  [BUGGY]  d  =  work[i  +  1];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  1];  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  1];	      d    =    work[i    +    2];    	non-compiled	[CE]  ';'  expected	8	None	replace
30	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  TOLERANCE_2;  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  TOLERANCE_2;	      d    =    work[i    +    2];    	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  d  =  work[i  +  3];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  3];  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  3];	      d    =    work[i    +    2];    	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  work[j]  =  0.0;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[j]  =  0.0;  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[j]  =  0.0;	  work[i]    =    0.0;    	non-compiled	[CE]  ';'  expected	1	None	replace
33	[BUG]  [BUGGY]  work[i]  =  0.5;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  0.5;  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  0.5;	  work[i]    =    0.0;    	non-compiled	[CE]  ';'  expected	1	None	replace
34	[BUG]  [BUGGY]  d  *=  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  *=  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  *=  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);	      	non-compiled	[CE]  ';'  expected	4	None	replace
35	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.pow(10,  work[i  +  2]);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.pow(10,  work[i  +  2]);  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.pow(10,  work[i  +  2]);	      	non-compiled	[CE]  ';'  expected	4	None	replace
36	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.pow(10,  work[i  +  3]);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.pow(10,  work[i  +  3]);  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.pow(10,  work[i  +  3]);	      	non-compiled	[CE]  ';'  expected	4	None	replace
37	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  4])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  4])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  4])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MathUtils.SAFE_MIN    *    work[i    +    2])&&    (MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  d  =  work[i  +  2]  *(work[i  +  3]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *(work[i  +  3]  *  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *(work[i  +  3]  *  TOLERANCE_2);	      d    =    work[i    +    2]    *(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	10	None	replace
39	[BUG]  [BUGGY]  d  =  work[i  +  1]  *(work[i  +  1]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  1]  *(work[i  +  1]  *  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  1]  *(work[i  +  1]  *  TOLERANCE_2);	      d    =    work[i    +    2]    *(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	10	None	replace
40	[BUG]  [BUGGY]  d  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);	      d    =    work[i    +    2]    *(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	10	None	replace
41	[BUG]  [BUGGY]  work[i]  =  0.01;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  0.01;  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  0.01;	  work[i]    =    1.0;    	non-compiled	[CE]  ';'  expected	12	None	replace
42	[BUG]  [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2)+  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2)+  1;  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  =  Math.abs(work[i  +  2]  *  TOLERANCE_2)+  1;	      work[i]    =    Math.abs(work[i    +    2]    *    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  1]  *  Math.sqrt((  MAthUtils.SAFE_MIN  *  work[i  +  2])&&(MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MAthUtils.SAFE_MIN    *    work[i    +    2])&&(MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	14	None	replace
44	[BUG]  [BUGGY]  d  *=  work[j]  /(work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  *=  work[j]  /(work[i  +  2]);  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  *=  work[j]  /(work[i  +  2]);	      d    *=    work[i]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  work[i]  -=  1.0;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  work[i]  -=  1.0;  [BUGGY]    work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	work[i]  -=  1.0;	  work[i]    =    1.0;    	non-compiled	[CE]  ';'  expected	12	None	replace
46	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  1]  }  );  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  *=  work[i]  /(work[i  +  1]  }  );  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  *=  work[i]  /(work[i  +  1]  }  );	      d    *=    work[i]    /(work[i    +    1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
47	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {    [BUGGY]  d  =  work[i  +  1]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));  [BUGGY]    work[i]  =  -0.0;  work[j]  =  d;  work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	957	957	1	replace	d  =  work[i  +  1]  *  Math.sqrt((  MathUtils.SAFE_MIN  *  work[i  +  2])&&  (MathUtils.SAFE_MIN  *  work[j]  <  =  TOLERANCE_2  *  d));	      d    =    work[i    +    2]    *    Math.sqrt((    MathUtils.SAFE_MIN    *    work[i    +    2])&&    (MathUtils.SAFE_MIN    *    work[j]    <    =    TOLERANCE_2    *    d));    	non-compiled	[CE]  ';'  expected	13	None	replace
