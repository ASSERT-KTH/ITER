bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    i0  =  1  +  i  /  4;  break;  [CE]  unreachable  statement  [FE]    AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    i0  =  1  +  i  /  4;  break;  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    i0  =  1  +  i  /  4;  break;		non-compiled	[CE]  unreachable  statement	2	None	add
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    work[i  +  2]  =  work[i  +  3];  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	add	    work[i  +  2]  =  work[i  +  3];		compilable	  [FE]  AssertionFailedError  	2	1	add
3	[BUG]  [BUGGY]    work[i  +  2]  =  work[i  +  3];  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    work[i  +  2]  =  work[i  +  3];  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    work[i  +  2]  =  work[i  +  3];		compilable	  [FE]  AssertionFailedError  	2	1	add
4	[BUG]  [BUGGY]    i0  =  1  +  i  /  2;  break;  [CE]  unreachable  statement  [FE]        AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    i0  =  1  +  i  /  2;  break;  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    i0  =  1  +  i  /  2;  break;		non-compiled	[CE]  unreachable  statement	2	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    work[i  +  2]  =  work[i  +  2];  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	add	    work[i  +  2]  =  work[i  +  2];		compilable	  [FE]  AssertionFailedError  	2	1	add
6	[BUG]  [BUGGY]    work[i  +  2]  =  work[i  +  2];  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    work[i  +  2]  =  work[i  +  2];  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    work[i  +  2]  =  work[i  +  2];		compilable	  [FE]  AssertionFailedError  	2	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    i0  =  1  +  i  /  4;  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	add	    i0  =  1  +  i  /  4;		compilable	  [FE]  AssertionFailedError  	2	1	add
8	[BUG]  [BUGGY]    i0  =  1  +  i  /  4;  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    i0  =  1  +  i  /  4;  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    i0  =  1  +  i  /  4;		compilable	  [FE]  AssertionFailedError  	2	1	add
9	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]  i0  =  1  +  i  /  2;  [BUGGY]  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	add	i0  =  1  +  i  /  2;	i0  =  1  +  i  /  4;  	compilable	timeout	1	1	replace
10	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  timeout  [FE]    AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]  i0  =  1  +  i  /  2;  [BUGGY]  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	i0  =  1  +  i  /  2;	i0  =  1  +  i  /  4;  	compilable	timeout	1	1	replace
11	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]  i0  =  1  +  i  /  3;  [BUGGY]  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	add	i0  =  1  +  i  /  3;	i0  =  1  +  i  /  4;  	compilable	timeout	1	1	replace
12	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  timeout  [FE]      AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]  i0  =  1  +  i  /  3;  [BUGGY]  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	i0  =  1  +  i  /  3;	i0  =  1  +  i  /  4;  	compilable	timeout	1	1	replace
13	[BUG]  [BUGGY]    sigmaLow  =  Math.max(sigmaMax,  work[i  +  2]);  [CE]  cannot  find  symbol  sigmaMax  [FE]    AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    sigmaLow  =  Math.max(sigmaMax,  work[i  +  2]);  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    sigmaLow  =  Math.max(sigmaMax,  work[i  +  2]);		non-compiled	[CE]  cannot  find  symbol  sigmaMax	2	None	add
14	[BUG]  [BUGGY]    sigmaLow  =  Math.max(sigmaMax,  work[i  +  1]);  [CE]  cannot  find  symbol  sigmaMax  [FE]      AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    sigmaLow  =  Math.max(sigmaMax,  work[i  +  1]);  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    sigmaLow  =  Math.max(sigmaMax,  work[i  +  1]);		non-compiled	[CE]  cannot  find  symbol  sigmaMax	2	None	add
15	[BUG]  [BUGGY]    sigmaLow  =  Math.max(sigmaMax,  work[i  +  3]);  [CE]  cannot  find  symbol  sigmaMax  [FE]        AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    sigmaLow  =  Math.max(sigmaMax,  work[i  +  3]);  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    sigmaLow  =  Math.max(sigmaMax,  work[i  +  3]);		non-compiled	[CE]  cannot  find  symbol  sigmaMax	2	None	add
16	[BUG]  [BUGGY]  i0  =  1  +  work[i  -  2]  /  4;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]  i0  =  1  +  work[i  -  2]  /  4;  [BUGGY]  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	i0  =  1  +  work[i  -  2]  /  4;	i0  =  1  +  i  /  4;  	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
17	[BUG]  [BUGGY]  i0  =  1  +  work[i  /  2];  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]  i0  =  1  +  work[i  /  2];  [BUGGY]  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	i0  =  1  +  work[i  /  2];	i0  =  1  +  i  /  4;  	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
18	[BUG]  [BUGGY]  i0  =  1  +  work[i  /  4];  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]  i0  =  1  +  work[i  /  4];  [BUGGY]  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	i0  =  1  +  work[i  /  4];	i0  =  1  +  i  /  4;  	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
19	[BUG]  [BUGGY]    sigmaLow  =  Math.max(work[i  +  1]  +  work[i  +  2]);  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    sigmaLow  =  Math.max(work[i  +  1]  +  work[i  +  2]);  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    sigmaLow  =  Math.max(work[i  +  1]  +  work[i  +  2]);		non-compiled	[CE]  no  suitable  method  found  for  max(double)	2	None	add
20	[BUG]  [BUGGY]    sigmaLow  =  Math.max(work[i  +  2]);  [CE]  no  suitable  method  found  for  max(double)  [FE]      AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    sigmaLow  =  Math.max(work[i  +  2]);  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    sigmaLow  =  Math.max(work[i  +  2]);		non-compiled	[CE]  no  suitable  method  found  for  max(double)	2	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    work[i  +  3]  =  work[i  +  3];  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	add	    work[i  +  3]  =  work[i  +  3];		compilable	  [FE]  AssertionFailedError  	2	1	add
22	[BUG]  [BUGGY]    work[i  +  3]  =  work[i  +  3];  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  sigmaLow  =  0;  double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  [BUGGY]    work[i  +  3]  =  work[i  +  3];  [BUGGY]  i0  =  1  +  i  /  4;  break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	871	871	1	replace	    work[i  +  3]  =  work[i  +  3];		compilable	  [FE]  AssertionFailedError  	2	1	add
