bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    	compilable	  [FE]  AssertionFailedError  	165	1	replace
2	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    	compilable	  [FE]  AssertionFailedError  	165	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    	compilable	  [FE]  AssertionFailedError  	165	1	replace
4	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    	compilable	  [FE]  AssertionFailedError  	165	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMax,  work[i  +  1]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    	compilable	  [FE]  AssertionFailedError  	165	1	replace
6	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  1]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMax,  work[i  +  1]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    	compilable	  [FE]  AssertionFailedError  	165	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMax,  work[i  +  2]);	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
8	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMax,  work[i  +  2]);	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
10	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
12	[BUG]  [BUGGY]  diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    	compilable	  [FE]  AssertionFailedError  	149	1	replace
14	[BUG]  [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    	compilable	  [FE]  AssertionFailedError  	149	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    	compilable	  [FE]  AssertionFailedError  	149	1	replace
16	[BUG]  [BUGGY]  i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    	compilable	  [FE]  AssertionFailedError  	149	1	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  1];  work[i  +  2]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	work[i    +    2]    =    work[i    +    1];    work[i  +  2]  =  work[i  +  1];	  	compilable	  [FE]  AssertionFailedError  	71	1	add
18	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1];  work[i  +  2]  =  work[i  +  1];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  1];  work[i  +  2]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    1];    work[i  +  2]  =  work[i  +  1];	  	compilable	  [FE]  AssertionFailedError  	71	1	add
19	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1];  Work[i  +  2]  =  work[i  +  1];  [CE]  cannot  find  symbol  Work  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  1];  Work[i  +  2]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    1];    Work[i  +  2]  =  work[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol  Work	71	None	add
20	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1];  works[i  +  2]  =  work[i  +  1];  [CE]  cannot  find  symbol  works  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  1];  works[i  +  2]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    1];    works[i  +  2]  =  work[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol  works	71	None	add
21	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1];  job[i  +  2]  =  work[i  +  1];  [CE]  cannot  find  symbol  job  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  1];  job[i  +  2]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    1];    job[i  +  2]  =  work[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol  job	71	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
23	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
25	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
27	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
28	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  cannot  find  symbol  OffDiagMax  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  cannot  find  symbol  OffDiagMax	34	None	add
29	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  onDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  cannot  find  symbol  onDiagMax  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  onDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    onDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  cannot  find  symbol  onDiagMax	34	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
31	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
32	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  offDiagMax);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  offDiagMax);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  offDiagMax);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    offDiagMin);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	79	None	replace
33	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  work[i  +  4]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  work[i  +  4]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    offDiagMin);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	79	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	122	1	add
35	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	122	1	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	122	1	add
37	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	122	1	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	122	1	add
39	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	122	1	add
40	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  cannot  find  symbol  OffDiagMin  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  cannot  find  symbol  OffDiagMin	122	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	49	1	add
42	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	49	1	add
43	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  cannot  find  symbol  OffDiagMin  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  cannot  find  symbol  OffDiagMin	49	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	49	1	add
45	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	49	1	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	add	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	49	1	add
47	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	compilable	  [FE]  AssertionFailedError  	49	1	add
48	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  4],  work[i  +  3]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  4],  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  4],  work[i  +  3]);	  i0    =    Math.max(work[i    +    2],    work[i    +    3]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
49	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1],  work[i  +  3]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1],  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1],  work[i  +  3]);	  i0    =    Math.max(work[i    +    2],    work[i    +    3]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
50	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  4]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
51	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
52	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
53	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
54	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
55	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  3]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMax,  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
56	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
57	[BUG]  [BUGGY]  i0  =  1  +  i  -  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  -  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  -  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
58	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
59	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
60	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  4];  work[i  +  2]  =  work[i  +  4];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  4];  work[i  +  2]  =  work[i  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    4];    work[i  +  2]  =  work[i  +  4];	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
61	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  4];  Work[i  +  2]  =  work[i  +  4];  [CE]  cannot  find  symbol  Work  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  4];  Work[i  +  2]  =  work[i  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    4];    Work[i  +  2]  =  work[i  +  4];	  	non-compiled	[CE]  cannot  find  symbol  Work	67	None	add
62	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  4];  work[i  +  2]  =  work[i  +  3];  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  4];  work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    4];    work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  unreachable  statement	67	None	add
63	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  4];  work[i  +  3]  =  work[i  +  4];  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  4];  work[i  +  3]  =  work[i  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    4];    work[i  +  3]  =  work[i  +  4];	  	non-compiled	[CE]  unreachable  statement	67	None	add
64	[BUG]  [BUGGY]  int  i0  =  1  +  i  /  4;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  int  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	int  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    int    i0    =    1    +    i    /    4;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
65	[BUG]  [BUGGY]  int  i0  =  1  +  i  /  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  int  i0  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	int  i0  =  1  +  i  /  2;	  i0    =    1    +    i    /    4;    int    i0    =    1    +    i    /    4;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
66	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  2];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i  +  2];	  work[i    +    1]    =    work[i    +    1];    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
67	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  /  1];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  /  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i  /  1];	  work[i    +    1]    =    work[i    +    1];    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
68	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  3];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i  +  3];	  work[i    +    1]    =    work[i    +    1];    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
69	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  /  1];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  /  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i  /  1];	  work[i    +    2]    =    work[i    +    1];    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
70	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  1];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  +  1];	  work[i    +    2]    =    work[i    +    1];    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
71	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  unreachable  statement	23	None	add
72	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  cannot  find  symbol  OffDiagMax  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  cannot  find  symbol  OffDiagMax	23	None	add
73	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  unreachable  statement	23	None	add
74	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    3    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;	  timeout    	non-compiled	[CE]  unreachable  statement	140	None	add
75	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  3  +  i  /  2;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  3  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    3    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  3  +  i  /  2;	  timeout    	non-compiled	[CE]  unreachable  statement	140	None	add
76	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  3  +  i  /  2;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  3  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    3    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  3  +  i  /  2;	  timeout    	non-compiled	[CE]  unreachable  statement	140	None	add
77	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    3    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	140	None	add
78	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  offDiagMin);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  offDiagMin);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  offDiagMin);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	130	None	replace
79	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  offDiagMax);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  offDiagMax);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  offDiagMax);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	130	None	replace
80	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	44	None	replace
81	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	7	None	add
82	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	7	None	add
83	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	7	None	add
84	[BUG]  [BUGGY]  work[i  +  3]  =  work[i  +  3];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  3]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  3]  =  work[i  +  3];	          work[i    +    2]    =    work[i    +    3];    works[i    +    2]    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	6	None	replace
85	[BUG]  [BUGGY]  works[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  works[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	works[i  +  2]  =  work[i  +  3];	          work[i    +    2]    =    work[i    +    3];    works[i    +    2]    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	6	None	replace
86	[BUG]  [BUGGY]  work[i  +  4]  =  work[i  +  3];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  4]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  4]  =  work[i  +  3];	          work[i    +    2]    =    work[i    +    3];    works[i    +    2]    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	6	None	replace
87	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMax,  work[i  +  2]);	  offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	20	None	replace
88	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1],  work[i  +  4]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1],  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1],  work[i  +  4]);	  i0    =    Math.max(work[i    +    1],    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	81	None	replace
89	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1,  work[i  +  4]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1,  work[i  +  4]);	  i0    =    Math.max(work[i    +    1],    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	81	None	replace
90	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	27	None	add
91	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	27	None	add
92	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  1)  +  i  /  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  1)  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1)  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	27	None	add
93	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  1  +  i  /  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  1  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	27	None	add
94	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	121	None	replace
95	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  1]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMax,  work[i  +  1]);	  offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	121	None	replace
96	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  4]  +  work[i  +  3]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  4]  +  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  4]  +  work[i  +  3]);	  i0    =    Math.max(diagMin,    work[i    +    2]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	117	None	replace
97	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	82	None	add
98	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	82	None	add
99	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	82	None	add
100	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  1)  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  1)  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1)  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	82	None	add
101	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	152	None	add
102	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMin,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	152	None	add
103	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	152	None	add
104	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	152	None	add
105	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	152	None	add
106	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  1  +  i  -  4;	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	83	None	replace
107	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	134	None	add
108	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	134	None	add
109	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	134	None	add
110	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	134	None	add
111	[BUG]  [BUGGY]  i0  =  2  +  i  /  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  2  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  2  +  i  /  2;	  i0    =    1    +    i    /    2;    i0    =    2    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	31	None	replace
112	[BUG]  [BUGGY]  i0  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  2  +  i  /  4;	  i0    =    1    +    i    /    2;    i0    =    2    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	31	None	replace
113	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  2  +  i  /  2;	  i0    =    1    +    i    /    2;    i0    =    2    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	31	None	replace
114	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	25	None	add
115	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	25	None	add
116	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	25	None	add
117	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	25	None	add
118	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	61	None	add
119	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	61	None	add
120	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	61	None	add
121	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	11	None	add
122	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	11	None	add
123	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	11	None	add
124	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	11	None	add
125	[BUG]  [BUGGY]  diagMin  =  Math.max(diagMin,  work[i]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.max(diagMin,  work[i]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.max(diagMin,  work[i]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	136	None	replace
126	[BUG]  [BUGGY]  diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	136	None	replace
127	[BUG]  [BUGGY]  Work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  Work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	Work[i  +  2]  =  work[i  +  3];	          work[i    +    2]    =    work[i    +    3];    Work[i    +    2]    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	3	None	replace
128	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	45	None	add
129	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	45	None	add
130	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	45	None	add
131	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  3],  work[i  +  4]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  3],  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  3],  work[i  +  4]);	  i0    =    Math.max(work[i    +    3]);    	non-compiled	[CE]  ';'  expected	97	None	replace
132	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  3],  work[i  +  2]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  3],  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  3],  work[i  +  2]);	  i0    =    Math.max(work[i    +    3]);    	non-compiled	[CE]  ';'  expected	97	None	replace
133	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  3],  work[i  +  3]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  3],  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  3],  work[i  +  3]);	  i0    =    Math.max(work[i    +    3]);    	non-compiled	[CE]  ';'  expected	97	None	replace
134	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	124	None	replace
135	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	124	None	replace
136	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  	non-compiled	[CE]  ';'  expected	164	None	add
137	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  	non-compiled	[CE]  ';'  expected	164	None	add
138	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  	non-compiled	[CE]  ';'  expected	164	None	add
139	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	164	None	add
140	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMin    =    Math.max(offDiagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	123	None	replace
141	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	108	None	add
142	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	108	None	add
143	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	108	None	add
144	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	108	None	add
145	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	47	None	add
146	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	47	None	add
147	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	47	None	add
148	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	47	None	add
149	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  I0  =  1  +  i  -  4;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  I0  =  1  +  i  -  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  I0  =  1  +  i  -  4;	  i0    =    1    +    i    /    4;    I0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	100	None	replace
150	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	46	None	replace
151	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	46	None	replace
152	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	120	None	add
153	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	120	None	add
154	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	120	None	add
155	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	120	None	add
156	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  -  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  -  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  1  +  i  -  3;	  i0    =    1    +    i    /    2;    i0    =    1    +    i    /    3;    timeout    	non-compiled	[CE]  ';'  expected	33	None	replace
157	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	21	None	add
158	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	21	None	add
159	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	21	None	add
160	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	21	None	add
161	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	93	None	replace
162	[BUG]  [BUGGY]  i0  =  Math.max(work[i,  work[i  +  4]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i,  work[i  +  4]);	  i0    =    Math.max(work[i,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	145	None	replace
163	[BUG]  [BUGGY]  i0  =  Math.max(work[i,  work[i  +  3]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i,  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i,  work[i  +  3]);	  i0    =    Math.max(work[i,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	145	None	replace
164	[BUG]  [BUGGY]  i0  =  Math.max(work[i,  work[i  +  1]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i,  work[i  +  1]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i,  work[i  +  1]);	  i0    =    Math.max(work[i,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	145	None	replace
165	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	36	None	replace
166	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	36	None	replace
167	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	36	None	replace
168	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	19	None	add
169	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	19	None	add
170	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagmax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagmax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagmax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	19	None	add
171	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	19	None	add
172	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	91	None	replace
173	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  1]  =  work[i  +  1];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  1]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    1]    =    work[i    +    1];    work[i  +  1]  =  work[i  +  1];	  	non-compiled	[CE]  ';'  expected	132	None	add
174	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  2]  =  work[i  +  1];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  2]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    1]    =    work[i    +    1];    work[i  +  2]  =  work[i  +  1];	  	non-compiled	[CE]  ';'  expected	132	None	add
175	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1];  Work[i  +  1]  =  work[i  +  1];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  1];  Work[i  +  1]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    1]    =    work[i    +    1];    Work[i  +  1]  =  work[i  +  1];	  	non-compiled	[CE]  ';'  expected	132	None	add
176	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  1]  =  work[i  +  2];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  1]  =  work[i  +  2];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    1]    =    work[i    +    1];    work[i  +  1]  =  work[i  +  2];	  	non-compiled	[CE]  ';'  expected	132	None	add
177	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	146	None	add
178	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	146	None	add
179	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	146	None	add
180	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	146	None	add
181	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
182	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    i0  =  1  +  i  -  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
183	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
184	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
185	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    3]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	4	None	add
186	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    3]    =    work[i    +    3];    Work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	4	None	add
187	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3].;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3].;  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    3]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3].;	  	non-compiled	[CE]  ';'  expected	4	None	add
188	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  Work[i  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  Work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    3]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  Work[i  +  3];	  	non-compiled	[CE]  ';'  expected	4	None	add
189	[BUG]  [BUGGY]  i0  =  1  +  work[i  *  4];  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  *  4];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  *  4];	  i0    =    1    +    work[i    /    4];    	non-compiled	[CE]  ';'  expected	163	None	replace
190	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0];  work[i  +  2]  =  work[i0];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0];  work[i  +  2]  =  work[i0];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0];    work[i  +  2]  =  work[i0];	  	non-compiled	[CE]  ';'  expected	102	None	add
191	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0];  Work[i  +  2]  =  work[i0];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0];  Work[i  +  2]  =  work[i0];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0];    Work[i  +  2]  =  work[i0];	  	non-compiled	[CE]  ';'  expected	102	None	add
192	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0];  works[i  +  2]  =  work[i0];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0];  works[i  +  2]  =  work[i0];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0];    works[i  +  2]  =  work[i0];	  	non-compiled	[CE]  ';'  expected	102	None	add
193	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0];  work[i  +  3]  =  work[i0];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0];  work[i  +  3]  =  work[i0];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0];    work[i  +  3]  =  work[i0];	  	non-compiled	[CE]  ';'  expected	102	None	add
194	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  6];  work[i  +  2]  =  work[i  +  6];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  6];  work[i  +  2]  =  work[i  +  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    6];    work[i  +  2]  =  work[i  +  6];	  	non-compiled	[CE]  ';'  expected	69	None	add
195	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  6];  Work[i  +  2]  =  work[i  +  6];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  6];  Work[i  +  2]  =  work[i  +  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    6];    Work[i  +  2]  =  work[i  +  6];	  	non-compiled	[CE]  ';'  expected	69	None	add
196	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  6];  works[i  +  2]  =  work[i  +  6];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  6];  works[i  +  2]  =  work[i  +  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    6];    works[i  +  2]  =  work[i  +  6];	  	non-compiled	[CE]  ';'  expected	69	None	add
197	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  6];  work[i  +  3]  =  work[i  +  6];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  6];  work[i  +  3]  =  work[i  +  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    6];    work[i  +  3]  =  work[i  +  6];	  	non-compiled	[CE]  ';'  expected	69	None	add
198	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	90	None	add
199	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	90	None	add
200	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	90	None	add
201	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2],  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  i0    =    Math.max(work[i    +    2],    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	37	None	replace
202	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  3]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  3]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2],  work[i  +  3]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);	  i0    =    Math.max(work[i    +    2],    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	37	None	replace
203	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  i0    =    Math.max(work[i    +    2],    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	37	None	replace
204	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	41	None	add
205	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	41	None	add
206	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	41	None	add
207	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	41	None	add
208	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	155	None	replace
209	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	65	None	add
210	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	65	None	add
211	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	65	None	add
212	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  1]);	  i0    =    Math.max(diagMin,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	54	None	replace
213	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	159	None	add
214	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	159	None	add
215	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	159	None	add
216	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	159	None	add
217	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
218	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	127	None	add
219	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	127	None	add
220	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	127	None	add
221	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	127	None	add
222	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  I0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  I0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  I0  =  1  +  i  /  4;	  i0    =    1    +    i    /    2;    I0    =    1    +    i    /    2;    	non-compiled	[CE]  ';'  expected	129	None	replace
223	[BUG]  [BUGGY]  work[i  +  2]  =  work[4];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[4];	  work[i    +    2]    =    work[i    +    6];    	non-compiled	[CE]  ';'  expected	70	None	replace
224	[BUG]  [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  6];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[4  *  n0  -  6];	  work[i    +    2]    =    work[i    +    6];    	non-compiled	[CE]  ';'  expected	70	None	replace
225	[BUG]  [BUGGY]  work[i  +  3]  =  work[i  +  4];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  3]  =  work[i  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  3]  =  work[i  +  4];	  work[i    +    2]    =    work[i    +    4];    	non-compiled	[CE]  ';'  expected	68	None	replace
226	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  3];  work[i  +  2]  =  work[i0  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  3];  work[i  +  2]  =  work[i0  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    +    3];    work[i  +  2]  =  work[i0  +  3];	  	non-compiled	[CE]  ';'  expected	106	None	add
227	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  3];  Work[i  +  2]  =  work[i0  +  3];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  3];  Work[i  +  2]  =  work[i0  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    +    3];    Work[i  +  2]  =  work[i0  +  3];	  	non-compiled	[CE]  ';'  expected	106	None	add
228	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  3];  work[i  +  3]  =  work[i0  +  3];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  3];  work[i  +  3]  =  work[i0  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    +    3];    work[i  +  3]  =  work[i0  +  3];	  	non-compiled	[CE]  ';'  expected	106	None	add
229	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  3];  works[i  +  2]  =  work[i0  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  3];  works[i  +  2]  =  work[i0  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    +    3];    works[i  +  2]  =  work[i0  +  3];	  	non-compiled	[CE]  ';'  expected	106	None	add
230	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  1  +  i  -  3;	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    3;    timeout    	non-compiled	[CE]  ';'  expected	88	None	replace
231	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1],  offDiagMin);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1],  offDiagMin);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1],  offDiagMin);	  i0    =    Math.max(work[i    +    1]);    	non-compiled	[CE]  ';'  expected	94	None	replace
232	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    2    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;	  timeout    	non-compiled	[CE]  ';'  expected	84	None	add
233	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  2  +  i  /  4;  i0  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  2  +  i  /  4;  i0  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    2    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  2  +  i  /  4;	  timeout    	non-compiled	[CE]  ';'  expected	84	None	add
234	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  two  +  i  /  4;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i0  =  two  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    2    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  two  +  i  /  4;	  timeout    	non-compiled	[CE]  ';'  expected	84	None	add
235	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  3  +  i  /  4;  i0  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  3  +  i  /  4;  i0  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    2    +    i    /    4;    i0  =  3  +  i  /  4;  i0  =  2  +  i  /  4;	  timeout    	non-compiled	[CE]  ';'  expected	84	None	add
236	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	138	None	add
237	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	138	None	add
238	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	138	None	add
239	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	138	None	add
240	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	139	None	replace
241	[BUG]  [BUGGY]  i0  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  4  +  i  /  2;	  i0    =    1    +    i    /    2;    i0    =    4    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	143	None	replace
242	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  4  +  i  -  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  4  +  i  -  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  4  +  i  -  2;	  i0    =    1    +    i    /    2;    i0    =    4    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	143	None	replace
243	[BUG]  [BUGGY]  diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	56	None	replace
244	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i]  +  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	56	None	replace
245	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  4],  work[i  +  2]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  4],  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  4],  work[i  +  2]);	  i0    =    Math.max(work[i    +    2],    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	144	None	replace
246	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	55	None	add
247	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	55	None	add
248	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	55	None	add
249	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	58	None	replace
250	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    3;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	87	None	add
251	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  3;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    3;    i0  =  1  +  i  /  4;  i0  =  2  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	87	None	add
252	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  2  +  i  /  4;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  2  +  i  /  4;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    3;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	87	None	add
253	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	126	None	replace
254	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	126	None	replace
255	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	126	None	replace
256	[BUG]  [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	147	None	replace
257	[BUG]  [BUGGY]  i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	147	None	replace
258	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  offDiagMin);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  offDiagMin);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  offDiagMin);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	96	None	replace
259	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  offDiagMax);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  offDiagMax);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  offDiagMax);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	96	None	replace
260	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  3;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    3;    i0  =  1  +  i  /  3;	  	non-compiled	[CE]  ';'  expected	39	None	add
261	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  int  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  3;  int  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    3;    int  i0  =  1  +  i  /  3;	  	non-compiled	[CE]  ';'  expected	39	None	add
262	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  i0  =  2  +  i  /  3;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  3;  i0  =  2  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    3;    i0  =  2  +  i  /  3;	  	non-compiled	[CE]  ';'  expected	39	None	add
263	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  3;  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    3;    i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	39	None	add
264	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    3;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	32	None	add
265	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  2  +  i  /  2;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  2  +  i  /  2;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    3;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	32	None	add
266	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  2;  i0  =  1)  +  i  /  3;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  2;  i0  =  1)  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    3;    i0  =  1  +  i  /  2;  i0  =  1)  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	32	None	add
267	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	17	None	add
268	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	17	None	add
269	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	17	None	add
270	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	17	None	add
271	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	118	None	add
272	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	118	None	add
273	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	118	None	add
274	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  i0  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  i0  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    i0  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	118	None	add
275	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[i    +    3];    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	98	None	add
276	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[i    +    3];    int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	98	None	add
277	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  i0  =  1  +  i  /  4;  work[i  +  3]  =  work[i  +  3];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  i0  =  1  +  i  /  4;  work[i  +  3]  =  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[i    +    3];    i0  =  1  +  i  /  4;  work[i  +  3]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	98	None	add
278	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  i0  =  1  +  i  /  4;  work[i  +  2)]  =  work[i  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  i0  =  1  +  i  /  4;  work[i  +  2)]  =  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[i    +    3];    i0  =  1  +  i  /  4;  work[i  +  2)]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	98	None	add
279	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  4],  offDiagMin);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  4],  offDiagMin);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  4],  offDiagMin);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	89	None	replace
280	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  6];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  -  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  -  6];	  work[i    +    2]    =    work[i0    -    3];    	non-compiled	[CE]  ';'  expected	105	None	replace
281	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  /  3];  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  /  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  /  3];	  work[i    +    2]    =    work[i0    -    3];    	non-compiled	[CE]  ';'  expected	105	None	replace
282	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  4];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  -  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  -  4];	  work[i    +    2]    =    work[i0    -    3];    	non-compiled	[CE]  ';'  expected	105	None	replace
283	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  3];  work[i  +  2]  =  work[i0  -  3];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  -  3];  work[i  +  2]  =  work[i0  -  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    -    3];    work[i  +  2]  =  work[i0  -  3];	  	non-compiled	[CE]  ';'  expected	104	None	add
284	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  3];  Work[i  +  2]  =  work[i0  -  3];  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  -  3];  Work[i  +  2]  =  work[i0  -  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    -    3];    Work[i  +  2]  =  work[i0  -  3];	  	non-compiled	[CE]  ';'  expected	104	None	add
285	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  3];  work[i  +  2]  =  work[i1  -  3];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  -  3];  work[i  +  2]  =  work[i1  -  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    -    3];    work[i  +  2]  =  work[i1  -  3];	  	non-compiled	[CE]  ';'  expected	104	None	add
286	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  3];  work[i  +  3]  =  work[i0  -  3];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  -  3];  work[i  +  3]  =  work[i0  -  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    -    3];    work[i  +  3]  =  work[i0  -  3];	  	non-compiled	[CE]  ';'  expected	104	None	add
287	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    4]);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
288	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    4]);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
289	[BUG]  [BUGGY]  OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	OffDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    4]);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
290	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	92	None	add
291	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	92	None	add
292	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	92	None	add
293	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	92	None	add
294	[BUG]  [BUGGY]  OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
295	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    4    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	142	None	add
296	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    4    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  4  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	142	None	add
297	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    4    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  3  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	142	None	add
298	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  4  +  i  /  2;  i0  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  4  +  i  /  2;  i0  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    4    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  4  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	142	None	add
299	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	15	None	add
300	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	15	None	add
301	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	15	None	add
302	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMax,  work[i]  +  work[i  +  2]);	  offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	128	None	replace
303	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	14	None	replace
304	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i]  +  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i]  +  work[i  +  2]);	  offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	14	None	replace
305	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  3]);	  offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	14	None	replace
306	[BUG]  [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	diagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	42	None	replace
307	[BUG]  [BUGGY]  i0  =  1  +  work[i  -  2]  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  -  2]  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  -  2]  /  4;	  i0    =    1    +    work[i    -    2]    /    2;    	non-compiled	[CE]  ';'  expected	101	None	replace
308	[BUG]  [BUGGY]  i0  =  1  +  work[i  -  2]  /  3;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  -  2]  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  -  2]  /  3;	  i0    =    1    +    work[i    -    2]    /    2;    	non-compiled	[CE]  ';'  expected	101	None	replace
309	[BUG]  [BUGGY]  i0  =  1  +  work[i  -  2]  *  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  -  2]  *  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  -  2]  *  2;	  i0    =    1    +    work[i    -    2]    /    2;    	non-compiled	[CE]  ';'  expected	101	None	replace
310	[BUG]  [BUGGY]  work[i  +  4]  =  work[i0];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  4]  =  work[i0];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  4]  =  work[i0];	  work[i    +    2]    =    work[i0];    	non-compiled	[CE]  ';'  expected	103	None	replace
311	[BUG]  [BUGGY]  work[i  +  3]  =  work[i0];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  3]  =  work[i0];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  3]  =  work[i0];	  work[i    +    2]    =    work[i0];    	non-compiled	[CE]  ';'  expected	103	None	replace
312	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  4]  +  work[i  +  2]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  4]  +  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  4]  +  work[i  +  2]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	76	None	replace
313	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]	          if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    else    {    offDiagMax    =    Math.min(diagMax,    work[i    +    2]    	non-compiled	[CE]  ';'  expected	38	None	replace
314	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]	          if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    else    {    offDiagMax    =    Math.min(diagMax,    work[i    +    2]    	non-compiled	[CE]  ';'  expected	38	None	replace
315	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]	          if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    else    {    offDiagMax    =    Math.min(diagMax,    work[i    +    2]    	non-compiled	[CE]  ';'  expected	38	None	replace
316	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]	          if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    else    {    offDiagMax    =    Math.min(diagMax,    work[i    +    2]    	non-compiled	[CE]  ';'  expected	38	None	replace
317	[BUG]  [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	151	None	replace
318	[BUG]  [BUGGY]  i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	151	None	replace
319	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	150	None	add
320	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  3];  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  3];  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    i0  =  1  +  i  -  3];  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	150	None	add
321	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    int  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	150	None	add
322	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	150	None	add
323	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	43	None	add
324	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	43	None	add
325	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	43	None	add
326	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	43	None	add
327	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  4]  +  work[i  +  2],  offDiagMax);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  4]  +  work[i  +  2],  offDiagMax);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  4]  +  work[i  +  2],  offDiagMax);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    offDiagMax);    	non-compiled	[CE]  ';'  expected	80	None	replace
328	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  6];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  6];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  6];	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	99	None	replace
329	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	13	None	add
330	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    OffDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	13	None	add
331	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	13	None	add
332	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	112	None	add
333	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	112	None	add
334	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  	non-compiled	[CE]  ';'  expected	112	None	add
335	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	112	None	add
336	[BUG]  [BUGGY]  i0  =  3  +  i  /  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  3  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  3  +  i  /  2;	  i0    =    1    +    i    /    2;    i0    =    3    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	141	None	replace
337	[BUG]  [BUGGY]  i0  =  3  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  3  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  3  +  i  /  4;	  i0    =    1    +    i    /    2;    i0    =    3    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	141	None	replace
338	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	59	None	add
339	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	59	None	add
340	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	59	None	add
341	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	59	None	add
342	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  1  +  i  /  2;	  i0    =    1    +    i    /    2;    i0    =    1    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	28	None	replace
343	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	51	None	add
344	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	51	None	add
345	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  	non-compiled	[CE]  ';'  expected	51	None	add
346	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	51	None	add
347	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	114	None	add
348	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	114	None	add
349	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  	non-compiled	[CE]  ';'  expected	114	None	add
350	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	114	None	add
351	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	63	None	add
352	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	63	None	add
353	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	63	None	add
354	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	63	None	add
355	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  6];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  +  6];	  work[i    +    2]    =    work[i0    +    3];    	non-compiled	[CE]  ';'  expected	107	None	replace
356	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  4];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  +  4];	  work[i    +    2]    =    work[i0    +    3];    	non-compiled	[CE]  ';'  expected	107	None	replace
357	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	9	None	add
358	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	9	None	add
359	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	9	None	add
360	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	9	None	add
361	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  -  4;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  -  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  2  +  i  -  4;	  i0    =    1    +    i    /    4;    i0    =    2    +    i    /    4;    timeout    	non-compiled	[CE]  ';'  expected	85	None	replace
362	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  -  3;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  -  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  2  +  i  -  3;	  i0    =    1    +    i    /    4;    i0    =    2    +    i    /    4;    timeout    	non-compiled	[CE]  ';'  expected	85	None	replace
363	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  3]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  3]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	131	None	replace
364	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  6]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  6]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  6]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	131	None	replace
365	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  5]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  5]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  work[i  +  5]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	131	None	replace
366	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i]  +  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i]  +  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i]  +  work[i  +  2]);	  offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	35	None	replace
367	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  1]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMin,  work[i  +  1]);	  offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	35	None	replace
368	[BUG]  [BUGGY]  i0  =  1  +  work[i  *  2];  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  *  2];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  *  2];	  i0    =    1    +    work[i    /    2];    	non-compiled	[CE]  ';'  expected	158	None	replace
369	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	161	None	add
370	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	161	None	add
371	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	161	None	add
372	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  i0  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  i0  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    i0  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	161	None	add
373	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4],  offDiagMin);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4],  offDiagMin);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  4],  offDiagMin);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	95	None	replace
374	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4],  offDiagMax);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4],  offDiagMax);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  4],  offDiagMax);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	95	None	replace
375	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	110	None	add
376	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  OffDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    OffDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	110	None	add
377	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	110	None	add
378	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	110	None	add
379	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    2    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  2  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	30	None	add
380	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  2  +  i  /  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  2  +  i  /  2;  i0  =  2  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    2    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  2  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	30	None	add
381	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  3;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    2    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  2  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	30	None	add
382	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  two  +  i  /  2;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i0  =  two  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    2    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  two  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	30	None	add
383	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	57	None	add
384	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	57	None	add
385	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    OffDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	57	None	add
386	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	57	None	add
387	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	1	None	add
388	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    2]    =    work[i    +    3];    Work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	1	None	add
389	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	1	None	add
390	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  4];  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  4];  work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  4];  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	1	None	add
391	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]  +  work[i  +  4]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]  +  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  1]  +  work[i  +  4]);	  i0    =    Math.max(diagMin,    work[i    +    2]    +    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	116	None	replace
392	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	62	None	replace
393	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	62	None	replace
394	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {	  offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	62	None	replace
395	[BUG]  [BUGGY]  i0  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	147	None	replace
396	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  	non-compiled	[CE]  ';'  expected	159	None	add
397	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	161	None	add
398	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  4  +  i  -  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  4  +  i  -  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  4  +  i  -  2;	  i0    =    1    +    i    /    2;    i0    =    4    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	143	None	replace
399	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  4  +  i  -  3;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  4  +  i  -  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  4  +  i  -  3;	  i0    =    1    +    i    /    2;    i0    =    4    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	143	None	replace
400	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	138	None	add
401	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	34	None	add
402	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  	non-compiled	[CE]  ';'  expected	45	None	add
403	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	45	None	add
404	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	139	None	replace
405	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	139	None	replace
406	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	36	None	replace
407	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	36	None	replace
408	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	44	None	replace
409	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i0  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i0  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i0  +  2]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	44	None	replace
410	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  i1  =  1  +  i  /  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  1  +  i  /  2;  i1  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i1  =  1  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	27	None	add
411	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  2)]  =  work[i  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  2)]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  2)]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	1	None	add
412	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  work[i  +  3]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMin,  work[i  +  3]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    offDiagMin);    	non-compiled	[CE]  ';'  expected	79	None	replace
413	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	49	None	add
414	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	49	None	add
415	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	120	None	add
416	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	150	None	add
417	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i1  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i1  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i1  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	150	None	add
418	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  2;  i1  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  1  +  i  /  2;  i1  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    3;    i0  =  1  +  i  /  2;  i1  =  1  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	32	None	add
419	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	21	None	add
420	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	57	None	add
421	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i1  =  2  +  i  /  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i1  =  2  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    2    +    i    /    2;    i0  =  1  +  i  /  2;  i1  =  2  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	30	None	add
422	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i2  =  2  +  i  /  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  1  +  i  /  2;  i2  =  2  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    2    +    i    /    2;    i0  =  1  +  i  /  2;  i2  =  2  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	30	None	add
423	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2],  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2],  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);	  i0    =    Math.max(work[i    +    2],    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	37	None	replace
424	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i2  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i2  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    2    +    i    /    4;    i0  =  1  +  i  /  4;  i2  =  2  +  i  /  4;	  timeout    	non-compiled	[CE]  ';'  expected	84	None	add
425	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i1  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  i0  =  1  +  i  /  4;  i1  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    2    +    i    /    4;    i0  =  1  +  i  /  4;  i1  =  2  +  i  /  4;	  timeout    	non-compiled	[CE]  ';'  expected	84	None	add
426	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  -  4];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  -  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i  -  4];	  work[i    +    2]    =    work[i    +    4];    	non-compiled	[CE]  ';'  expected	68	None	replace
427	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	41	None	add
428	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  3  +  i  /  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  3  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  3  +  i  /  2;	  i0    =    1    +    i    /    2;    i0    =    3    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	141	None	replace
429	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  3  +  i  -  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  3  +  i  -  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  3  +  i  -  2;	  i0    =    1    +    i    /    2;    i0    =    3    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	141	None	replace
430	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]  +  work[i  +  3]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]  +  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  1]  +  work[i  +  3]);	  i0    =    Math.max(diagMin,    work[i    +    2]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	117	None	replace
431	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	134	None	add
432	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	22	None	replace
433	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	22	None	replace
434	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	8	None	replace
435	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	8	None	replace
436	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	43	None	add
437	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	43	None	add
438	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i0  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMax,  work[i0  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMax,  work[i0  +  3]);	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	56	None	replace
439	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	98	None	add
440	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[i  +  3];  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[i    +    3];    I0  =  1  +  i  /  4;  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	98	None	add
441	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	50	None	replace
442	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  4];  work[i  +  3]  =  work[i  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  4];  work[i  +  3]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    3]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  4];  work[i  +  3]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	4	None	add
443	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  4];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  3]  =  work[i  +  3];  work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    3]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  3]  =  work[i  +  4];	  	non-compiled	[CE]  ';'  expected	4	None	add
444	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	63	None	add
445	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	63	None	add
446	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	111	None	replace
447	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  3]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	126	None	replace
448	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  -  1];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  -  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i0  -  1];	  work[i    +    2]    =    work[i    +    1];    	non-compiled	[CE]  ';'  expected	72	None	replace
449	[BUG]  [BUGGY]  work[i  +  3]  =  work[i  +  1];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  3]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  3]  =  work[i  +  1];	  work[i    +    2]    =    work[i    +    1];    	non-compiled	[CE]  ';'  expected	72	None	replace
450	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  3]  +  work[i  +  4]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  3]  +  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  3]  +  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	95	None	replace
451	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  I0  =  1  +  i  -  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  I0  =  1  +  i  -  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  I0  =  1  +  i  -  2;	  i0    =    1    +    i    /    2;    I0    =    1    +    i    /    2;    	non-compiled	[CE]  ';'  expected	129	None	replace
452	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  	non-compiled	[CE]  ';'  expected	55	None	add
453	[BUG]  [BUGGY]  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	non-compiled	[CE]  ';'  expected	154	None	replace
454	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    }    	non-compiled	[CE]  ';'  expected	154	None	replace
455	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	46	None	replace
456	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  else  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  else  {  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  else  {	  offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	46	None	replace
457	[BUG]  [BUGGY]  work[i  +  4]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  4]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  4]  =  work[i  +  3];  Work[i  +  2]  =  work[i  +  3];	          work[i    +    2]    =    work[i    +    3];    Work[i    +    2]    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	3	None	replace
458	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1];  Work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  1];  Work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i  +  1];  Work[i  +  2]  =  work[i  +  3];	          work[i    +    2]    =    work[i    +    3];    Work[i    +    2]    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	3	None	replace
459	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	7	None	add
460	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	7	None	add
461	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	15	None	add
462	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	25	None	add
463	[BUG]  [BUGGY]  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    4]);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
464	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	60	None	replace
465	[BUG]  [BUGGY]  i0  =  1  +  work[i  -  2];  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  -  2];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  -  2];	  i0    =    1    +    work[i    /    2];    	non-compiled	[CE]  ';'  expected	158	None	replace
466	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i1  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  i1  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i1  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	82	None	add
467	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  /  6];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  /  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i  /  6];	  work[i    +    2]    =    work[i    +    6];    	non-compiled	[CE]  ';'  expected	70	None	replace
468	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  -  6];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  -  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  2]  =  work[i  -  6];	  work[i    +    2]    =    work[i    +    6];    	non-compiled	[CE]  ';'  expected	70	None	replace
469	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMax  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	110	None	add
470	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	17	None	add
471	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	17	None	add
472	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(diagMax,  work[i  +  4]);	  offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	20	None	replace
473	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	66	None	replace
474	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {	  offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	66	None	replace
475	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	135	None	replace
476	[BUG]  [BUGGY]  i0  =  1  +  work[i  -  4];  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  -  4];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  -  4];	  i0    =    1    +    work[i    /    4];    	non-compiled	[CE]  ';'  expected	163	None	replace
477	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  -  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  -  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  1  +  i  -  2;	  i0    =    1    +    i    /    2;    i0    =    1    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	28	None	replace
478	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax,  work[i  +  4]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    offDiagMax);    	non-compiled	[CE]  ';'  expected	80	None	replace
479	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax,  work[i  +  3]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  2],  offDiagMax,  work[i  +  3]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    2],    offDiagMax);    	non-compiled	[CE]  ';'  expected	80	None	replace
480	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  1)]  =  work[i  +  1];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  1];  work[i  +  1)]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    1]    =    work[i    +    1];    work[i  +  1)]  =  work[i  +  1];	  	non-compiled	[CE]  ';'  expected	132	None	add
481	[BUG]  [BUGGY]  work[i  +  1]  =  work[i0  -  1];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i0  -  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i0  -  1];	  work[i    +    1]    =    work[i    +    1];    	non-compiled	[CE]  ';'  expected	133	None	replace
482	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  -  1];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  -  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i  -  1];	  work[i    +    1]    =    work[i    +    1];    	non-compiled	[CE]  ';'  expected	133	None	replace
483	[BUG]  [BUGGY]  i0  =  1  +  i  -  4;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  -  4;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  -  4;  i0  =  1  +  i  /  3;	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    3;    timeout    	non-compiled	[CE]  ';'  expected	88	None	replace
484	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  *  3;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  *  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  1  +  i  *  3;	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    3;    timeout    	non-compiled	[CE]  ';'  expected	88	None	replace
485	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	18	None	replace
486	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  else  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  else  {  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  else  {	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	18	None	replace
487	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  2  +  i  -  4;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  2  +  i  -  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  2  +  i  -  4;	  i0    =    1    +    i    /    2;    i0    =    2    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	31	None	replace
488	[BUG]  [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	118	None	add
489	[BUG]  [BUGGY]  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	OffDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	155	None	replace
490	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(offDiagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(offDiagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.min(offDiagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	91	None	replace
491	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	9	None	add
492	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	9	None	add
493	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	13	None	add
494	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  onDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  onDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    onDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	13	None	add
495	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	23	None	add
496	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	10	None	replace
497	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {	  offDiagMin    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	10	None	replace
498	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	93	None	replace
499	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1];  work[i  +  3]  =  work[i  +  1];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  1];  work[i  +  3]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    1];    work[i  +  3]  =  work[i  +  1];	  	non-compiled	[CE]  ';'  expected	71	None	add
500	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	83	None	replace
501	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  2;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  i  -  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  1  +  i  -  2;	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	83	None	replace
502	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	124	None	replace
503	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  4]);  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	124	None	replace
504	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
505	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	64	None	replace
506	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {	  offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	64	None	replace
507	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	146	None	add
508	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i1  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i1  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  i1  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	146	None	add
509	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  3]  +  work[i  +  2]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  3]  +  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  3]  +  work[i  +  2]);	  i0    =    Math.max(work[i    +    3]);    	non-compiled	[CE]  ';'  expected	97	None	replace
510	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	12	None	replace
511	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {	  offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	12	None	replace
512	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	112	None	add
513	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	11	None	add
514	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	127	None	add
515	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	59	None	add
516	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	59	None	add
517	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	121	None	replace
518	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	61	None	add
519	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	61	None	add
520	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  I0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  3;  I0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    3;    I0  =  1  +  i  /  3;	  	non-compiled	[CE]  ';'  expected	39	None	add
521	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  (i0  =  1  +  i  /  3);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  3;  (i0  =  1  +  i  /  3);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    3;    (i0  =  1  +  i  /  3);	  	non-compiled	[CE]  ';'  expected	39	None	add
522	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i1  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i1  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    4    +    i    /    2;    i0  =  1  +  i  /  2;  i1  =  4  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	142	None	add
523	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i2  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  i2  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    4    +    i    /    2;    i0  =  1  +  i  /  2;  i2  =  4  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	142	None	add
524	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	92	None	add
525	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	  	non-compiled	[CE]  ';'  expected	92	None	add
526	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  -  6;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  i  -  6;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  2  +  i  -  6;	  i0    =    1    +    i    /    4;    i0    =    2    +    i    /    4;    timeout    	non-compiled	[CE]  ';'  expected	85	None	replace
527	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    I0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
528	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];	  	non-compiled	[CE]  ';'  expected	148	None	add
529	[BUG]  [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(i0  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	16	None	replace
530	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	90	None	add
531	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	114	None	add
532	[BUG]  [BUGGY]  i0  =  1  +  i  -  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  -  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  -  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	153	None	replace
533	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  work[i  +  2];  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  work[i  +  2];  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  1  +  work[i  +  2];  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	153	None	replace
534	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  1]);	  offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	14	None	replace
535	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i0  +  2]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i0  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i0  +  2]);	  offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	14	None	replace
536	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	65	None	add
537	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	108	None	add
538	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	55	None	add
539	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  4];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i  +  4];	  work[i    +    2]    =    work[i    +    4];    	non-compiled	[CE]  ';'  expected	68	None	replace
540	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
541	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  int  i  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  int  i  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    int  i  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
542	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i1  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i1  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  4];  i1  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	148	None	add
543	[BUG]  [BUGGY]  i0  =  4  *  i  /  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  4  *  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  4  *  i  /  2;	  i0    =    1    +    i    /    2;    i0    =    4    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	143	None	replace
544	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1];  work[i  +  2]  =  work[i  +  1].;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  1];  work[i  +  2]  =  work[i  +  1].;  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    1];    work[i  +  2]  =  work[i  +  1].;	  	non-compiled	[CE]  ';'  expected	71	None	add
545	[BUG]  [BUGGY]  work[i  +  4]  =  work[i  +  1];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  4]  =  work[i  +  1];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  4]  =  work[i  +  1];	  work[i    +    2]    =    work[i    +    1];    	non-compiled	[CE]  ';'  expected	72	None	replace
546	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  4;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  2  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  2  +  i  /  4;	  i0    =    1    +    i    /    2;    i0    =    2    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	31	None	replace
547	[BUG]  [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	90	None	add
548	[BUG]  [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.min(offDiagMax,  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	126	None	replace
549	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  4  +  i  /  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  4  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    4    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  4  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	142	None	add
550	[BUG]  [BUGGY]  I0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  I0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	I0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    I0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	100	None	replace
551	[BUG]  [BUGGY]  if(work[i  +  3]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  3]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  3]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	139	None	replace
552	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	25	None	add
553	[BUG]  [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  1]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  1]);	  i0    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	36	None	replace
554	[BUG]  [BUGGY]  work[i  +  3]  =  work[i  +  6];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  3]  =  work[i  +  6];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  3]  =  work[i  +  6];	  work[i    +    2]    =    work[i    +    6];    	non-compiled	[CE]  ';'  expected	70	None	replace
555	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    1]);    offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);	  	non-compiled	[CE]  ';'  expected	164	None	add
556	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  work[i  +  4]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  3],  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	96	None	replace
557	[BUG]  [BUGGY]  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  4;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  2;  i0  =  3  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  2;  i0  =  3  +  i  /  4;	  i0    =    1    +    i    /    2;    i0    =    3    +    i    /    2;    timeout    	non-compiled	[CE]  ';'  expected	141	None	replace
558	[BUG]  [BUGGY]  I0  =  1  +  i  /  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  I0  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	I0  =  1  +  i  /  2;	  i0    =    1    +    i    /    2;    I0    =    1    +    i    /    2;    	non-compiled	[CE]  ';'  expected	129	None	replace
559	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	92	None	add
560	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  onDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    onDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	15	None	add
561	[BUG]  [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }	  offDiagMax    =    Math.min(offDiagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	109	None	replace
562	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  int  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  int  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    int  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	152	None	add
563	[BUG]  [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  1]);  }	  offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	26	None	replace
564	[BUG]  [BUGGY]  OffDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  OffDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	OffDiagMin  =  Math.max(offDiagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]	          if(work[i    +    2]    <    =    0)    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    else    {    offDiagMax    =    Math.min(diagMax,    work[i    +    2]    	non-compiled	[CE]  ';'  expected	38	None	replace
565	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  work[i  +  2]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  work[i  +  3],  work[i  +  2]);	  i0    =    Math.max(work[i    +    1]    +    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	130	None	replace
566	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	155	None	replace
567	[BUG]  [BUGGY]  i0  =  1  +  work[i  /  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  /  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  /  3];	  i0    =    1    +    i    /    3;    	non-compiled	[CE]  ';'  expected	40	None	replace
568	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  }  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  }	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    4]);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
569	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  4]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    4]);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
570	[BUG]  [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    offDiagMin  =  Math.min(diagMin,  work[i  +  2]);  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	19	None	add
571	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  2;  i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    2;    i0  =  4  +  i  /  2;  i0  =  1  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	27	None	add
572	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  6];  work[i  +  2]  =  work[i  +  6].;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i  +  6];  work[i  +  2]  =  work[i  +  6].;  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i    +    6];    work[i  +  2]  =  work[i  +  6].;	  	non-compiled	[CE]  ';'  expected	69	None	add
573	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin  =  Math.min(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	113	None	replace
574	[BUG]  [BUGGY]  i0  =  1  +  i  -  4;  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  -  4;  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  -  4;  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	83	None	replace
575	[BUG]  [BUGGY]  int  i0  =  1  +  work[i  /  2];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  int  i0  =  1  +  work[i  /  2];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	int  i0  =  1  +  work[i  /  2];	  i0    =    1    +    i    /    2;    int    i0    =    1    +    i    /    2;    	non-compiled	[CE]  ';'  expected	29	None	replace
576	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  3  +  i  /  4;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  3;  i0  =  3  +  i  /  4;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    3;    i0  =  3  +  i  /  4;  i0  =  1  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	87	None	add
577	[BUG]  [BUGGY]  i0  =  1  +  work[i  +  2];  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  work[i  +  2];  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  work[i  +  2];  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    4;    offDiagMax    =    Math.max(offDiagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	153	None	replace
578	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    i0  =  2  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	150	None	add
579	[BUG]  [BUGGY]  work[i  +  1]  =  work[i0];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  1]  =  work[i0];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i  +  1]  =  work[i0];	  work[i    +    2]    =    work[i0];    	non-compiled	[CE]  ';'  expected	103	None	replace
580	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  3  +  i  /  2;  i0  =  1  +  i  /  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  1  +  i  /  3;  i0  =  3  +  i  /  2;  i0  =  1  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    1    +    i    /    3;    i0  =  3  +  i  /  2;  i0  =  1  +  i  /  3;	  timeout    	non-compiled	[CE]  ';'  expected	32	None	add
581	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	42	None	replace
582	[BUG]  [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  1]  =  work[i  +  2];  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]          work[i    +    2]    =    work[i    +    3];    work[i  +  2]  =  work[i  +  3];  work[i  +  1]  =  work[i  +  2];  work[i  +  2]  =  work[i  +  3];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	                work[i        +        2]        =        work[i        +        3];        work[i    +    2]    =    work[i    +    3];    work[i  +  1]  =  work[i  +  2];  work[i  +  2]  =  work[i  +  3];	  	non-compiled	[CE]  ';'  expected	1	None	add
583	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  if(offDiagMax  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  if(offDiagMax  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    if(offDiagMax  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  	non-compiled	[CE]  ';'  expected	23	None	add
584	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]  +  work[i  +  2]);  offDiagMax  =  Math.min(diagMin,  work[i  +  3]);	  i0    =    Math.max(work[i    +    2]    +    work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	124	None	replace
585	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0];  work[i  +  2]  =  work[i0].;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0];  work[i  +  2]  =  work[i0].;  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0];    work[i  +  2]  =  work[i0].;	  	non-compiled	[CE]  ';'  expected	102	None	add
586	[BUG]  [BUGGY]  OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	OffDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	          if(work[i    +    2]    <    =    work[i    +    3])    {    offDiagMin    =    Math.min(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
587	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(diagMin,  work[i  +  3]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	47	None	add
588	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax  =  Math.max(diagMin,  work[i  +  4]);	  offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	14	None	replace
589	[BUG]  [BUGGY]  work[i  +  2]  =  work[i0  +  3];  work[i  +  2]  =  work[i0  +  4];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  work[i  +  2]  =  work[i0  +  3];  work[i  +  2]  =  work[i0  +  4];  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	work[i    +    2]    =    work[i0    +    3];    work[i  +  2]  =  work[i0  +  4];	  	non-compiled	[CE]  ';'  expected	106	None	add
590	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	93	None	replace
591	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  work[i  +  3];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  2  +  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  2  +  work[i  +  3];	  i0    =    1    +    i    /    4;    i0    =    2    +    i    /    4;    timeout    	non-compiled	[CE]  ';'  expected	85	None	replace
592	[BUG]  [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  if(offDiagMin  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  if(offDiagMin  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.min(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    if(offDiagMin  >=  0)  {  offDiagMin  =  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  	non-compiled	[CE]  ';'  expected	63	None	add
593	[BUG]  [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	44	None	replace
594	[BUG]  [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  work[i  +  3];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  4;  i0  =  1  +  work[i  +  3];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  1  +  i  /  4;  i0  =  1  +  work[i  +  3];	  i0    =    1    +    i    /    4;    i0    =    1    +    i    /    3;    timeout    	non-compiled	[CE]  ';'  expected	88	None	replace
595	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1,  work[i  +  2]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1,  work[i  +  2]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1,  work[i  +  2]);	  i0    =    Math.max(work[i    +    1],    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	81	None	replace
596	[BUG]  [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  <  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	56	None	replace
597	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  4]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  4]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  2]);  offDiagMax  =  Math.min(offDiagMax,  work[i  +  4]);	  i0    =    Math.max(work[i    +    2]);    offDiagMax    =    Math.min(diagMin,    work[i    +    4]);    	non-compiled	[CE]  ';'  expected	125	None	replace
598	[BUG]  [BUGGY]  i0  =  1  +  i  /  3;  i0  =  3  +  i  /  3;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  1  +  i  /  3;  i0  =  3  +  i  /  3;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0    =    1    +    i    /    3;    i0  =  3  +  i  /  3;	  	non-compiled	[CE]  ';'  expected	39	None	add
599	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    work[i  +  2]  =  work[4  *  n0  -  6];  i0  =  1  +  i  /  4;  i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        work[i    +    2]    =    work[4    *    n0    -    6];    i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  work[i  +  2]  =  work[4  *  n0  -  6];	  	non-compiled	[CE]  ';'  expected	146	None	add
600	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    offDiagMin  =  Math.min(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	159	None	add
601	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  onDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    onDiagMin  =  Math.max(diagMin,  work[i  +  1]);  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);	  	non-compiled	[CE]  ';'  expected	159	None	add
602	[BUG]  [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  2  +  i  /  2;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    2;    i0  =  2  +  i  /  2;  i0  =  3  +  i  /  2;  i0  =  2  +  i  /  2;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        2;        i0    =    2    +    i    /    2;    i0  =  3  +  i  /  2;  i0  =  2  +  i  /  2;	  timeout    	non-compiled	[CE]  ';'  expected	30	None	add
603	[BUG]  [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  if(offDiagMax  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  if(offDiagMax  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMax    =    Math.max(diagMin,    work[i    +    4]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    if(offDiagMax  >=  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }	  	non-compiled	[CE]  ';'  expected	43	None	add
604	[BUG]  [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  1]  >  0)  {  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  }  else  {  offDiagMax  =  Math.min(diagMax,  work[i  +  2]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    1]);    offDiagMax    =    Math.min(diagMax,    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	22	None	replace
605	[BUG]  [BUGGY]  i0  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  work[4  *  n0  -  3];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    3];    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	151	None	replace
606	[BUG]  [BUGGY]  i0  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  work[4  *  n0  -  4];  i0  =  1  +  i  /  4;	  i0    =    1    +    i    /    4;    work[i    +    2]    =    work[4    *    n0    -    4];    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	149	None	replace
607	[BUG]  [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  3  +  i  /  4;  i0  =  1  +  i  /  4;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0    =    1    +    i    /    4;    i0  =  1  +  i  /  4;  i0  =  3  +  i  /  4;  i0  =  1  +  i  /  4;  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0        =        1        +        i        /        4;        i0    =    1    +    i    /    4;    i0  =  3  +  i  /  4;  i0  =  1  +  i  /  4;	  	non-compiled	[CE]  ';'  expected	82	None	add
608	[BUG]  [BUGGY]  i0  =  Math.max(work[i  +  1]  +  i  /  4]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  i0  =  Math.max(work[i  +  1]  +  i  /  4]);  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	i0  =  Math.max(work[i  +  1]  +  i  /  4]);	  i0    =    Math.max(work[i    +    1]);    	non-compiled	[CE]  ';'  expected	94	None	replace
609	[BUG]  [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  if(offDiagMin  >=  0)  {  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  if(offDiagMin  >=  0)  {  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(diagMax,    work[i    +    2]);    offDiagMax    =    Math.max(diagMin,    work[i    +    2]);    if(offDiagMin  >=  0)  {  offDiagMin  =  Math.max(diagMax,  work[i  +  2]);  offDiagMax  =  Math.max(diagMin,  work[i  +  2]);  }	  	non-compiled	[CE]  ';'  expected	13	None	add
610	[BUG]  [BUGGY]  int  i0  =  1  +  work[i  /  4];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  int  i0  =  1  +  work[i  /  4];  [BUGGY]      }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	int  i0  =  1  +  work[i  /  4];	  i0    =    1    +    i    /    4;    int    i0    =    1    +    i    /    4;    	non-compiled	[CE]  ';'  expected	86	None	replace
611	[BUG]  [BUGGY]  if(work[i  +  3]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  if(work[i  +  3]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	if(work[i  +  3]  >  0)  {  offDiagMax  =  Math.max(diagMin,  work[i  +  3]);  }  else  {  offDiagMax  =  Math.max(diagMax,  work[i  +  3]);  }	  offDiagMax    =    Math.max(diagMin,    work[i    +    3]);    offDiagMax    =    Math.max(diagMax,    work[i    +    3]);    	non-compiled	[CE]  ';'  expected	58	None	replace
612	[BUG]  [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        double  offDiagMin  =  (i0  ==  n0)  ?  0  :  work[4  *  n0  -  6];  double  offDiagMax  =  0;  double  diagMax=  work[4  *  n0  -  4];  double  diagMin=  diagMax;  i0  =  0;  for  (int  i  =  4  *  (n0  -  2);  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  0)  {  i0  =  1  +  i  /  4;      [BUGGY]  offDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  onDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);  [BUGGY]      break;  }  if  (diagMin  >=  4  *  offDiagMax)  {  diagMin=  Math.min(diagMin,  work[i  +  4]);  offDiagMax  =  Math.max(offDiagMax,  work[i  +  2]);  }  diagMax=  Math.max(diagMax,  work[i]  +  work[i  +  2]);  offDiagMin  =  Math.min(offDiagMin,  work[i  +  2]);  }  work[4  *  n0  -  2]  =  offDiagMin;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  processGeneralBlock  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	872	872	1	replace	offDiagMin    =    Math.max(offDiagMin,    work[i    +    2]);    offDiagMax    =    Math.max(diagMax,    work[i    +    2]);    onDiagMin  =  Math.max(offDiagMin,  work[i  +  2]);  offDiagMax  =  Math.max(diagMax,  work[i  +  2]);	  	non-compiled	[CE]  ';'  expected	127	None	add
